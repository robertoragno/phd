---
always_allow_html: true
---

# Archaeobotany {#sec-archaeobotany style="text-align:justify;"}

```{r}
#| echo: false
#| message: false
#| output: false

# Load functions
source('functions_bot.R')

# Libraries
library(rethinking)
library(tidybayes.rethinking)
library(tidybayes)
```

This chapter presents the quantitative findings based on macrobotanical data from 190 case studies used in this research. The limitations inherent in the dataset have been presented in both the materials (@sec-materials-bot) and methods (@sec-methods) sections. In particular, the considerable presence of outliers in numerous database samples would result in unreliable results if analysed as counts, necessitating a presence/absence analysis. Plant remains serve as a valuable indicator of ancient farming practices, and a general approach to supplying relative chronological trends is provided towards the conclusion of this chapter. The results will initially be presented in temporal order, offering ubiquity scores for each century under review. For explorative purposes, ubiquity has also been computed for Southern, Central and Northern Italy. The initial qualitative interpretations of the findings and the Bayesian modelling of site richness and diversity scores prompted a thorough study, including the development of hierarchical models for each macroregion. A case study examining the prevalence of free-threshing wheats and other more rustic cereal crops in Italy in the three macroregions was also carried out, both using a frequentist approach and in the form of Bayesian hierarchical models. Additional models have been developed for all classifications of plant macroremains utilizing more predictors, such as context type, site altitude, average yearly temperature and precipitation. This chapter also presents an assessment of these models.

## Ubiquity {style="text-align:justify;"}

In @sec-methods, we concluded that due to the numerous biases present in the sample, dealing with the archaeobotanical dataset warrants the use of a presence/absence analysis. One of the most prevalent types of presence/absence analyses for archaeobotanical remains is ubiquity. Technically speaking, ubiquity is a frequentist approach that only describes the presence of a particular species in a certain number of contexts. While there exist uncomplicated Bayesian substitutes, they still demand a certain degree of modelling or individual handling of each taxon purposes[^archaeobotany-1]. This level of detail is prohibitive for exploratory purposes. With this aim, ubiquity has been calculated (a) for each century, (b) for each Italian macroregion, stratified by chronological phase.

[^archaeobotany-1]: The Jeffreys interval is a suitable option for the Bayesian credible interval, which is obtained by using the non-informative Jeffreys prior for the binomial proportion $p$. The Jeffreys prior follows a $Beta(1/2, 1/2)$ distribution, which is a conjugate prior. The calculation of the posterior distribution for $p$ can be easily done by using $Beta(x+ \frac{1}{2}, n-x+\frac{1}{2})$.

::: {.content-visible when-format="html"}
The heatmap in @fig-heatmap-ubiquity provides a good overview of the temporal trends of presence of cereals, legumes, fruits and nuts in the entire area under examination. Despite some trends are visible, it is important to remember that these results are just exploratory and they need to be compared with other predictors (i.e. context type, macroregion, etc.). The chart additionally presents the scientific names of all plants being researched, thereby allowing the usage of common English names later in this chapter.
:::

::: {.content-visible when-format="pdf"}
The heatmap in @fig-heatmap-ubiquity-for-PDF provides a good overview of the temporal trends of presence of cereals, legumes, fruits and nuts in the entire area under examination. Despite some trends are visible, it is important to remember that these results are just exploratory and they need to be compared with other predictors (i.e. context type, macroregion, etc.). The chart additionally presents the scientific names of all plants being researched, thereby allowing the usage of common English names later in this chapter.
:::

```{r}
#| echo: false

# SQL file name: view_archaeobot without the Chronology column
#plants_export <- read.csv("/Users/robertoragno/Desktop/Learn #R/PhdTests/PhdTests/DATA/Archaeobotany/PlantsExport14July.csv", header=TRUE, sep=";")
bot_map <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/plants.csv", header=TRUE, sep=";")
plants_export <- bot_map[-5]

# SQL file name: Archaeobot_Condensed
# Import the file: the function Ubiquity_macroreg_chrono() requires the condensed plant table exported from the database. For more info, look at the Custom functions section.
Archaeobot_Condensed <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/Archaeobot_Condensed.csv", header=TRUE, sep=";")

# SQL file name: Archaeobot_viz
# It is the condensed table from the database, but without totals/plant type
Df_Cond_Plants <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/Archaeobot_Viz.csv", header=TRUE, sep=";")

```

::: {.content-visible when-format="html"}
```{r}
#| output: false
#| echo: false

# Load the libraries
# Note: these libraries are used for the data visualizations in this page.
library(RColorBrewer)
library(reshape2)
library(ggplot2)
library(hrbrthemes)
library(plotly)
library(patchwork)

## UBIQUITY

## Creating a dataframe that contains the ubiquity of each century under examination. 
Ubiquity_table <- data.frame(
  "I BCE" = archaeobotany_tables(plants_export, -1)$Ubiquity_exp,  
  "I CE" = archaeobotany_tables(plants_export, 1)$Ubiquity_exp,
  "II CE" = archaeobotany_tables(plants_export, 2)$Ubiquity_exp,
  "III CE" = archaeobotany_tables(plants_export, 3)$Ubiquity_exp,
  "IV CE" = archaeobotany_tables(plants_export, 4)$Ubiquity_exp,
  "V CE" = archaeobotany_tables(plants_export, 5)$Ubiquity_exp,
  "VI CE" = archaeobotany_tables(plants_export, 6)$Ubiquity_exp,
  "VII CE" = archaeobotany_tables(plants_export, 7)$Ubiquity_exp,
  "VIII CE" = archaeobotany_tables(plants_export, 8)$Ubiquity_exp,
  "IX CE" = archaeobotany_tables(plants_export, 9)$Ubiquity_exp,
  "X CE" = archaeobotany_tables(plants_export, 10)$Ubiquity_exp,
  "XI CE" = archaeobotany_tables(plants_export, 11)$Ubiquity_exp
  )

# Transform the ubiquity table into a matrix
Ubiquity_mat <- as.matrix(Ubiquity_table) 

# Rename the centuries
colnames(Ubiquity_mat) <- c("1st c. BCE", "1st c. CE", "2nd c. CE",
                            "3rd c. CE", "4th c. CE", "5th c. CE",
                            "6th c. CE", "7th c. CE", "8th c. CE",
                            "9th c. CE", "10th c. CE", "11th c. CE") 

# The data has to be molten to use it with ggplot2
# (package: reshape2)
Ubiquity_melt <- melt(Ubiquity_mat)

# Let's now rename the columns 
colnames(Ubiquity_melt) <- c("Taxon", "Century", "Ubiquity")

# Add a column for the text tooltip
Ubiquity_melt <- Ubiquity_melt %>%
  mutate(text = paste0("Taxon: ", Taxon, "\n", "Century: ", Century, "\n", "Value: ",round(Ubiquity,2)))

# Create the heatmap with ggplot2
Ubiquity_HM <- ggplot(Ubiquity_melt, aes(Century, Taxon, fill=Ubiquity, text=text)) + 
  geom_tile(colour="white") +
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "right",
        axis.ticks = element_blank(), 
        axis.text.x = element_text(angle = 90, hjust = 0)
        ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Ubiquity",
    subtitle="Diachronical heatmap of recorded plant species"
  ) +
  scale_fill_gradient(low = "white", high = "black")

```

```{r}
#| echo: false
#| label: fig-heatmap-ubiquity
#| fig-cap: "Diachronical heatmap of recorded plant species" 
#| fig-width: 5
#| fig-height: 6

ggplotly(Ubiquity_HM, tooltip="text")
```
:::

::: {.content-visible when-format="pdf"}
```{r}
#| echo: false
#| label: fig-heatmap-ubiquity-for-PDF
#| fig-cap: "Diachronical heatmap of recorded plant species" 
#| fig-width: 5
#| fig-height: 6

Ubiquity_HM
```
:::

### Macroregional trends {#sec-macroregional-differences-ubiquity}

In addition to investigating the ubiquity of each plant in every century, diachronic trends can also be derived by utilising the chronology and Italian sub-regions as predictive factors. This approach is only used as an initial form of data exploration, although this type of data stratification is risky with a data set that is not large enough. Sub-groups, such as Roman: Central Italy, may not be informative due to their size. It is not feasible, for example, to carry out this research at the level of centuries. To subset the data from the northern, central and southern Italian regions, the R function `Ubiquity_macroreg_chrono()` (Custom functions, @sec-Ubiquity-macroreg-chrono) was created. In order to enhance readability of the plots, we categorized taxa into cereals, pulses, and fruits/nuts. We did not include some dataset columns, such as fruits that were only present in a few sites, in the plot.

::: {.content-visible when-format="html"}
```{r}
#| echo: false
#| output: false


# Ubiquity by Italian Macro regions: Northern, Central and Southern Italy

# Load the libraries
library(vegan)
library(matrixStats)
library(patchwork)

# Creating a dataframe with the ubiquities of all macroregions and chronologies
bot_macroreg <- rbind(
  Ubiquity_R_NI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Northern Italy", "R"),
  Ubiquity_R_CI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Central Italy", "R"),
  Ubiquity_R_SI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Southern Italy", "R"),
  Ubiquity_LR_NI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Northern Italy", "LR"),
  Ubiquity_LR_CI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Central Italy", "LR"),
  Ubiquity_LR_SI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Southern Italy", "LR"),
  Ubiquity_EMA_NI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Northern Italy", "EMA"),
  Ubiquity_EMA_CI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Central Italy", "EMA"),
  Ubiquity_EMA_SI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Southern Italy", "EMA"),
  Ubiquity_Ma_NI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Northern Italy", "Ma"),
  Ubiquity_Ma_CI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Central Italy", "Ma"),
  Ubiquity_Ma_SI <- Ubiquity_macroreg_chrono(Archaeobot_Condensed,"Southern Italy", "Ma")
)

# Re-arranging the cereals/macroregions for visualisation on the Y axis
level_macroreg_order <- c("Southern Italy", "Central Italy", "Northern Italy")

level_cereals_order <- c("Common.Wheat", "Barley", "Rye", 
                         "Einkorn", "Emmer", "Proso.millet", 
                         "Foxtail.millet", "Oats", "Sorghum")

# Cereals
cer_ubiquity_macroreg.R <- filter(bot_macroreg, Chronology=="R" & Plant.Type=="Cereals")
cer_ubiquity_macroreg.R <- filter(cer_ubiquity_macroreg.R, Macroregion!="Central Italy")
cer_ubiquity_macroreg.LR <- filter(bot_macroreg, Chronology=="LR" & Plant.Type=="Cereals")
cer_ubiquity_macroreg.EMA <- filter(bot_macroreg, Chronology=="EMA" & Plant.Type=="Cereals")
cer_ubiquity_macroreg.Ma <- filter(bot_macroreg, (Chronology=="Ma" & Plant.Type=="Cereals"))
cer_ubiquity_macroreg.Ma <- filter(cer_ubiquity_macroreg.Ma, Macroregion!="Southern Italy")

#Pulses
puls_ubiquity_macroreg.R <- filter(bot_macroreg, Chronology=="R" & Plant.Type=="Pulses")
puls_ubiquity_macroreg.R <- filter(puls_ubiquity_macroreg.R, Macroregion!="Central Italy")
puls_ubiquity_macroreg.R <- filter(puls_ubiquity_macroreg.R, Plant!="Chickpea")
puls_ubiquity_macroreg.LR <- filter(bot_macroreg, Chronology=="LR" & Plant.Type=="Pulses")
puls_ubiquity_macroreg.LR <- filter(puls_ubiquity_macroreg.LR, 
                                    Macroregion!="Southern Italy")
puls_ubiquity_macroreg.LR <- filter(puls_ubiquity_macroreg.LR, Plant!="Chickpea")
puls_ubiquity_macroreg.EMA <- filter(bot_macroreg, Chronology=="EMA" & Plant.Type=="Pulses")
puls_ubiquity_macroreg.Ma <- filter(bot_macroreg, Chronology=="Ma"  & Plant.Type=="Pulses")
puls_ubiquity_macroreg.Ma <- filter(puls_ubiquity_macroreg.Ma, 
                                    Macroregion!="Southern Italy")

#Fruits (+ Subset)
fnuts_ubiquity_macroreg.R <- filter(bot_macroreg, Chronology=="R" & Plant.Type=="Fruits/Nuts")
fnuts_ubiquity_macroreg.R <- subset(fnuts_ubiquity_macroreg.R, (Plant == "Wild.Cherry" | Plant == "Walnut" | Plant == "Peach" | Plant == "Olive" |Plant == "Grape" | Plant =="Fig" | Plant =="Apple"))
fnuts_ubiquity_macroreg.R <- filter(fnuts_ubiquity_macroreg.R, Macroregion!="Central Italy")
fnuts_ubiquity_macroreg.LR <- filter(bot_macroreg, Chronology=="LR" & Plant.Type=="Fruits/Nuts")
fnuts_ubiquity_macroreg.LR <- subset(fnuts_ubiquity_macroreg.LR, (Plant == "Wild.Cherry" | Plant == "Walnut" | Plant == "Peach" | Plant == "Olive" |Plant == "Grape" | Plant =="Fig" | Plant =="Apple"))
fnuts_ubiquity_macroreg.EMA <- filter(bot_macroreg, Chronology=="EMA" & Plant.Type=="Fruits/Nuts")
fnuts_ubiquity_macroreg.EMA <- subset(fnuts_ubiquity_macroreg.EMA, (Plant == "Wild.Cherry" | Plant == "Walnut" | Plant == "Peach" | Plant == "Olive" |Plant == "Grape" | Plant =="Fig" | Plant =="Apple"))
fnuts_ubiquity_macroreg.Ma <- filter(bot_macroreg, Chronology=="Ma"  & Plant.Type=="Fruits/Nuts")
fnuts_ubiquity_macroreg.Ma <- subset(fnuts_ubiquity_macroreg.Ma, (Plant == "Wild.Cherry" | Plant == "Walnut" | Plant == "Peach" | Plant == "Olive" |Plant == "Grape" | Plant =="Fig" | Plant =="Apple"))
fnuts_ubiquity_macroreg.Ma <- filter(fnuts_ubiquity_macroreg.Ma, Macroregion!="Southern Italy")

```

```{r}
#| echo: false
#| output: false


# Cereals plots ubiquity
cer_ubiquity_macroreg_R.HM <- ggplot(cer_ubiquity_macroreg.R, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  factor(Plant, levels=rev(level_cereals_order)),
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Roman"
  ) +  scale_fill_gradient(low = "white", high = "black")


cer_ubiquity_macroreg_LR.HM <- ggplot(cer_ubiquity_macroreg.LR, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  factor(Plant, levels=rev(level_cereals_order)),
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Late Roman"
  ) +  scale_fill_gradient(low = "white", high = "black")

cer_ubiquity_macroreg_EMA.HM <- ggplot(cer_ubiquity_macroreg.EMA, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  factor(Plant, levels=rev(level_cereals_order)),
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Early Medieval"
  ) +  scale_fill_gradient(low = "white", high = "black")

cer_ubiquity_macroreg_Ma.HM <- ggplot(cer_ubiquity_macroreg.Ma, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  factor(Plant, levels=rev(level_cereals_order)),
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Medieval"
  ) +  scale_fill_gradient(low = "white", high = "black")


Cereals_Ubiquity_MacroReg_Patchwork <- (cer_ubiquity_macroreg_R.HM|cer_ubiquity_macroreg_LR.HM)/(cer_ubiquity_macroreg_EMA.HM|cer_ubiquity_macroreg_Ma.HM)
Cereals_Ubiquity_MacroReg_Patchwork + plot_annotation(
  title = 'Cereals',
  subtitle = 'Ubiquity (%), plotted by macroregion and chronology.',
  caption='Note: Data was too scarce for Roman Central Italy and Medieval Southern Italy.'
  )


# Pulses plots ubiquity
puls_ubiquity_macroreg_R.HM <- ggplot(puls_ubiquity_macroreg.R, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  Plant,
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="#cfcfcf", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Roman"
  ) +  scale_fill_gradient(low = "white", high = "black")


puls_ubiquity_macroreg_LR.HM <- ggplot(puls_ubiquity_macroreg.LR, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  Plant,
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="#ffffff", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Late Roman"
  ) +  scale_fill_gradient(low = "white", high = "black")

puls_ubiquity_macroreg_EMA.HM <- ggplot(puls_ubiquity_macroreg.EMA, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  Plant,
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Early Medieval"
  ) +  scale_fill_gradient(low = "white", high = "black")

puls_ubiquity_macroreg_Ma.HM <- ggplot(puls_ubiquity_macroreg.Ma, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  Plant,
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Medieval"
  ) +  scale_fill_gradient(low = "white", high = "black")


Pulses_Ubiquity_MacroReg_Patchwork <- (puls_ubiquity_macroreg_R.HM|puls_ubiquity_macroreg_LR.HM)/(puls_ubiquity_macroreg_EMA.HM|puls_ubiquity_macroreg_Ma.HM)
Pulses_Ubiquity_MacroReg_Patchwork + plot_annotation(
  title = 'Pulses',
  subtitle = 'Ubiquity (%), plotted by macroregion and chronology.',
  caption='Note: Data was too scarce for Roman Central Italy and Late Roman/Medieval Southern Italy.'
)

# Fruits nuts plots

fnuts_ubiquity_macroreg_R.HM <- ggplot(fnuts_ubiquity_macroreg.R, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  Plant,
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Roman"
  ) +  scale_fill_gradient(low = "white", high = "black")


fnuts_ubiquity_macroreg_LR.HM <- ggplot(fnuts_ubiquity_macroreg.LR, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  Plant,
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Late Roman"
  ) +  scale_fill_gradient(low = "white", high = "black")

fnuts_ubiquity_macroreg_EMA.HM <- ggplot(fnuts_ubiquity_macroreg.EMA, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  Plant,
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Early Medieval"
  ) +  scale_fill_gradient(low = "white", high = "black")

fnuts_ubiquity_macroreg_Ma.HM <- ggplot(fnuts_ubiquity_macroreg.Ma, aes(
  factor(Macroregion, levels=(level_macroreg_order)),
  Plant,
  fill=(Ubiquity)
)) + 
  geom_tile(colour="white") +
  geom_text(aes(label = Ubiquity), colour="white", size=3)+ 
  scale_alpha(range=c(0,1)) +
  scale_x_discrete("", expand = c(0, 0)) + 
  scale_y_discrete("", expand = c(0, 0)) + 
  theme_grey(base_size = 9) + 
  theme(legend.position = "none",
        axis.ticks = element_blank()
  ) +
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
  labs(
    title="Medieval"
  ) +  scale_fill_gradient(low = "white", high = "black")


FrNuts_Ubiquity_MacroReg_Patchwork <- (fnuts_ubiquity_macroreg_R.HM|fnuts_ubiquity_macroreg_LR.HM)/(fnuts_ubiquity_macroreg_EMA.HM|fnuts_ubiquity_macroreg_Ma.HM)
FrNuts_Ubiquity_MacroReg_Patchwork + plot_annotation(
  title = 'Fruits/Nuts',
  subtitle = 'Ubiquity (%), plotted by macroregion and chronology.',
  caption='Note: Data was too scarce for Roman Central Italy and Medieval Southern Italy.'
)


```
:::

#### Cereals

It is noteworthy that during the Roman age, cereals were widely found both in Southern and Northern Italy, with some exceptions (namely einkorn, rye, oats, and proso millet) possibly due to the randomness of the sampling. It is unfortunate that only three sites in Roman Central Italy provided botanical samples, and their values have subsequently been omitted from the graph. The Roman Peasant Project [@bowesRomanPeasantProject2020] has investigated these sites in Tuscany and has found three types of cereal: free-threshing wheats, emmer wheat and barley. Comparable ubiquity figures in both northern and Southern Italy during the Roman age may imply similar production patterns throughout the Italian mainland, but more data is necessary. In the late Roman period, data on crop prevalence has been analysed for three macroregions, with southern Italy displaying the lowest reliability due to data being available for only five sites. The central Italian sites show that three crops - free-threshing wheats, barley, and emmer - are found on 62.5% of those areas. While other cereals are present, they are not as ubiquitous. The aforementioned cereal triad also shows diffusion in Southern Italy. Conversely, in the north of Italy, although free-threshing wheats and barley were important crops, they had to compete with other cereals such as millet, sorghum and rye. The latter crop witnessed a significant increase and was present in nearly 30% of the Northern sites (as opposed to the Roman 16%). The Early Medieval period appears to have marked a shift in Italian agricultural practices, leading to greater regional variability in cereal production. In Southern Italy, free-threshing wheats, barley, and emmer formed the main cereals during Medieval times. These cereals are also prevalent in Central and Northern Italy, although these regions practise polyculture with a diverse range of cereals. The small number of samples from this age is due to the project's chronological limit, which ends at the 11^th^ century. Despite the brevity of the chronology, we can still make certain observations. Central Italy during the Medieval period heavily relied on free-threshing wheats, barley, and emmer, whereas other cereals played a more minor role. Barley is the most prevalent cereal in Northern Italy during this period, succeeded by free-threshing wheats, millets, and sorghum.

```{r}
#| echo: false
#| label: fig-heatmap-ubiquity-cereals-macroreg
#| fig-cap: "Diachronical heatmap of cereals in the Italian macroregions"
#| fig-dpi: 300 

Cereals_Ubiquity_MacroReg_Patchwork

```

#### Legumes

Pulses played an important role in the diet and were grown in both northern and southern Italy during the Roman Empire. In the latter, vetch and broad beans are present in 31% and 22% of the samples, respectively, while lentils are present in 40% of the sites. During the Late Roman Age, broad beans were equally significant in Central and Northern Italy, with peas present in 50% of the Central Italian sites. In the Early Medieval Age, pulses were present in many Central Italian sites, notably blue and red peas, broad beans, and other Fabaceae. Lentils and broad beans are also cultivated in nearly half of the Northern Italian sites. The significance of pulses in Central Italy is corroborated by the 11^th^ century samples, as each species is prevalent in over 50% of the sites and Fabaceae can be detected in every sample. Broad beans were also found in 66% of the Northern Italian sites.

```{r}
#| echo: false
#| label: fig-heatmap-ubiquity-pulses-macroreg
#| fig-cap: "Diachronical heatmap of pulses in the Italian macroregions" 

Pulses_Ubiquity_MacroReg_Patchwork

```

#### Fruits and nuts

Olive and grape are two major crops grown on the Italian peninsula. It is expected that olive pits are more prevalent in Southern Italy, where they existed in over 88% of sites during the Roman era and more than 58% of sites in later chronologies[^archaeobotany-2]. Grape plays a significant role in the Italian peninsula, exhibiting notably high ubiquity values in Roman Southern Italy and in Late Roman Central Italy. The results for other cultivated fruits are varied, possibly because these species are present in smaller quantities in the excavations, especially when these are aimed at specific storage structures. It may therefore be more advantageous to investigate trends in fruits and nuts as a combined column, as we will do in the Bayesian models.

[^archaeobotany-2]: The Late Roman values for Southern Italy rely solely on 5 samples, of which 3 are from the same site, Salapia [@fiorentinoDallaLagunaAll2022]. Thus, the values are not very reliable.

```{r}
#| echo: false
#| label: fig-heatmap-ubiquity-fruit-macroreg
#| fig-cap: "Diachronical heatmap of fruits/nuts in the Italian macroregions" 

FrNuts_Ubiquity_MacroReg_Patchwork

```

## Site richness and diversity by chronology {#sec-archaeobot-results-richness-diversity style="text-align:justify;"}

Species richness is a measure used in ecology consisting simply in the counts of species found at a certain location. In archaeology, it can be informative for assessing how many different plants were found at a site. For the calculation, only sites that provided cereals, legumes, fruits and nuts have been used. Although this choice entails the loss of many observations, it was necessary in order to produce more credible and comparable results. The graphs below show extended credible intervals for groups with fewer observations.

The objective of the model was to determine the average plant diversity in each chronological sequence. A Poisson distribution was selected for the model as it is utilized when counts do not have a set upper limit (in contrast to a binomial distribution). The outcome variable is the richness ($R_{i}$) for each site ${i}$, calculated as follows

$$ R_{i} = \sum_{n=1}^{k} Species_{ni}$$ where $k$ represents the total number of species in a given site. The aim is to model the average richness $\lambda_{i}$. The regression involves computing four intercepts, one for each chronology $ChrID$, in addition to a varying slope for each observation ($\beta_{[Observations]}$). This will later help in quantifying the average deviation of the observations from the mean in each chronology ($\alpha_{[ChrID]}$). The Poisson regression formula is as follows, with weakly informative priors selected for the intercept and slope to ensure that the range of possible $\lambda_{i}$ values stays within the outcome space:

$$R_{i} \sim Poisson({\lambda}_{i})$$

$$log {\lambda}_{i} = \alpha_{[ChrID]} + \beta_{[Observations]}$$ $$\alpha_{[ChrID]} \sim Normal(3,0.5)$$ $$\beta_{[Observations]} \sim Normal(0,0.2)$$ The results illustrate that, within the 0.50 credible interval, the predicted species richness during the Roman and Late Roman period is approximately 9-10 species, which increase up to 12 species during the early medieval period, and between 14.5-16.5 post the 11^th^ century; however, the credible interval is wider because of the scarce sample size. Despite their larger credible interval, even the most extreme values within the 0.99 credible interval have a minimum of 12 species, suggesting greater species richness during this period. When considering the varying effect, which illustrates the predicted deviations of each site from the mean (stratified by chronology), the samples from the 11^th^ century onwards exhibit greater variability. Conversely, the samples from the Roman and Late Roman periods appear to form a more cohesive set of sites in relation to the number of species present. The median deviation of each site from the mean is consistently below one species in all chronologies.

```{r}
#| echo: false
#| label: fig-prior-pred-sim-plant-richness
#| fig-cap: "Prior predictive simulation for the Poisson model demonstrates the unlikelihood of obtaining more extreme values after crossing a certain threshold."

plot(
  density(
rpois(1000, exp(rnorm(1e4, 3, 0.5)+rnorm(1e4,0,0.2)))
    ), 
main="Prior Predictive Simulation", 
sub="Exponential(Normal(3,05)+Normal(0,0.2))",
col=rangi2, xlim=c(0,100))

```

```{r}
#| echo: false

##################
# SITE DIVERSITY #
##################

Plants_Diversity <- Archaeobot_Condensed[,-c(2:4,9:13)]

# Subset only complete cases (rows with cereals, fruits, legumes)
# This takes down the counts from 234 to 138, but at least it is more valid
Plants_Diversity <- Plants_Diversity[(Plants_Diversity$Tot..Cereals > 0) & (Plants_Diversity$Tot..Pulses > 0) & (Plants_Diversity$Tot..Fruits.Nuts > 0),]

Plants_Diversity[is.na(Plants_Diversity)] <- 0

# Create two diversity indexes 
Plants_Diversity$Diversity_Simpson = diversity(Plants_Diversity[,c(6:ncol(Plants_Diversity))], 
                                               equalize.groups = T,
                                               MARGIN = 1,
                                               index="simpson"
                                               )
# Calculate the Equitability index so that is normalised to 0-1 as the Simpson
Plants_Diversity$Diversity_Shannon_Eq = diversity(Plants_Diversity[,c(6:ncol(Plants_Diversity))], 
                                               equalize.groups = T,
                                               MARGIN = 1,
                                               index="shannon"
                                               )/log(
                                                 specnumber(Plants_Diversity[,c(6:ncol(Plants_Diversity))])
                                               )
```

```{r}
#| echo: false
#| eval: true
#| message: false
#| output: false

# Create a list for ULAM

# Create a list for STAN
dat.Plants_Diversity = list(
  Diversity_Shannon_Eq = Plants_Diversity$Diversity_Shannon_Eq,
  Diversity_Simpson = Plants_Diversity$Diversity_Simpson,
  Chronology = factor(Plants_Diversity$Chronology),
  Observations = (1:nrow(Plants_Diversity))
)

# Creating a dataframe to count the richness
Plants_Diversity_for_Richness <- Plants_Diversity
Plants_Diversity_for_Richness <- Plants_Diversity_for_Richness[, -c(15,16,25,24,48:50)]
Plants_Diversity_for_Richness[,6:43] <- decostand(Plants_Diversity_for_Richness[,6:43], method="pa")
Plants_Diversity_for_Richness$Richness = rowSums(Plants_Diversity_for_Richness[, c(6:43)])

  
dat.Plants_Richness = list(
  Richness = Plants_Diversity_for_Richness$Richness,
  Chronology = factor(Plants_Diversity_for_Richness$Chronology),
  Observations = (1:nrow(Plants_Diversity_for_Richness))
)


```

```{r}
#| message: false
#| output: false
#| echo: false
#| eval: false


########################################
# Running the models
# Saving the models
# Setting code chunk to eval: false
# To save up on rendering time
########################################

set.seed(24)

Plants_Richness_by_Chronology_fit <- 
  ulam(
    alist(
        Richness ~ dpois( p ),
        log(p) <- a[Chronology] + b[Observations],
        a[Chronology] ~ dnorm(3,0.5),
        b[Observations] ~ dnorm(0,0.2)
    ), data=dat.Plants_Richness , chains=4 , log_lik=TRUE )


Plants_Diversity_Shannon_by_Chronology_fit <- 
  ulam(
   alist(
        Diversity_Shannon_Eq ~ dbeta2( mu , theta ),
        logit(mu) <- a[Chronology],
        a[Chronology] ~ dnorm( 0 , 1.5),
        transpars> theta <<- phi + 2.0,
        phi ~ dexp(0.1)
    ), data=dat.Plants_Diversity, iter=4000, chains=4
    )

Plants_Diversity_Simpson_by_Chronology_fit <- 
  ulam(
   alist(
        Diversity_Simpson ~ dbeta2( mu , theta ),
        logit(mu) <- a[Chronology],
        a[Chronology] ~ dnorm( 0 , 1.5),
        transpars> theta <<- phi + 2.0,
        phi ~ dexp(0.1)
     ), data=dat.Plants_Diversity , chains=4, iter = 4000
    )

saveRDS(Plants_Richness_by_Chronology_fit, "stan_models/by_Chronology/Plants_Richness_by_Chronology_fit.rds")
saveRDS(Plants_Diversity_Shannon_by_Chronology_fit, "stan_models/by_Chronology/Plants_Diversity_Shannon_by_Chronology_fit.rds")
saveRDS(Plants_Diversity_Simpson_by_Chronology_fit, "stan_models/by_Chronology/Plants_Diversity_Simpson_by_Chronology_fit.rds")

```

```{r}
#| echo: false

# Read RDS
Plants_Richness_by_Chronology_fit <- readRDS("stan_models/by_Chronology/Plants_Richness_by_Chronology_fit.rds")
Plants_Diversity_Shannon_by_Chronology_fit <- readRDS("stan_models/by_Chronology/Plants_Diversity_Shannon_by_Chronology_fit.rds")
Plants_Diversity_Simpson_by_Chronology_fit <- readRDS("stan_models/by_Chronology/Plants_Diversity_Simpson_by_Chronology_fit.rds")

# Plots
chrono_levels <- c("R", "LR", "EMA", "Ma")

Plants_Richness_by_Chronology_fit_a <- Plants_Richness_by_Chronology_fit %>%
  spread_draws(a[Chronology]) %>% 
    mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  ))

Plants_Richness_by_Chronology_fit_b <- Plants_Richness_by_Chronology_fit %>%
  spread_draws(b[Observations])

Plants_Richness_by_Chronology_fit_b_Means <- aggregate(Plants_Richness_by_Chronology_fit_b$b, 
                   by = list(Plants_Richness_by_Chronology_fit_b$Observations), 
                   FUN = mean)

Plants_Richness_by_Chronology_fit_b_Means$x <- exp(Plants_Richness_by_Chronology_fit_b_Means$x)

Plants_Richness_by_Chronology_fit_b_Means$Chronology <- Plants_Diversity_for_Richness$Chronology

colnames(Plants_Richness_by_Chronology_fit_b_Means) <- c("Observation", "b", "Chronology")

Plants_Diversity_Shannon_by_Chronology_fit_a <- Plants_Diversity_Shannon_by_Chronology_fit %>%
  spread_draws(a[Chronology]) %>% 
    mutate(Index="Shannon_Eq") %>% 
    mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  ))

Plants_Diversity_Simpson_by_Chronology_fit_a <- Plants_Diversity_Simpson_by_Chronology_fit %>%
  spread_draws(a[Chronology]) %>% 
    mutate(Index="Simpson") %>% 
    mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  ))

Plants_Diversity_Indices_by_Chronology_Means <- data.frame(
  Index=c("Shannon_Eq", "Simpson"),
  means=c(
   mean(Plants_Diversity_Shannon_by_Chronology_fit_a$a),
   mean(Plants_Diversity_Simpson_by_Chronology_fit_a$a)
    )
)

Plants_Diversity_Indices_by_Chronology_fit_a <- bind_rows(Plants_Diversity_Shannon_by_Chronology_fit_a,Plants_Diversity_Simpson_by_Chronology_fit_a)

```

```{r}
#| echo: false
#| label: fig-plant-richness-bayesian
#| fig-cap: "The graph shows the predicted richness of plants in the four examined chronologies."

Plants_Richness_by_Chronology_fit_a %>%
  ggplot(aes(
    y = factor(Chronology, levels = chrono_levels),
    x = exp(a)
  )) +
  stat_interval(.width = c(.50, .80, .95, .99),
                linewidth = 3) +
  stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
    geom_vline(
    aes(xintercept = exp(mean( Plants_Richness_by_Chronology_fit_a$a))),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10),
                     sec.axis = dup_axis()) +
  scale_y_discrete(limits = rev) +
  scale_color_brewer(palette = "Greys", name = "Credible interval") +
  labs(
    x = "Predicted number of taxa",
    y = "Chronology",
    title = "Plant Richness"
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  )
```

```{r}
#| echo: false
#| label: fig-plant-richness-varying-effect
#| fig-cap: "The graph illustrates the predicted deviations from the mean, stratified by chronology, and reveals that Roman and Late Roman samples exhibit a reduced variability regarding plant richness."


Plants_Richness_by_Chronology_fit_b_Means %>%
  ggplot(aes(
    y = factor(Chronology, levels = chrono_levels),
    x = b
  )) +
  geom_boxplot(width = 0.2, alpha = 0.6) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10),
                     sec.axis = dup_axis()) +
  scale_y_discrete(limits = rev) +
  scale_color_brewer(palette = "Greys", name = "Credible interval") +
  labs(
    x = "B (Varying effect)",
    y = "Chronology",
    title = "Plant Richness - Varying effect"
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  )

```

In contrast to taxon richness, taxon diversity considers the abundance of each taxon. It should be noted that in this dataset, this measurement can be skewed by samples where one taxon dominates to an extreme degree. For example, a sample collected from a processing or storage area is likely to exhibit one taxon that dominates the others. Although this was the reason for choosing to work with presence or absence data in this research, diversity indices are nonetheless provided for the sake of completeness. Specifically, we have computed two indices - Shannon equitability ($E_{H}$) and Simpson ($D$) - that range from 0 (complete inequality) to 1 (maximum diversity). These calculations can be performed using the `vegan` ecology R package functions. Only complete observations, consisting of cereals, pulses, and fruits/nuts, were considered for the calculation of richness indices. After computing both indices for each sample, these values were modelled using a beta distribution because it is bounded between 0 and 1. The resulting equation is as follows: $$ D_{i} \sim Beta(\mu_{i}, \phi_{i})$$ $$logit(\mu_{i}) = a_{[ChrID]}$$ $$a_{[ChrID]} \sim Normal(0,1.5)$$ $$\phi_{i} \sim Exp(0.1)+2$$

```{r}
#| echo: false
#| label: fig-prior-pred-sim-plant-diversity
#| fig-cap: "Prior predictive simulation for the Beta model demonstrates that, without any data, any value between 0 and 1 is possible."

plot(
  density(
  rbeta2(1000, 
         inv_logit(rnorm(1e4,0,1.5)), 
         rexp(1000, 0.1)+2
         )
  ),
  main="Prior Predictive Simulation", 
col=rangi2, xlim=c(0,1)
)

```

Both indices have a range of values from 0 to 1, but they differ in their calculation methods [@nagendra2002]. Therefore, direct comparisons between the values of $E_{H}$ and $D$ should not be made, even when displayed in the same figure. Rather, the relative trends within each index should be considered. Although the credible intervals differ (larger for the Simpson index due to increased variability between samples), the trends in diversity across chronological groups remain similar. During the Roman period, there was a lower diversity phase, followed by a slight increase in diversity in the Late Roman period and a subsequent decrease in the early medieval period. However, diversity then increased once more in the post-11^th^ century samples. Nonetheless, the credible interval for this group is considerable and thus the results must be interpreted with caution.

```{r}
#| echo: false
#| label: fig-plant-diversity-bayesian
#| fig-cap: "The graph shows the predicted diversity of plants in the four examined chronologies."

Plants_Diversity_Indices_by_Chronology_fit_a %>%
  ggplot(aes(
    y = factor(Chronology, levels = chrono_levels),
    x = inv_logit(a)
  )) +
  stat_interval(.width = c(.50, .80, .95, .99),
                linewidth = 3) +
  stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
    geom_vline(
    data = Plants_Diversity_Indices_by_Chronology_Means,
    aes(xintercept = inv_logit(means)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10),
                     sec.axis = dup_axis()) +
  scale_y_discrete(limits = rev) +
  scale_color_brewer(palette = "Greys", name = "Credible interval") +
  labs(
    x = "Predicted probability",
    y = "Chronology",
    title = "Plant Diversity"
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) + facet_wrap(Index~.,
  ncol = 1,
  strip.position = "right")

```

## Context type {#sec-archaeobot-results-context-type style="text-align:justify"}

After examining the principal chronological trends for plants' distribution during the first millennium, we may add another factor to our inquiry, namely site type. We can expect dissimilar plants in a funerary context than in an urban site. Stratification of the dataset by site type is possible, but there is a challenge: the four chronologies we are studying also affect the availability, frequency and economic dynamics of site types. For example, the agricultural strategies employed by rural villas during the Roman and Late Roman periods could differ based on political and economic events, which could affect the presence of certain taxa. We begin by drawing a directed acyclic graph (DAG), which illustrates how the `Chronology` node functions as the parent node of `Site_Type`, and it affects the `Plant_Present` value directly and indirectly through `Site_Type`. To account for this backdoor path, we block by `Chronology` and stratify the dataset by `Site_Type`. Since we have two categorical predictors of interest, an interaction index variable can be utilised to create separate intercepts for each chronology and context type. For instance, the `Roman:Rural` context type could be assigned an index of 1, while `Roman:Urban` could be assigned an index of 2, and so on. This interaction dummy index (${[TCid]}$) will determine the variation in intercepts ($\alpha$) across different context types. This is described in @sec-building-bayesian-models.

```{r}
#| echo: false
#| message: false
#| warning: false
library(dagitty)
library(ggdag)
```

```{r}
#| echo: false
#| label: fig-site-type-dag-plants
#| fig-cap: "This is a Directed Acyclic Graph (DAG) that represents the relationship between Chronology, Site_Type, and plant presence in the study. Chronology is shown as a collider variable, and its influence on plant presence is mediated through Site_Type. To block the backdoor path between Chronology and plant presence, the dataset is stratified by Chronology."

DAG_site_type <- dagitty('dag {
Plant_Present [outcome]
Chronology [collider,dagitty.stratum="1"]
Site_Type [exposure,dagitty.stratum="2"]
Chronology -> Plant_Present
Chronology -> Site_Type
Site_Type -> Plant_Present
}')

DAG_site_type <- tidy_dagitty(DAG_site_type)

ggdag_paths(DAG_site_type, 
      text = FALSE, 
      use_labels = "name", 
      shadow = TRUE) +
  theme_dag(base_size = 14)+
  theme(legend.position = "none", strip.text = element_blank())+
  scale_color_manual(values = "#0072B2", na.value = "grey80") + 
  scale_fill_manual(values = "#0072B2", na.value = "grey80")+
   ggraph::scale_edge_color_manual(values = "#0072B2", na.value = "grey80")


```

To assess the probability of the presence of a single or multiple taxa in each chronology and context, we opted to utilise a Binomial distribution. The $F$ (an abbreviation for the term 'found') outlined on the left-hand side of the formula denotes the outcome variable - an indicator of presence/absence for the observation $i$. If there is only one taxon, this value can either be 0 (absent) or 1 (present), with $T$ equalling 1. This effectively makes the Binomial distribution equivalent to a Bernoulli distribution. If the model includes more than one taxon, $T$ represents the total number of taxa being modelled. For example, in the case of free-threshing wheats and barley, the model aims to evaluate the likelihood of these grains being present at a specific site type within a certain chronology. In this instance, the value of $T$ for 'noble' grains is 2. The outcome variable $F$ denotes the quantity of different 'noble' grains discovered on a specific site $i$, with values ranging from 0 (no grains located) to 2 (the site contains both barley and free-threshing wheats). While it deviates from typical binomial distribution usage, this modification was essential because this study is handling presence/absence statistics. The presented model is an intercept-only one, where the intercept $\alpha$ holds an interaction index ${[TCid]}$. The model produces estimates for each context type and chronology under investigation.

$$
F_{i} \sim Binomial(T, \bar{p}_{i} )
$$

$$
logit(\bar{p}_{i}) = \alpha_{[TCid]}
$$

$$
\alpha_{[TCid]} \sim Normal(0,1.5)
$$ The rationale behind choosing a normally distributed prior for the intercept $a$ is that it is weakly informative. Below, a simulation of the intercept prior.

```{r}
#| echo: false
#| label: fig-prior-pred-context-type
#| fig-cap: "Prior predictive simulation for the binomial models used in this section. If for instance we want to know how many minor grains (out of seven types) each site was adopting, this prior is weakly informative because it shows no trends."

simplehist(rbinom(1000, size=7, inv_logit(rnorm(1e4, 0, 1.5))),
           xlab="Taxa", 
           main="Prior Predictive Simulation", 
           sub="rbinom(size=2, inv_logit(rnorm(1e4, 0, 1.5))",
           col=rangi2)


```

```{r}
#| echo: false
#| eval: false
                                                                
# Store a copy of the original dataframe
Plants_Df_for_Ubiquity <- Df_Cond_Plants 

# Simplify categories
#table(Plants_Df_for_Ubiquity$Type)
Plants_Df_for_Ubiquity$Type <- str_replace(Plants_Df_for_Ubiquity$Type, "Religious, monastery", "Religious")    
Plants_Df_for_Ubiquity$Type <- str_replace(Plants_Df_for_Ubiquity$Type, "Castle", "Fortified")    
Plants_Df_for_Ubiquity$Type <- str_replace(Plants_Df_for_Ubiquity$Type, "Castrum", "Fortified")  

# Remove unsp.. columns
Plants_Df_for_Ubiquity <- Plants_Df_for_Ubiquity %>% select(-"Unsp..cereals", -"Unsp..Pulses")

# Define types and chrono
Roman_Site_types <- c("Necropolis", "Religious", "Rural", "Rural site, villa", "Urban")
LateRoman_Site_types <- c("Fortified", "Necropolis", "Rural", "Rural site, villa", "Urban")
EMA_Site_types <- c("Fortified", "Necropolis", "Religious", "Rural", "Rural site, villa", "Urban")
Ma_Site_types <- c("Fortified", "Religious", "Rural", "Urban")

# Define a list of column groups
plants_groups <- list(
  Noble.Grains = c("Common.Wheat", "Barley"),
  Minor.Grains = c("Emmer", "Einkorn", "Oats", "Rye", "Proso.millet", "Foxtail.millet", "Sorghum"),
  Legumes= c("Lentil","Pea","Faba.bean","Vetch","Unsp..Vicia","Blue.Red.Pea","Chickpea"),
  Nuts = c("Walnut", "Hazelnut", "Chestnut"),
  Pome.fruits = c("Apple", "Pear"),
  Stone.fruits = c("Peach", "Plum", "Sour.Cherry", "Unsp..Prunus"),
  Berries = c("Blackberry", "Elderberry", "Blackthorn", "Wild.Cherry", "Corn..Cherry", "Sorbus.sp.", "Strawberry"),
  Other.fruits = c("Date", "Melon", "Fig")
)

# Chronology: Roman (R)
Ubiquity_typology_chronology.Roman <- Roman_Site_types %>% 
  map_df(~create_ubiquity_df(Plants_Df_for_Ubiquity, .x, "R"))

# Iterate over the column groups
for (name in names(plants_groups)) {
  
  # Calculate the mean of the columns in the group
  Ubiquity_typology_chronology.Roman <- Ubiquity_typology_chronology.Roman %>%
    mutate(!!name := rowMeans(select(., !!plants_groups[[name]]))) %>% 
                      select(-!!plants_groups[[name]])
}

Ubiquity_typology_chronology.Roman$Chronology <- "R"
Ubiquity_typology_chronology.Roman$Type <- rownames(Ubiquity_typology_chronology.Roman)
rownames(Ubiquity_typology_chronology.Roman) <- NULL

# Chronology: Late Roman (LR)
Ubiquity_typology_chronology.LateRoman <- LateRoman_Site_types %>% 
  map_df(~create_ubiquity_df(Plants_Df_for_Ubiquity, .x, "LR"))

# Iterate over the column groups
for (name in names(plants_groups)) {
  
  # Calculate the mean of the columns in the group
  Ubiquity_typology_chronology.LateRoman <- Ubiquity_typology_chronology.LateRoman %>%
    mutate(!!name := rowMeans(select(., !!plants_groups[[name]]))) %>% 
                      select(-!!plants_groups[[name]])
}

Ubiquity_typology_chronology.LateRoman$Chronology <- "LR"
Ubiquity_typology_chronology.LateRoman$Type <- rownames(Ubiquity_typology_chronology.LateRoman)
rownames(Ubiquity_typology_chronology.LateRoman) <- NULL

# Chronology: Early Medieval (EMA)
Ubiquity_typology_chronology.EMA <- EMA_Site_types %>% 
  map_df(~create_ubiquity_df(Plants_Df_for_Ubiquity, .x, "EMA"))

# Iterate over the column groups
for (name in names(plants_groups)) {
  
  # Calculate the mean of the columns in the group
  Ubiquity_typology_chronology.EMA <- Ubiquity_typology_chronology.EMA %>%
    mutate(!!name := rowMeans(select(., !!plants_groups[[name]]))) %>% 
                      select(-!!plants_groups[[name]])
}

Ubiquity_typology_chronology.EMA$Chronology <- "EMA"
Ubiquity_typology_chronology.EMA$Type <- rownames(Ubiquity_typology_chronology.EMA)
rownames(Ubiquity_typology_chronology.EMA) <- NULL

# Chronology: Medieval (Ma)
Ubiquity_typology_chronology.Ma <- Ma_Site_types %>% 
  map_df(~create_ubiquity_df(Plants_Df_for_Ubiquity, .x, "Ma"))

# Iterate over the column groups
for (name in names(plants_groups)) {
  
  # Calculate the mean of the columns in the group
  Ubiquity_typology_chronology.Ma <- Ubiquity_typology_chronology.Ma %>%
    mutate(!!name := rowMeans(select(., !!plants_groups[[name]]))) %>% 
                      select(-!!plants_groups[[name]])
}

Ubiquity_typology_chronology.Ma$Chronology <- "Ma"
Ubiquity_typology_chronology.Ma$Type <- rownames(Ubiquity_typology_chronology.Ma)
rownames(Ubiquity_typology_chronology.Ma) <- NULL


Ubiquity_All_Chrono_Type <- rbind(
  Ubiquity_typology_chronology.Roman,
  Ubiquity_typology_chronology.LateRoman,
  Ubiquity_typology_chronology.EMA,
  Ubiquity_typology_chronology.Ma
)

# Reorder columns
Ubiquity_All_Chrono_Type <- Ubiquity_All_Chrono_Type %>%
  select("Chronology", "Type", "Noble.Grains","Minor.Grains","Legumes","Nuts","Pome.fruits","Stone.fruits","Berries","Other.fruits","Flax","Grape","Olive")

# PLOTS
level_order <- c("R", "LR", "EMA", "Ma") 
library(ggpubr)

noblegrains_by_type <- ggplot(data=Ubiquity_All_Chrono_Type, 
       aes(
         fill=factor(Chronology, levels=level_order),
         x=Type,
         y=Noble.Grains, 
         ), 
       ) +
        geom_bar(position="dodge", stat="identity") + 
        theme_pubclean() + 
        theme(legend.position="top") +
        scale_fill_grey() +
        labs(
          title = "Free-threshing wheats and barley",
          x= "",
          y = "%",
        fill="Chronology"
    )

minorgrains_by_type <- ggplot(data=Ubiquity_All_Chrono_Type, 
       aes(
         fill=factor(Chronology, levels=level_order),
         x=Type,
         y=Minor.Grains, 
         ), 
       ) +
        geom_bar(position="dodge", stat="identity") + 
        theme_pubclean() + 
        theme(legend.position="none") +
        scale_fill_grey() +
        labs(
          title = "Minor Grains",
          x= "",
          y = "%",
        fill="Chronology"
    )

legumes_by_type <- ggplot(data=Ubiquity_All_Chrono_Type, 
       aes(
         fill=factor(Chronology, levels=level_order),
         x=Type,
         y=Legumes, 
         ), 
       ) +
        geom_bar(position="dodge", stat="identity") + 
        theme_pubclean() + 
        theme(legend.position="none") +
        scale_fill_grey() +
        labs(
          title = "Legumes",
          x= "",
          y = "%",
        fill="Chronology"
    )

grape_by_type <- ggplot(data=Ubiquity_All_Chrono_Type, 
       aes(
         fill=factor(Chronology, levels=level_order),
         x=Type,
         y=Grape, 
         ), 
       ) +
        geom_bar(position="dodge", stat="identity") + 
        theme_pubclean() + 
        theme(legend.position="none") +
        scale_fill_grey() +
        labs(
          title = "Grape",
          x= "",
          y = "%",
        fill="Chronology"
    )

olive_by_type <- ggplot(data=Ubiquity_All_Chrono_Type, 
       aes(
         fill=factor(Chronology, levels=level_order),
         x=Type,
         y=Olive, 
         ), 
       ) +
        geom_bar(position="dodge", stat="identity") + 
        theme_pubclean() + 
        theme(legend.position="none") +
        scale_fill_grey() +
        labs(
          title = "Olives",
          x= "",
          y = "%",
        fill="Chronology"
    )

nuts_by_type <- ggplot(data=Ubiquity_All_Chrono_Type, 
       aes(
         fill=factor(Chronology, levels=level_order),
         x=Type,
         y=Nuts, 
         ), 
       ) +
        geom_bar(position="dodge", stat="identity") + 
        theme_pubclean() + 
        theme(legend.position="none") +
        scale_fill_grey() +
        labs(
          title = "Nuts",
          x= "",
          y = "%",
        fill="Chronology"
    )

pomefruits_by_type <- ggplot(data=Ubiquity_All_Chrono_Type, 
       aes(
         fill=factor(Chronology, levels=level_order),
         x=Type,
         y=Pome.fruits, 
         ), 
       ) +
        geom_bar(position="dodge", stat="identity") + 
        theme_pubclean() + 
        theme(legend.position="bottom") +
        scale_fill_grey() +
        labs(
          title = "Pome Fruits",
          x= "",
          y = "%",
        fill="Chronology"
    )

stonefruits_by_type <- ggplot(data=Ubiquity_All_Chrono_Type, 
       aes(
         fill=factor(Chronology, levels=level_order),
         x=Type,
         y=Stone.fruits, 
         ), 
       ) +
        geom_bar(position="dodge", stat="identity") + 
        theme_pubclean() + 
        theme(legend.position="none") +
        scale_fill_grey() +
        labs(
          title = "Stone Fruits",
          x= "",
          y = "%",
        fill="Chronology"
    )

```

```{r}
#| echo: false
#| warning: false
#| message: false

# Note: The code has to be cleaned because this is a new update and it is not related to the plots used just above this code. 
# For the moment, I will start from scratch
library(dplyr)

Df_Cond_Plants.pa <- Df_Cond_Plants
Df_Cond_Plants.pa[,c(11:50)] <- decostand(Df_Cond_Plants.pa[,c(11:50)], method="pa", na.rm = T)

Df_Cond_Plants.pa[is.na(Df_Cond_Plants.pa)] <- 0

#Simplify categories
Df_Cond_Plants.pa$Type <- str_replace(Df_Cond_Plants.pa$Type, "Religious, monastery", "Religious")    
Df_Cond_Plants.pa$Type <- str_replace(Df_Cond_Plants.pa$Type, "Castle", "Fortified")    
Df_Cond_Plants.pa$Type <- str_replace(Df_Cond_Plants.pa$Type, "Castrum", "Fortified")  

```

```{r}
#| echo: false
#| eval: true
#| code-fold: true

Minor_Grains <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  From.Century=From.Century, 
  To.Century=To.Century,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Grain_Count = Einkorn+Oats+Rye+Proso.millet+Foxtail.millet+Sorghum+Emmer,
  All_Grain_Count = rowSums(Df_Cond_Plants.pa[,c(11:19)])
  )
)

# Transform categories to factors
Minor_Grains[,c(1,4,5,6)] <- lapply(Minor_Grains[,c(1,4,5,6)], factor)

Noble_Grains_Reg <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  From.Century=From.Century, 
  To.Century=To.Century,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Grain_Count = Common.Wheat+Barley,
  All_Grain_Count = rowSums(Df_Cond_Plants.pa[,c(11:19)])
  )
)

# Transform categories to factors
Noble_Grains_Reg[,c(1,4,5,6)] <- lapply(Noble_Grains_Reg[,c(1,4,5,6)], factor)


```

```{r}
#| echo: false
#| eval: true
#| message: false
#| output: false

library(rethinking)
library(tidybayes.rethinking)
library(tidybayes)

####################
## NOBLE GRAINS
####################

Noble_Grains <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Grain_Count = rowSums(Df_Cond_Plants.pa[,c(11,15)])
  )
)

#Simplify categories
Noble_Grains$Site_Type <- str_replace(Noble_Grains$Site_Type, "Religious, monastery", "Religious")    
Noble_Grains$Site_Type <- str_replace(Noble_Grains$Site_Type, "Castle", "Fortified")    
Noble_Grains$Site_Type <- str_replace(Noble_Grains$Site_Type, "Castrum", "Fortified")  

# Convert to list
Noble_Grain.list <- list(
    NG_Found = Noble_Grains$Grain_Count,
    NG_Tot = 2,
    TC_ID = as.factor((interaction(Noble_Grains$Chronology, 
                                   Noble_Grains$Site_Type)))
   )

Noble_Grain.list$TC_ID <- droplevels(Noble_Grain.list$TC_ID)


####################
## MINOR GRAINS
####################

# Convert to list
Minor_Grains_Type.list <- list(
    MG_Found = Minor_Grains$Grain_Count,
    MG_Tot = 7,
    TC_ID = as.factor((interaction(Minor_Grains$Chronology, 
                                   Minor_Grains$Site_Type)))
   )

Minor_Grains_Type.list$TC_ID <- droplevels(Minor_Grains_Type.list$TC_ID)
  

####################
## LEGUMES 
####################

Legumes <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Seed_Count = rowSums(Df_Cond_Plants.pa[,c(21:27)]) # Excludes Unsp. Pulses
  )
)

#Simplify categories
Legumes$Site_Type <- str_replace(Legumes$Site_Type, "Religious, monastery", "Religious")    
Legumes$Site_Type <- str_replace(Legumes$Site_Type, "Castle", "Fortified")    
Legumes$Site_Type <- str_replace(Legumes$Site_Type, "Castrum", "Fortified")  

# Convert to list
Legumes.list <- list(
    Leg_Found = Legumes$Seed_Count,
    Leg_Tot = 7,
    TC_ID = as.factor((interaction(Legumes$Chronology, 
                                   Legumes$Site_Type)))
   )

Legumes.list$TC_ID <- droplevels(Legumes.list$TC_ID)


####################
## GRAPE 
####################

Grape <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Present = ifelse(Grape>0, 1, 0)
  )
)

#Simplify categories
Grape$Site_Type <- str_replace(Grape$Site_Type, "Religious, monastery", "Religious")    
Grape$Site_Type <- str_replace(Grape$Site_Type, "Castle", "Fortified")    
Grape$Site_Type <- str_replace(Grape$Site_Type, "Castrum", "Fortified")  

# Convert to list
Grape.list <- list(
    Grape_Found = Grape$Present,
    TC_ID = as.factor((interaction(Legumes$Chronology, 
                                   Legumes$Site_Type)))
   )

Grape.list$TC_ID <- droplevels(Grape.list$TC_ID)
  

####################
## OLIVES 
####################

Olives <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Present = ifelse(Olive>0, 1, 0)
  )
)

#Simplify categories
Olives$Site_Type <- str_replace(Olives$Site_Type, "Religious, monastery", "Religious")
Olives$Site_Type <- str_replace(Olives$Site_Type, "Castle", "Fortified")    
Olives$Site_Type <- str_replace(Olives$Site_Type, "Castrum", "Fortified")  

# Convert to list
Olive.list <- list(
    Olive_Found = Olives$Present,
    TC_ID = as.factor((interaction(Olives$Chronology, 
                                   Olives$Site_Type)))
   )

Olive.list$TC_ID <- droplevels(Olive.list$TC_ID)
  

####################
## NUTS 
####################

Nuts <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Seed_Count = rowSums(Df_Cond_Plants.pa[,c(29:31)])
  )
)

#Simplify categories
Nuts$Site_Type <- str_replace(Nuts$Site_Type, "Religious, monastery", "Religious")    
Nuts$Site_Type <- str_replace(Nuts$Site_Type, "Castle", "Fortified")    
Nuts$Site_Type <- str_replace(Nuts$Site_Type, "Castrum", "Fortified")  

# Convert to list
Nuts.list <- list(
    Nuts_Found = Nuts$Seed_Count,
    Nuts_Tot = 3,
    TC_ID = as.factor((interaction(Nuts$Chronology, 
                                   Nuts$Site_Type)))
   )

Nuts.list$TC_ID <- droplevels(Nuts.list$TC_ID)
  


```

```{r}
#| echo: false
#| code-fold: true
#| eval: false
# Eval is set to false because the models have been saved

# Create a binomial model, where N is 2 because that is the total number of noble 
# grains studied in this thesis
m_ng_type <- ulam(
   alist(
        NG_Found ~ dbinom( 2 , p ),
        logit(p) <- TypeChr[TC_ID],
        TypeChr[TC_ID] ~ dnorm(0,1.5)
    ), data=Noble_Grain.list , chains=4
    )

saveRDS(m_ng_type, "stan_models/m_ng_type.rds")

# Create a binomial model, where N is 2 because that is the total number of noble 
# grains studied in this thesis
m_mg_type <- ulam(
    alist(
        MG_Found ~ dbinom( 7 , p ),
        logit(p) <- TypeChr[TC_ID],
        TypeChr[TC_ID] ~ dnorm(0,1.5)
    ), data=Minor_Grains_Type.list , chains=4
    )

saveRDS(m_mg_type, "stan_models/m_mg_type.rds")


# Create a binomial model, where N is 2 because that is the total number of noble 
# grains studied in this thesis
m_leg_type <- ulam(
    alist(
        Leg_Found ~ dbinom( 7 , p ),
        logit(p) <- TypeChr[TC_ID],
        TypeChr[TC_ID] ~ dnorm(0,1.5)
    ), data=Legumes.list , chains=4
    )

saveRDS(m_leg_type, "stan_models/m_leg_type.rds")

# Create a binomial model, where N is 2 because that is the total number of noble 
# grains studied in this thesis
m_grape_type <- ulam(
    alist(
        Grape_Found ~ dbinom( 1 , p ), # Basically a bernoulli dist
        logit(p) <- TypeChr[TC_ID],
        TypeChr[TC_ID] ~ dnorm(0,1.5)
    ), data=Grape.list , chains=4
    )

saveRDS(m_grape_type, "stan_models/m_grape_type.rds")

# Create a binomial model, where N is 2 because that is the total number of noble 
# grains studied in this thesis
m_olives_type <- ulam(
    alist(
        Olive_Found ~ dbinom( 1 , p ), # Basically a bernoulli dist
        logit(p) <- TypeChr[TC_ID],
        TypeChr[TC_ID] ~ dnorm(0,1.5)
    ), data=Olive.list , chains=4
    )

saveRDS(m_olives_type, "stan_models/m_olives_type.rds")

# NUTS
# Create a binomial model, where N is 3 because that is the total number of nuts
#  studied in this thesis
m_nuts_type <- ulam(
    alist(
        Nuts_Found ~ dbinom( 3 , p ),
        logit(p) <- TypeChr[TC_ID],
        TypeChr[TC_ID] ~ dnorm(0,1.5)
    ), data=Nuts.list , chains=4
    )
saveRDS(m_nuts_type, "stan_models/m_nuts_type.rds")

# BERRIES
# Create a binomial model
m_berries_type <- ulam(
    alist(
        Berries_Found ~ dbinom( 9 , p ),
        logit(p) <- TypeChr[TC_ID],
        TypeChr[TC_ID] ~ dnorm(0,1.5)
    ), data=Berries_type.list , chains=4
    )

saveRDS(m_berries_type, "stan_models/m_berries_type.rds")

```

```{r}
#| echo: false
#| include: false

## NOBLE GRAINS

m_ng_type<-readRDS("stan_models/m_ng_type.rds")

m_ng_type.df <- m_ng_type %>%
  spread_draws(TypeChr[TC_ID])

m_ng_type.df %>% mutate(Type = case_when(
  TC_ID >= 1 &  TC_ID <= 3 ~ "Fortified",
  TC_ID >= 4 & TC_ID <= 6 ~ "Necropolis",
  TC_ID >= 7 & TC_ID <= 9  ~ "Religious",
  TC_ID >= 10 & TC_ID<=13 ~ "Rural",
  TC_ID >=14 & TC_ID<=16 ~ "Villa",
  TC_ID >=17 & TC_ID <=20 ~ "Urban"
))  %>% mutate(Chrono = case_when(
    TC_ID == 6 | TC_ID==9 |  TC_ID == 13 | TC_ID==16 | TC_ID==20  ~ "R",
    TC_ID == 2 |  TC_ID == 5 | TC_ID == 11 | TC_ID==15 | TC_ID==18  ~ "LR",
    TC_ID == 1 |  TC_ID == 4 | TC_ID == 7 | TC_ID==10 | TC_ID==14 | TC_ID==17  ~ "EMA",
    TC_ID == 3 |  TC_ID == 8 | TC_ID == 12 | TC_ID==19 ~ "Ma"
)) -> m_ng_type.df

m_ng_type.plot <- ggplot(
  data = m_ng_type.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(TypeChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_ng_type.df$TypeChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(Type ~ ., scales = "free") +
  labs(
    title = "Free-Threshing Wheats and Barley",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line."
  )


```

```{r}
#| echo: false
#| include: false


## MINOR GRAINS
m_mg_type <- readRDS("stan_models/m_mg_type.rds")

m_mg_type.df <- m_mg_type %>%
  spread_draws(TypeChr[TC_ID])

m_mg_type.df %>% mutate(Type = case_when(
  TC_ID >= 1 &  TC_ID <= 3 ~ "Fortified",
  TC_ID >= 4 & TC_ID <= 6 ~ "Necropolis",
  TC_ID >= 7 & TC_ID <= 9  ~ "Religious",
  TC_ID >= 10 & TC_ID<=13 ~ "Rural",
  TC_ID >=14 & TC_ID<=16 ~ "Villa",
  TC_ID >=17 & TC_ID <=20 ~ "Urban"
))  %>% mutate(Chrono = case_when(
    TC_ID == 6 | TC_ID==9 |  TC_ID == 13 | TC_ID==16 | TC_ID==20  ~ "R",
    TC_ID == 2 |  TC_ID == 5 | TC_ID == 11 | TC_ID==15 | TC_ID==18  ~ "LR",
    TC_ID == 1 |  TC_ID == 4 | TC_ID == 7 | TC_ID==10 | TC_ID==14 | TC_ID==17  ~ "EMA",
    TC_ID == 3 |  TC_ID == 8 | TC_ID == 12 | TC_ID==19 ~ "Ma"
)) -> m_mg_type.df


m_mg_type.plot <- ggplot(
  data = m_mg_type.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(TypeChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_mg_type.df$TypeChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(Type ~ ., scales = "free") +
  labs(
    title = "'Minor' Grains",
    subtitle = "Einkorn, Oats, Rye, Proso Millet, Foxtail Millet, Sorghum, and Emmer",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line."
  )


```

```{r}
#| echo: false
#| include: false

## LEGUMES
m_leg_type <- readRDS("stan_models/m_leg_type.rds")

m_leg_type.df <- m_leg_type %>%
  spread_draws(TypeChr[TC_ID])

m_leg_type.df %>% mutate(Type = case_when(
  TC_ID >= 1 &  TC_ID <= 3 ~ "Fortified",
  TC_ID >= 4 & TC_ID <= 6 ~ "Necropolis",
  TC_ID >= 7 & TC_ID <= 9  ~ "Religious",
  TC_ID >= 10 & TC_ID<=13 ~ "Rural",
  TC_ID >=14 & TC_ID<=16 ~ "Villa",
  TC_ID >=17 & TC_ID <=20 ~ "Urban"
))  %>% mutate(Chrono = case_when(
    TC_ID == 6 | TC_ID==9 |  TC_ID == 13 | TC_ID==16 | TC_ID==20  ~ "R",
    TC_ID == 2 |  TC_ID == 5 | TC_ID == 11 | TC_ID==15 | TC_ID==18  ~ "LR",
    TC_ID == 1 |  TC_ID == 4 | TC_ID == 7 | TC_ID==10 | TC_ID==14 | TC_ID==17  ~ "EMA",
    TC_ID == 3 |  TC_ID == 8 | TC_ID == 12 | TC_ID==19 ~ "Ma"
)) -> m_leg_type.df

m_leg_type.plot <- ggplot(
  data = m_leg_type.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(TypeChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_leg_type.df$TypeChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(Type ~ ., scales = "free") +
  labs(
    title = "Legumes",
    subtitle = "Lentil, Pea, Blue/Red Pea, Chickpea, and Vetches",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line."
  )

```

```{r}
#| echo: false
#| include: false

m_grape_type <- readRDS("stan_models/m_grape_type.rds")

m_grape_type.df <- m_grape_type %>%
  spread_draws(TypeChr[TC_ID])

m_grape_type.df %>% mutate(Type = case_when(
  TC_ID >= 1 &  TC_ID <= 3 ~ "Fortified",
  TC_ID >= 4 & TC_ID <= 6 ~ "Necropolis",
  TC_ID >= 7 & TC_ID <= 9  ~ "Religious",
  TC_ID >= 10 & TC_ID<=13 ~ "Rural",
  TC_ID >=14 & TC_ID<=16 ~ "Villa",
  TC_ID >=17 & TC_ID <=20 ~ "Urban"
))  %>% mutate(Chrono = case_when(
    TC_ID == 6 | TC_ID==9 |  TC_ID == 13 | TC_ID==16 | TC_ID==20  ~ "R",
    TC_ID == 2 |  TC_ID == 5 | TC_ID == 11 | TC_ID==15 | TC_ID==18  ~ "LR",
    TC_ID == 1 |  TC_ID == 4 | TC_ID == 7 | TC_ID==10 | TC_ID==14 | TC_ID==17  ~ "EMA",
    TC_ID == 3 |  TC_ID == 8 | TC_ID == 12 | TC_ID==19 ~ "Ma"
)) -> m_grape_type.df

m_grape_type.plot <- ggplot(
  data = m_grape_type.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(TypeChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_grape_type.df$TypeChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(Type ~ ., scales = "free") +
  labs(
    title = "Grape",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line."
  )


```

```{r}
#| echo: false
#| include: false

## OLIVES

# Why is it predicting means where there is no data? 

m_olives_type <- readRDS("stan_models/m_olives_type.rds")

m_olives_type.df <- m_olives_type %>%
  spread_draws(TypeChr[TC_ID])

m_olives_type.df %>% mutate(Type = case_when(
  TC_ID >= 1 &  TC_ID <= 3 ~ "Fortified",
  TC_ID >= 4 & TC_ID <= 6 ~ "Necropolis",
  TC_ID >= 7 & TC_ID <= 9  ~ "Religious",
  TC_ID >= 10 & TC_ID<=13 ~ "Rural",
  TC_ID >=14 & TC_ID<=16 ~ "Villa",
  TC_ID >=17 & TC_ID <=20 ~ "Urban"
))  %>% mutate(Chrono = case_when(
    TC_ID == 6 | TC_ID==9 |  TC_ID == 13 | TC_ID==16 | TC_ID==20  ~ "R",
    TC_ID == 2 |  TC_ID == 5 | TC_ID == 11 | TC_ID==15 | TC_ID==18  ~ "LR",
    TC_ID == 1 |  TC_ID == 4 | TC_ID == 7 | TC_ID==10 | TC_ID==14 | TC_ID==17  ~ "EMA",
    TC_ID == 3 |  TC_ID == 8 | TC_ID == 12 | TC_ID==19 ~ "Ma"
)) -> m_olives_type.df

m_olives_type.plot <- ggplot(
  data = m_olives_type.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(TypeChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_olives_type.df$TypeChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(Type ~ ., scales = "free") +
  labs(
    title = "Olive",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line."
  )


```

```{r}
#| echo: false
#| include: false

## NUTS
m_nuts_type <- readRDS("stan_models/m_nuts_type.rds")

m_nuts_type.df <- m_nuts_type %>%
  spread_draws(TypeChr[TC_ID])

m_nuts_type.df %>% mutate(Type = case_when(
  TC_ID >= 1 &  TC_ID <= 3 ~ "Fortified",
  TC_ID >= 4 & TC_ID <= 6 ~ "Necropolis",
  TC_ID >= 7 & TC_ID <= 9  ~ "Religious",
  TC_ID >= 10 & TC_ID<=13 ~ "Rural",
  TC_ID >=14 & TC_ID<=16 ~ "Villa",
  TC_ID >=17 & TC_ID <=20 ~ "Urban"
))  %>% mutate(Chrono = case_when(
    TC_ID == 6 | TC_ID==9 |  TC_ID == 13 | TC_ID==16 | TC_ID==20  ~ "R",
    TC_ID == 2 |  TC_ID == 5 | TC_ID == 11 | TC_ID==15 | TC_ID==18  ~ "LR",
    TC_ID == 1 |  TC_ID == 4 | TC_ID == 7 | TC_ID==10 | TC_ID==14 | TC_ID==17  ~ "EMA",
    TC_ID == 3 |  TC_ID == 8 | TC_ID == 12 | TC_ID==19 ~ "Ma"
)) -> m_nuts_type.df


m_nuts_type.plot <- ggplot(
  data = m_nuts_type.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(TypeChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_nuts_type.df$TypeChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(Type ~ ., scales = "free") +
  labs(
    title = "Nuts",
    subtitle = "Hazelnut, Walnut, and Chestnut",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line."
  )

```

```{r}
#| echo: false
#| include: false

## Stone fruits
#Berries = c("Blackberry", "Elderberry", "Blackthorn", "Wild.Cherry", "Corn..Cherry", "Sorbus.sp.", "Strawberry"),
#  Stone.fruits = c("Peach", "Plum", "Sour.Cherry", "Unsp..Prunus"),


DomFruit <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Seed_Count = rowSums(Df_Cond_Plants.pa[,c(32,33,35:38,50)])
  )
)

#Simplify categories
DomFruit$Site_Type <- str_replace(DomFruit$Site_Type, "Religious, monastery", "Religious")
DomFruit$Site_Type <- str_replace(DomFruit$Site_Type, "Castle", "Fortified")    
DomFruit$Site_Type <- str_replace(DomFruit$Site_Type, "Castrum", "Fortified")  

# Convert to list
DomFruit.list <- list(
    DF_Found = DomFruit$Seed_Count,
    DF_Tot = 7,
    TC_ID = as.factor((interaction(DomFruit$Chronology, 
                                   DomFruit$Site_Type)))
   )

DomFruit.list$TC_ID <- droplevels(DomFruit.list$TC_ID)

### BERRIES

Berries <- with(
  Df_Cond_Plants.pa,
  data.frame(
  Chronology = Chronology,
  Macroregion = name_macroreg,
  Site_Type = as.factor(Type),
  Geo = Geo,
  Seed_Count = rowSums(Df_Cond_Plants.pa[,c(41:49)])
  )
)

#Simplify categories
Berries$Site_Type <- str_replace(Berries$Site_Type, "Religious, monastery", "Religious")
Berries$Site_Type <- str_replace(Berries$Site_Type, "Castle", "Fortified")    
Berries$Site_Type <- str_replace(Berries$Site_Type, "Castrum", "Fortified")  

# Convert to list
Berries_type.list <- list(
    Berries_Found = Berries$Seed_Count,
    DF_Tot = 9,
    TC_ID = as.factor((interaction(Berries$Chronology, 
                                   Berries$Site_Type)))
   )

Berries_type.list$TC_ID <- droplevels(Berries_type.list$TC_ID)

Berries_reg.list <- list(
    Berries_Found = Berries$Seed_Count,
    DF_Tot = 9,
    RC_ID = as.factor((interaction(Berries$Chronology, 
                                   Berries$Macroregion)))
   )

Berries_reg.list$RC_ID <- droplevels(Berries_reg.list$RC_ID)

```

```{r}
#| eval: false
#| echo: false

####################
## Domestic FRUITS 
####################

# Create a binomial model, where N is 3 because that is the total number of noble 
# grains studied in this thesis
m_dfruit_type <- ulam(
    alist(
        DF_Found ~ dbinom( 7 , p ),
        logit(p) <- TypeChr[TC_ID],
        TypeChr[TC_ID] ~ dnorm(0,1.5)
    ), data=DomFruit.list , chains=4
    )

saveRDS(m_dfruit_type, "stan_models/m_dfruit_type.rds")
```

```{r}
#| echo: false

m_dfruit_type <- readRDS("stan_models/m_dfruit_type.rds")

m_dfruit_type.df <- m_dfruit_type %>%
  spread_draws(TypeChr[TC_ID])

m_dfruit_type.df %>% mutate(Type = case_when(
  TC_ID >= 1 &  TC_ID <= 3 ~ "Fortified",
  TC_ID >= 4 & TC_ID <= 6 ~ "Necropolis",
  TC_ID >= 7 & TC_ID <= 9  ~ "Religious",
  TC_ID >= 10 & TC_ID<=13 ~ "Rural",
  TC_ID >=14 & TC_ID<=16 ~ "Villa",
  TC_ID >=17 & TC_ID <=20 ~ "Urban"
))  %>% mutate(Chrono = case_when(
  TC_ID == 6 | TC_ID==9 |  TC_ID == 13 | TC_ID==16 | TC_ID==20  ~ "R",
  TC_ID == 2 |  TC_ID == 5 | TC_ID == 11 | TC_ID==15 | TC_ID==18  ~ "LR",
  TC_ID == 1 |  TC_ID == 4 | TC_ID == 7 | TC_ID==10 | TC_ID==14 | TC_ID==17  ~ "EMA",
  TC_ID == 3 |  TC_ID == 8 | TC_ID == 12 | TC_ID==19 ~ "Ma"
)) -> m_dfruit_type.df


m_dfruit_type.plot <- ggplot(
  data = m_dfruit_type.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(TypeChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_dfruit_type.df$TypeChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(Type ~ ., scales = "free") +
  labs(
    title = "Domestic Fruits",
    subtitle = "Apple, Fig, Melon, Peach, Pear, Plum, and Date",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line."
  )


m_berries_type <- readRDS("stan_models/m_berries_type.rds")

m_berries_type.df <- m_berries_type %>%
  spread_draws(TypeChr[TC_ID])

m_berries_type.df %>% mutate(Type = case_when(
  TC_ID >= 1 &  TC_ID <= 3 ~ "Fortified",
  TC_ID >= 4 & TC_ID <= 6 ~ "Necropolis",
  TC_ID >= 7 & TC_ID <= 9  ~ "Religious",
  TC_ID >= 10 & TC_ID<=13 ~ "Rural",
  TC_ID >=14 & TC_ID<=16 ~ "Villa",
  TC_ID >=17 & TC_ID <=20 ~ "Urban"
))  %>% mutate(Chrono = case_when(
  TC_ID == 6 | TC_ID==9 |  TC_ID == 13 | TC_ID==16 | TC_ID==20  ~ "R",
  TC_ID == 2 |  TC_ID == 5 | TC_ID == 11 | TC_ID==15 | TC_ID==18  ~ "LR",
  TC_ID == 1 |  TC_ID == 4 | TC_ID == 7 | TC_ID==10 | TC_ID==14 | TC_ID==17  ~ "EMA",
  TC_ID == 3 |  TC_ID == 8 | TC_ID == 12 | TC_ID==19 ~ "Ma"
)) -> m_berries_type.df


m_berries_type.plot <- ggplot(
  data = m_berries_type.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(TypeChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_berries_type.df$TypeChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(Type ~ ., scales = "free") +
  labs(
    title = "Berries",
    subtitle="Sour Cherry, Cornelian Cherry, Rowan, Wild Cherries, Elderberry, Blackthorn, Blackberry,\n and Strawberry",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line."
  )

```

During the Roman period, free-threshing wheats and barley were primarily found on rural sites, where the predicted probability of occurrence (with a credible interval of 0.50) ranged between 0.68-0.78. The trend is positive, with an increase in predicted occurrence in later chronological phases. There is also an increasing tendency, although to a lesser extent, for urban sites and villas (at least until this type of settlement was abandoned). One site type consistently shows a strong presence of these grains from the Late Roman to the Medieval period: fortified sites (castra). Indeed, fortified settlements also exhibit a substantial presence of other types of cereal grains, including emmer, einkorn, and millets. If the average expected occurrence of more rustic grains throughout each chronology and type of site is approximately 0.31, in fortified sites, the average is about 0.65 during the Late Roman and Medieval eras and 0.59 during the Early Medieval period. In rural sites, too, minor grains increase from the Roman to the Early Medieval period, reaching a peak of 0.43 in the Medieval period and falling to 0.30 (but with a considerable credible interval) in the latest period after the 11^th^ century. This pattern is also evident in urban and villa sites, which exhibit acceptably narrow credible intervals. However, credible intervals for religious sites, despite showing promising results, are too wide due to their small group sizes. Regarding legumes, reliable conclusions can be drawn for most site types up until the 11th century. However, the length of credible intervals for religious sites makes any major informative conclusion uncertain for this site type. Legumes appear to always be a part of the rural landscape, found in both rural sites where pulses were particularly present during the early medieval (HDI = 0.30-0.34) and medieval (HDI = 0.25-0.34) periods, as well as in rural villas. In fact, during the Early Medieval Period, probabilities increased in villas as well, with an HDI of 0.16-0.22. This trend is mirrored in urban sites as well. While probabilities during the Roman age hover below the mean of 0.25, the early Middle Ages witness a rise with an HDI of 0.25-0.30, reaching a peak in the later phase with an HDI of 0.28-0.37. This signals a notable uptick in the significance of pulses in the diet and farming. If the mean estimate of legume occurrence is consistently around 0.15 within necropoleis from the Roman to the early medieval period, then it is notable that legumes were important offerings at religious sites. During the Roman period, their significance ranged between 0.30-0.40, whereas in the early medieval period it was between 0.30-0.45. Regrettably, this group is relatively limited, and further observations are required from religious sites, as there were no late Roman samples, and the medieval samples show excessively wide credible intervals. While fortified sites display a wide credible interval in each phase, which may suggest considerable variability within the data, their 0.50 credible interval greatly surpasses the overall mean. During the Late Roman period, the HDI fluctuates between 0.59-0.73. In the Early Medieval period, the HDI is marginally lower, ranging between 0.55-0.64, before increasing again in the 11th century samples, where it ranges between 0.64-0.76. For what concerns the two primary cash crops, grapes and olives, it is challenging to draw conclusions with regards to site type and chronology as predictors. This is due to the small group sizes and variability between sites, which result in particularly broad credible intervals. In general, there are indications of a decrease in grape cultivation in both urban and rural areas. In the rural setting, however, the trend is fluctuating, with a positive turn in the late Roman era and a new decline in the early Middle Ages. With such wide credible intervals covering a significant portion of the probability space, it is probable that the data was unable to overcome the prior, leading to high uncertainty. Further data or a more informative prior (although this may introduce subjectivity) may be necessary. The olive plots have narrowed the credible intervals range slightly. During the Roman period, olives were frequently present in urban sites with a range of 0.63-0.72 (credible interval = 0.50) and religious sites with a highest density interval (HDI) ranging between 0.61 and 0.81. In rural sites, olives were also prevalent, with an estimated mean of around 0.50 in the Roman period and 0.52 in the Late Roman period. However, in later periods, there was a sharp decline in olive production. This decline commences in the Late Roman period for both urban and rural villa sites, though the latter does experience a renewed positive HDI in the early medieval period. Generally, the average occurrence of grapes (although with all the limitations imposed by such large credible intervals) is higher than that of olives. This may be attributed to numerous samples in the database coming from Northern Italy, which is less suitable for olive cultivation. The credible interval ranges for the models of nuts, i.e. hazelnuts, walnuts and chestnuts, are narrower and more informative compared to those of the grape/olives models. This implies that there is less variability in the dataset available for this category. During the Roman period, the highest HDIs for nuts are found in religious sites, necropoleis, and rural villas. However, the credible intervals for these categories are large. The estimated mean HDI for urban sites during this period is approximately 0.35, while for rural sites, it is around 0.22. During all the subsequent periods, the mean predicted occurrence remains below the overall mean of 0.31 for both types of locations, with a potential downward trend for urban sites. The group that exhibits the most significant decline is rural villas, which decreased from an average Roman estimate of 0.45 to an average of 0.09 in the early medieval era. Villas show a similar decrease in the frequency of domestic fruits (apple, fig, melon, peach, pear, plum, date), but with credible intervals of considerable size. During the Roman era, fruits were abundant in urban locations, becoming less prevalent in subsequent periods, only to rise again in samples after the 11^th^ century. Funerary sites also exhibit high HDI averages for domestic fruits (0.23 in the Roman period and 0.28 in the late Roman period). In contrast, there is a gradual rise in the occurrence of cultivated fruits in rural areas between the Roman and Medieval eras. In addition to larger fruits, our model encompasses the consumption of different types of berries such as sour cherry, cornelian cherry, rowan, wild cherries, elderberry, blackthorn, blackberry, and strawberry. It appears that the presence of berries was ubiquitous, albeit in minor quantities. Upon closer inspection of contexts with more reliable credible intervals, a positive trend is observable in rural sites from the Roman to the Medieval era. While urban sites exhibit fluctuations, they appear to have a higher consumption of berries, with HDI values exceeding the overall mean. The trend in rural villas is less pronounced: during the Roman period there is a substantial variability that resulted in a larger credible interval, whereas the late Roman period's average is around the overall mean of 0.10. Afterwards, the average drops to 0.04. For the Roman and Late Roman period, estimated averages of 0.04 and 0.07 are identified in necropoleis, respectively.

```{r}
#| echo: false
#| warning: false
#| label: fig-bayes-glm-site-type
#| fig-cap: "Bayesian probability estimates for main plant taxa, divided by site type and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."
#| fig-subcap: 
#|  - "Noble grains (wheat and barley)."
#|  - "Minor grains."
#|  - "Legumes."
#|  - "Grape."
#|  - "Olives. The model is predicting (conservative) values for fortified sites, in which no olive was found."
#|  - "Nuts."
#|  - "Domestic fruits."
#|  - "Berries."
#| layout-nrow: 8
#| layout-ncol: 1
#| fig-height: 10

m_ng_type.plot
m_mg_type.plot
m_leg_type.plot
m_grape_type.plot
m_olives_type.plot
m_nuts_type.plot
m_dfruit_type.plot
m_berries_type.plot

```

### Species richness in urban contexts

```{r}
#| echo: false

####################
# DATA PROCESSING  #
####################

# 1. Remove NAs
Df_Cond_Plants[is.na(Df_Cond_Plants)] <-0 

# 2. Generate a dataframe with the relative proportions and round the results
Df_Cond_Plants_Rel <- decostand(Df_Cond_Plants[11:50], method = "total")
Df_Cond_Plants_Rel <- round(Df_Cond_Plants_Rel, digits=2)

# 3. Create a dataframe with the variables of interest
Df_Cond_Plants_RichnDiv <- data.frame(
  "Geo" = Df_Cond_Plants$Geo,
  "Chronology" = Df_Cond_Plants$Chronology,
  "Type"= Df_Cond_Plants$Type, 
  "Macroregion" = Df_Cond_Plants$name_macroreg,
  "Specnumber" = specnumber(Df_Cond_Plants_Rel), #All plants
  "Shannon Div" = diversity(Df_Cond_Plants_Rel),
  Df_Cond_Plants_Rel
)

# 4. Simplify some categories
Df_Cond_Plants_RichnDiv$Type <- str_replace(Df_Cond_Plants_RichnDiv$Type, "Religious, monastery", "Religious")    
Df_Cond_Plants_RichnDiv$Type <- str_replace(Df_Cond_Plants_RichnDiv$Type, "Castle", "Fortified")    
Df_Cond_Plants_RichnDiv$Type <- str_replace(Df_Cond_Plants_RichnDiv$Type, "Castrum", "Fortified")  

# PLOTS BY TYPE

# Dataframes filtered by Chronology 
Df_Cond_Plants_RichnDiv.R <- filter(Df_Cond_Plants_RichnDiv, Chronology == "R")
Df_Cond_Plants_RichnDiv.LR <- filter(Df_Cond_Plants_RichnDiv, Chronology == "LR")
Df_Cond_Plants_RichnDiv.EMA <- filter(Df_Cond_Plants_RichnDiv, Chronology == "EMA")
Df_Cond_Plants_RichnDiv.Ma <- filter(Df_Cond_Plants_RichnDiv, Chronology == "Ma")


############################################################################
## CORRECTION FOR INCOMPLETE SAMPLES                                       #
# Need to filter out sites that did not provide legumes or fruits at all   #
# Need to compare these rows to see if there are some indexes in common    #
############################################################################

# Chronology: R 
CompleteSamples.R <- data.frame(
Cereals = (rowSums(Df_Cond_Plants_RichnDiv.R[,c(7:16)]) > 0),
Legumes = (rowSums(Df_Cond_Plants_RichnDiv.R[,c(17:30)]) > 0),
Fruits = (rowSums(Df_Cond_Plants_RichnDiv.R[,c(31:46)]) > 0)
)

IncompleteSamplesIndexes.R <- which(rowSums(CompleteSamples.R) < 3)

# Chronology: LR 
CompleteSamples.LR <- data.frame(
Cereals = (rowSums(Df_Cond_Plants_RichnDiv.LR[,c(7:16)]) > 0),
Legumes = (rowSums(Df_Cond_Plants_RichnDiv.LR[,c(17:30)]) > 0),
Fruits = (rowSums(Df_Cond_Plants_RichnDiv.LR[,c(31:46)]) > 0)
)

IncompleteSamplesIndexes.LR <- which(rowSums(CompleteSamples.LR) < 3)

# Chronology: EMA 
CompleteSamples.EMA <- data.frame(
Cereals = (rowSums(Df_Cond_Plants_RichnDiv.EMA[,c(7:16)]) > 0),
Legumes = (rowSums(Df_Cond_Plants_RichnDiv.EMA[,c(17:30)]) > 0),
Fruits = (rowSums(Df_Cond_Plants_RichnDiv.EMA[,c(31:46)]) > 0)
)

IncompleteSamplesIndexes.EMA <- which(rowSums(CompleteSamples.EMA) < 3)

# Chronology: Ma 
CompleteSamples.Ma <- data.frame(
Cereals = (rowSums(Df_Cond_Plants_RichnDiv.Ma[,c(7:16)]) > 0),
Legumes = (rowSums(Df_Cond_Plants_RichnDiv.Ma[,c(17:30)]) > 0),
Fruits = (rowSums(Df_Cond_Plants_RichnDiv.Ma[,c(31:46)]) > 0)
)

IncompleteSamplesIndexes.Ma <- which(rowSums(CompleteSamples.Ma) < 3)

#############################################
## END OF CORRECTION FOR INCOMPLETE SAMPLES #
#############################################

```

In addition to examining the predicted occurrence of particular plant species within the selected contextual classifications, we found it instructive to examine plant richness. Yet, as previously stated in this chapter, subsetting data based on site type results in very narrow groups that provide unreliable information. Of all the context categories, urban sites displayed the greatest frequency of sites for every chronology analysed. For this reason, and because of our specific interest in the urban garden phenomenon, we calculated the richness of plants in urban settings for each stage. To ensure accuracy, we excluded contexts that did not report all three types of plant taxa under examination - namely cereals, fruits/nuts, and legumes. This correction carries significant drawbacks because it eliminates sites where the exclusion of certain plant categories may have been intentional (such as storages). However, despite considerable fluctuations in the numbers (particularly for the 11^th^ century CE, which comprises only two samples after the correction), the overall trend remains similar to the previous one. Plant richness slightly decreases in urban contexts after the Roman period; however, early medieval cities exhibit a higher plant richness than the Roman and Late Roman phases. In the 11^th^ century, plant richness increases even further.

| Chronology | Richness | Samples | Richness\* | Samples\* |
|------------|----------|---------|------------|-----------|
| R          | 6.5      | 44      | 8.45       | 22        |
| LR         | 5.9      | 24      | 7.2        | 10        |
| EMA        | 7.2      | 25      | 9.6        | 8         |
| Ma         | 9        | 8       | 17.5       | 2         |

: Plant richness in urban contexts before and after (**\***) removing incomplete samples. {#tbl-richness-urban}

## Macroregion {#sec-bot-res-macroregion style="text-align: justify;"}

### Cereals

The central focus of this chapter revolves around cereals, given their pivotal economic importance during the first millennium CE. The exploration begins with two Bayesian models that vividly depict the estimated occurrence of free-threshing wheats, barley, and other more rustic grains across each chronological phase under consideration. Moving forward, our attention shifts to the richness of cereals within each sub-region. We delve into an examination of the distances between the northern and southern Italian cereal datasets during the Early Middle Ages, presented as a compelling case study. Unlike the Bayesian models, this case study employs a frequentist approach, allowing for a comparative analysis of results obtained through distinct methodologies and perspectives. As we unravel the findings, it becomes evident that both the Bayesian models and the frequentist approach converge on the same conclusions. Despite their differing methodologies and analytical angles, the unified outcomes contribute to a comprehensive understanding of the dynamics surrounding cereal cultivation in Northern and Southern Italy during the Early Middle Ages.

#### Free-threshing wheats and barley

In addition to considering chronological and context type models, another important variable that has been examined in this study is `Macroregion`. This allows us to divide the Italian peninsula into three regions (Southern, Central, and Northern) and investigate more specific geographic questions. Due to the limited amount of data available, it is not however feasible to build on the previous model and incorporate this variable into the analysis. Additionally, including three categorical predictors would make it difficult to interpret the results. To account for the influence of `Macroregion`, we can stratify the dataset by Southern, Central, and Northern Italy, similar to how we stratified by `Site_Type`. It is important to also consider chronological stratification as different dynamics were occurring in the areas under observation. Therefore, we can block by `Chronology` and stratify by `Macroregion` to investigate the influence of geographic location on animal husbandry and consumption patterns.

```{r}
#| echo: false
#| label: fig-macroregion-dag-plants
#| fig-cap: "The DAG that represents the relationship between Chronology, Macroregion, and the presence of plants in the study. Chronology is shown as a collider variable, and its influence on NISP is mediated through Macroregion. To block the backdoor path between Chronology and Plant_Present, the dataset is stratified by Chronology."

DAG_macroregion <- dagitty('dag {
Plant_Present [outcome]
Chronology [collider,dagitty.stratum="1"]
Macroregion [exposure,dagitty.stratum="2"]
Chronology -> Plant_Present
Chronology -> Macroregion
Macroregion -> Plant_Present
}')

DAG_macroregion <- tidy_dagitty(DAG_macroregion)

ggdag_paths(DAG_macroregion, 
      text = FALSE, 
      use_labels = "name", 
      shadow = TRUE) +
  theme_dag(base_size = 14)+
  theme(legend.position = "none", strip.text = element_blank())+
  scale_color_manual(values = "#0072B2", na.value = "grey80") + 
  scale_fill_manual(values = "#0072B2", na.value = "grey80")+
   ggraph::scale_edge_color_manual(values = "#0072B2", na.value = "grey80")


```

The chosen distribution is a Binomial where $F$ (short for 'found') on the left side of the formula is the outcome variable---a presence/absence indicator for the observation $i$. In the case of a single taxon, the value can either be 0 (for absence) or 1 (for presence) and the $T$ is 1, making the Binomial distribution effectively a Bernoulli distribution. If the model is for more than a single taxon, the $T$ is the total number of taxa that are being modelled. The model presented below is an intercept-only model, where the intercept $\alpha$ carries an interaction index ${[REGid]}$ as the model will provide estimates for each macroregion and chronology under examination. For instance, Roman: Southern Italy is labelled as 1, Roman: Central Italy as 2, and so forth.

$$
F_{i} \sim Binomial(T, \bar{p}_{i} )
$$

$$
logit(\bar{p}_{i}) = \alpha_{[REGid]}
$$

$$
\alpha_{[REGid]} \sim Normal(0,1.5)
$$ While this category is of particular importance, the interpretation of the results of this model is problematic and immediately reveals the group imbalances. The credible intervals for Northern Italy are narrow and informative, considering the usage of a weakly informative prior. On the other hand, the range of estimates for Southern and Central Italy requires careful consideration. Nonetheless, it is still possible to draw conclusions by analysing the regions of the graphs where the majority of the probability estimates are located. During the Roman period, the mean estimated probabilities of discovering free-threshing wheats and barley was similar in all three sub-regions (SI = 0.48, CI = 0.50, NI = 0.46), although the credible interval for Central Italy is quite large requiring additional archaeobotanical data to increase specificity. In the Late Roman period, the credible intervals are quite large both for Southern Italy (where the 0.50 probability region ranges between 0.38 and 0.52) and Central Italy (where the 0.50 probability region ranges between 0.53 and 0.69). Conversely, the 0.50 credible interval for Northern Italy is between 0.55 and 0.62. During the early medieval period, there was a marked increase in estimates across all three regions. Central Italy had the highest peak, ranging from 0.91 to 0.97, while Northern Italy reached 0.78 to 0.84, and Southern Italy attained 0.67 to 0.77. The smaller post-11^th^ century dataset yields broad credible intervals, suggesting a possible positive growth in Southern Italy, while mean estimates for Central and Northern Italy reflect a minor decrease.

```{r}
#| echo: false

# Convert to list
Noble_Grains.list <- list(
    NG_Found = Noble_Grains_Reg$Grain_Count,
    MG_Tot = 2, # Barley + Common Wheat
    RC_ID = as.factor((interaction(Noble_Grains_Reg$Chronology, 
                                   Noble_Grains_Reg$Macroregion)))
   )
```

```{r}
#| echo: false
#| eval: false
#| code-fold: true


# Create a binomial model, where N is 2 because that is the total number of noble 
# grains studied in this research
m_ng_reg <- ulam(
    alist(
        NG_Found ~ dbinom( 2 , p ),
        logit(p) <- RegChr[RC_ID],
        RegChr[RC_ID] ~ dnorm(0,1.5)
    ), data=Noble_Grains.list , chains=4, log_lik = T
    )

saveRDS(m_ng_reg, "stan_models/m_ng_reg.rds")

```

```{r}
#| echo: false
#| warning: false
#| message: false
#| output: false


m_ng_reg <- readRDS("stan_models/m_ng_reg.rds")

m_ng_reg.df <- m_ng_reg %>%
  spread_draws(RegChr[RC_ID])

m_ng_reg.df %>% mutate(Region = case_when(
  RC_ID >= 9 &  RC_ID <=12 ~ "SI",
  RC_ID >= 1 & RC_ID <= 4 ~ "CI",
  RC_ID >= 5 & RC_ID <= 8  ~ "NI"
))  %>% mutate(Chrono = case_when(
    RC_ID == 4 |  RC_ID == 8 | RC_ID==12  ~ "R",
    RC_ID == 2 |  RC_ID == 6 | RC_ID == 10  ~ "LR",
    RC_ID == 1 |  RC_ID == 5 | RC_ID == 9  ~ "EMA",
    RC_ID == 3 |  RC_ID == 7 | RC_ID == 11 ~ "Ma"
)) -> m_ng_reg.df

m_ng_reg.plot <- ggplot(
  data = m_ng_reg.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(RegChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_ng_reg.df$RegChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(factor(Region, levels=c("SI", "CI", "NI")) ~ ., scales = "free") +
  labs(
    title = "Free-Threshing Wheats and Barley",
    subtitle = "Macroregional distribution",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line."
  )

```

```{r}
#| echo: false
#| label: fig-bayes-glm-ng-macroregion
#| fig-cap: "Bayesian probability estimates for free-threshing wheats and barley, divided by macroregion and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."

m_ng_reg.plot
```

#### 'Minor' grains

The model for 'minor' grains in the Italian macroregion uses a Binomial distribution where $F$ (short for 'found') on the left side of the formula is the outcome variable---a presence/absence indicator for the observation $i$. As there are seven types of minor grains under investigation, the binomial will take 7 as maximum ($T$). This model effectively shows the probability of a single site to be reliant on more rustic grains. Emmer for instance, is ubiquitous in Italy, but in many cases it is the only hulled grain found among other cereals in a context. Modelling the presence of more grains in a site can give insights on the rural economy. The model presented below is an intercept-only model, where the intercept $\alpha$ carries an interaction index ${[REGid]}$ as the model will provide estimates for each macroregion and chronology under examination.

$$
F_{i} \sim Binomial(7, \bar{p}_{i} )
$$

$$
logit(\bar{p}_{i}) = \alpha_{[REGid]}
$$

$$
\alpha_{[REGid]} \sim Normal(0,1.5)
$$ After examining the posterior distribution, the credible intervals reveal a striking coherence in the dataset, marked by a lack of excessive dispersion. However, Central Italy deviates as the group sizes are small, which leads to larger credible intervals. Divergent patterns among Italian sub-regions can already be observed in the Roman age. In Southern Italy, the 0.50 HDI is confined within the tight range of 0.18 to 0.21. Contrastingly, Central Italy showcases a broader span from 0.07 to 0.13, while the North falls within the range of 0.22 to 0.24. Notably, the North boasts a notably short credible interval, hinting at consistency and a substantial volume of observations. As we transition into the Late Roman period, divergent trends emerge. Southern Italy maintains a modest range of 0.08-0.12, whereas Central Italy experiences a higher amplitude from 0.17 to 0.23. The North exhibits a shift towards 'minor' grains, reflected in an expanded interval of 0.31-0.35. Come the Early Middle Ages, both Central and Northern Italy surpass the overall mean of 0.23, with HDIs ranging impressively between 0.46-0.54 and 0.44-0.48, respectively. A growing disparity between these regions and Southern Italy becomes evident, where the HDI hovers between 0.13-0.17. Despite the broad credible intervals for post-11^th^-century samples, the estimated means consistently uphold the preceding trends, albeit with a subtle downward tendency.

```{r}
#| echo: false
#| eval: true
#| code-fold: true

# Convert to list
Minor_Grains.list <- list(
    MG_Found = Minor_Grains$Grain_Count,
    MG_Tot = 7,
    RC_ID = as.factor((interaction(Minor_Grains$Chronology, 
                                   Minor_Grains$Macroregion)))
   )
```

```{r}
#| echo: false
#| eval: false
#| code-fold: true

# Create a binomial model, where N is 7 because that is the total number of minor 
# grains studied in this thesis
m_mg_reg <- ulam(
    alist(
        MG_Found ~ dbinom( 7 , p ),
        logit(p) <- RegChr[RC_ID],
        RegChr[RC_ID] ~ dnorm(0,1.5)
    ), data=Minor_Grains.list , chains=4
    )

saveRDS(m_mg_reg, "stan_models/m_mg_reg.rds")

```

```{r}
#| echo: false
#| warning: false
#| message: false
#| output: false

m_mg_reg <- readRDS("stan_models/m_mg_reg.rds")

m_mg_reg.df <- m_mg_reg %>%
  spread_draws(RegChr[RC_ID])

m_mg_reg.df %>% mutate(Region = case_when(
  RC_ID >= 9 &  RC_ID <=12 ~ "SI",
  RC_ID >= 1 & RC_ID <= 4 ~ "CI",
  RC_ID >= 5 & RC_ID <= 8  ~ "NI"
))  %>% mutate(Chrono = case_when(
    RC_ID == 4 |  RC_ID == 8 | RC_ID==12  ~ "R",
    RC_ID == 2 |  RC_ID == 6 | RC_ID == 10  ~ "LR",
    RC_ID == 1 |  RC_ID == 5 | RC_ID == 9  ~ "EMA",
    RC_ID == 3 |  RC_ID == 7 | RC_ID == 11 ~ "Ma"
)) -> m_mg_reg.df

m_mg_reg.plot <- ggplot(
  data = m_mg_reg.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(RegChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_mg_reg.df$RegChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(factor(Region, levels=c("SI", "CI", "NI")) ~ ., scales = "free") +
  labs(
    title = "'Minor' Grains",
    subtitle = "Macroregional distribution",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line."
  )

```

```{r}
#| echo: false
#| label: fig-bayes-glm-mg-macroregion
#| fig-cap: "Bayesian probability estimates for 'minor' grains (emmer, einkorn, foxtail and broomcorn millets, Sorghum), divided by macroregion and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."

m_mg_reg.plot
```

#### Cereal richness in the Italian macroregions {#sec-richness-macroregions style="text-align:justify;"}

In @sec-case-study-richness-cereals-macroreg, detailed insights into the pre-processing of archaeobotanical data were provided, aiming to enhance the accuracy of cereal richness estimates across the three distinct Italian sub-regions. The original group sizes before this pre-processing are illustrated in @tbl-Sample-Sizes-original, while @tbl-Sample-Sizes displays the reduced number of samples following the data processing steps. For a more granular view of the impact of data processing, @tbl-Sample-Sizes-Seeds presents the effective count of caryopses per group, with the mean richness conveniently summarised in @tbl-Sample-Richness. Examining cereal presence values reveals similarities between Roman Northern and Southern Italian sites. Notably, Central Italy reports higher values, albeit caution is warranted as this observation relies on data from only three sites, rendering it less reliable. Transitioning to the Early Middle Ages, Central Italy emerges once again as the region richest in cereals, closely trailed by Northern Italy. A fascinating observation is the enduring similarity in cereal values in Southern Italy, which remain remarkably close to those recorded in the Roman age. For a comprehensive listing of Southern Italian Early Middle Ages sites, refer to @tbl-southern-ema-sites.

```{r}
#| echo: false
#| message: false
#| output: false


library(knitr)
library(kableExtra)
library(reactable)

# DATA PROCESSING
# Keep the original data frame unchanged and separate
Bot_PA = Archaeobot_Condensed
# Select columns of interest
Bot_PA = Bot_PA[,c(1,2,4:7,11:24,33,56)]
# Create a total macroremains column
Bot_PA$Tot_Macroremains = Bot_PA$Tot..Cereals+Bot_PA$Tot..Pulses+Bot_PA$Tot..Fruits.Nuts
# Get rid of the tot..pulses and tot..fruits 
Bot_PA = Bot_PA[,-c(21,22)]

# Convert cereal values to presence absence
Bot_PA[,10:18] = decostand(Bot_PA[,10:18], method = "pa")
  
# Convert NA to absence (0)
Bot_PA[is.na(Bot_PA)] = 0

# Get a richness column
Bot_PA$Tot_Cereal_Taxa = rowSums(Bot_PA[,10:18])

# Select only rows that have identified cereal taxa
Bot_PA = subset(Bot_PA, Tot_Cereal_Taxa > 0)
Bot_PA = subset(Bot_PA, Tot_Macroremains > 10)

# SUBSETTING DATA

# ROMAN
# Selecting the Chronology of interest (R) and excluding Central Italy
Bot_PA.R = subset(Bot_PA, Macroregion!="Central Italy" & Chronology=="R")

# Creating two df with categorical and numerical info
Bot_PA_categ.R = Bot_PA.R[1:9]
Bot_PA_data.R = Bot_PA.R[10:18]

# LATE ROMAN
# Selecting the Chronology of interest (LR) and excluding Central Italy
Bot_PA.LR = subset(Bot_PA, Macroregion!="Central Italy" & Chronology=="LR")

# Creating two df with categorical and numerical info
Bot_PA_categ.LR = Bot_PA.LR[1:9]
Bot_PA_data.LR = Bot_PA.LR[10:18]

## EMA
Bot_PA.EMA = subset(Bot_PA, Macroregion!="Central Italy" & Chronology=="EMA")

# Creating two df with categorical and numerical info
Bot_PA_categ.EMA = Bot_PA.EMA[1:9]
Bot_PA_data.EMA = Bot_PA.EMA[10:18]

## 11th c.
Bot_PA.Ma = subset(Bot_PA, Macroregion!="Central Italy" & Chronology=="Ma")

# Creating two df with categorical and numerical info
Bot_PA_categ.Ma = Bot_PA.Ma[1:9]
Bot_PA_data.Ma = Bot_PA.Ma[10:18]

# What is the total number of samples available if we exclude duplicates 
# given by samples stretching more chronologies?
Bot_unique = Archaeobot_Condensed[-6]
Bot_unique = Bot_unique[!duplicated(Bot_unique),]

# and the total number of selected samples only?
Bot_PA_unique = Bot_PA[-5]
Bot_PA_unique = Bot_PA_unique[!duplicated(Bot_PA_unique),]

```

```{r}
#| echo: false
#| output: false
#| message: false

Sample_Sizes = Bot_PA %>%
  dplyr::count(Macroregion, Chronology) %>%
  arrange(factor(Macroregion, levels = c("Northern Italy", "Central Italy", "Southern Italy"))) %>%
  pivot_wider(names_from = Macroregion, values_from = n) %>%
  arrange(factor(Chronology, levels = c("R", "LR", "EMA", "Ma")))

Sample_Sizes$Chronology = c("Roman", "Late Roman", "Early Medieval", "11th c.")

# NOTE: use Archaeobot_Condensed instead of Bot_PA if you want to know sample size before pre-processing
Sample_Sizes_BeforeProcessing = Archaeobot_Condensed %>%
  dplyr::count(Macroregion, Chronology) %>%
  arrange(factor(Macroregion, levels = c("Northern Italy", "Central Italy", "Southern Italy"))) %>%
  pivot_wider(names_from = Macroregion, values_from = n) %>%
  arrange(factor(Chronology, levels = c("R", "LR", "EMA", "Ma")))

Sample_Sizes_BeforeProcessing$Chronology = c("Roman", "Late Roman", "Early Medieval", "11th c.")
write.csv(Sample_Sizes_BeforeProcessing, "tables_exported_for_reference/Sample_Sizes_BeforeProcessing.csv", row.names = F)


# Let us calculate also the number of seeds in each chronology and macroregion
Sample_Sizes_Seeds_Effective = Bot_PA %>%
    group_by(Macroregion, Chronology) %>%
    summarize(mean_Tot_Cereal_Taxa = sum(Tot_Macroremains)) %>%
    arrange(factor(Macroregion, levels = c("Northern Italy", "Central Italy", "Southern Italy"))) %>%
    pivot_wider(names_from = Macroregion, values_from = mean_Tot_Cereal_Taxa) %>%
    arrange(factor(Chronology, levels = c("R", "LR", "EMA", "Ma")))

Sample_Sizes_Seeds_Effective$Chronology = c("Roman", "Late Roman", "Early Medieval", "11th c.")

```

```{r}
#| echo: false
#| label: tbl-Sample-Sizes-original
#| tbl-cap: "Sample sizes before pre-processing."

kable(Sample_Sizes_BeforeProcessing) %>% kable_minimal()

```

```{r}
#| echo: false
#| label: tbl-Sample-Sizes
#| tbl-cap: "Effective sample sizes."

kable(Sample_Sizes) %>% kable_minimal()

```

```{r}
#| echo: false
#| label: tbl-Sample-Sizes-Seeds
#| tbl-cap: "Effective cereal caryopses count for each chronology and macroregion. Some samples with very large outliers (e.g. Sirmione, via Antiche Mura) skew the distribution."

kable(Sample_Sizes_Seeds_Effective, digits = 0) %>% kable_minimal()

```

```{r}
#| echo: false
#| output: false

# Calculate the sample richness by macroregion and chronology, using tidyverse
Sample_Richness = Bot_PA %>%
  group_by(Macroregion, Chronology) %>%
  summarize(mean_Tot_Cereal_Taxa = mean(Tot_Cereal_Taxa)) %>%
  arrange(factor(Macroregion, levels = c("Northern Italy", "Central Italy", "Southern Italy"))) %>%
  pivot_wider(names_from = Macroregion, values_from = mean_Tot_Cereal_Taxa) %>%
  arrange(factor(Chronology, levels = c("R", "LR", "EMA", "Ma")))

Sample_Richness$Chronology = c("Roman", "Late Roman", "Early Medieval", "11th c.")

```

```{r}
#| echo: false
#| label: tbl-Sample-Richness
#| tbl-cap: "Mean sample cereal richness after pre-processing data."


kable(Sample_Richness, digits = 2) %>% kable_minimal()

```

| ID  | Site                                   | Region     | Geography    | Type         | Culture/Influence |
|------------|------------|------------|------------|------------|------------|
| 98  | S. Maria in Cività, D85                | Molise     | Hilltop      | Urban        | Lombard           |
| 107 | S. Giovanni di Ruoti, Phase 3A         | Basilicata | Mountain     | Monastery    | Lombard           |
| 107 | S. Giovanni di Ruoti, Phase 3B         | Basilicata | Mountain     | Monastery    | Lombard           |
| 198 | Salapia, area botteghe, US 2475        | Puglia     | Coast/Lagoon | Urban        | Lombard           |
| 198 | Salapia, area botteghe, US 2437        | Puglia     | Coast/Lagoon | Urban        | Lombard           |
| 199 | Salapia, area conceria, US 2054        | Puglia     | Coast/Lagoon | Urban        | Lombard           |
| 199 | Salapia, area conceria, US 2211-2217   | Puglia     | Coast/Lagoon | Urban        | Lombard           |
| 199 | Salapia, area conceria, 8th-9th c.     | Puglia     | Coast/Lagoon | Urban        | Lombard           |
| 196 | Faragola, wastepit 61                  | Puglia     | Plain        | Rural, villa | Lombard           |
| 196 | Faragola, wastepit 66                  | Puglia     | Plain        | Rural, villa | Lombard           |
| 234 | Colle Castellano, Phase 3-4            | Molise     | Hill         | Urban        | Lombard           |
| 177 | San Vincenzo al Volturno, kitchen area | Molise     | Hill         | Monastery    | Lombard           |
| 101 | Supersano, loc. Scorpo                 | Puglia     | Plain        | Rural        | Byzantine         |
| 250 | Apigliano, 9th-10th c., pits           | Puglia     | Plain        | Rural        | Byzantine         |
| 250 | Apigliano, 10th-11th c., pits          | Puglia     | Plain        | Rural        | Byzantine         |
| 196 | Faragola, granary A7                   | Puglia     | Plain        | Rural, villa | Lombard           |
| 196 | Faragola, granary A8                   | Puglia     | Plain        | Rural, villa | Lombard           |

: List of Southern Italian sites with chronology EMA {#tbl-southern-ema-sites}

#### Assessing the difference {#sec-permanova-cereals}

In order to substantiate the proposed shift in cereal farming during the Early Medieval period, as discussed in both @sec-macroregional-differences-ubiquity and @sec-richness-macroregions, statistical validation is needed. Given the non-unimodal nature of the data and the use of presence/absence analysis, a robust choice is the application of a non-parametric test, such as PERMANOVA, on the Early Medieval botanical dataset. Before subjecting the data to the PERMANOVA analysis, it underwent the pre-processing steps outlined in @sec-case-study-richness-cereals-macroreg. To establish a baseline for comparison, the same PERMANOVA procedure was applied to the Roman dataset.

The code snippet provided below demonstrates the utilisation of the `adonis2()` function to perform the PERMANOVA calculation:

```{r}
#| code-line-numbers: true
#| message: false

# Example of how to use the function adonis()
set.seed(29) # <1>

Permanova.Cereals.R = adonis2(
  Bot_PA_data.R ~ Macroregion, # <2>
  data = Bot_PA_categ.R,
  permutations = 10000, # <3>
  method="jaccard" # <4>
)
```

1.  In order to get the same results, we set a seed.
2.  Formula specification.
3.  Number of random permutations.
4.  Distance metric.

```{r}
#| echo: false
Permanova.Cereals.EMA = adonis2(
  Bot_PA_data.EMA ~ Macroregion, 
  data = Bot_PA_categ.EMA,
  permutations = 10000, 
  method="jaccard"
)
```

```{r}
#| echo: false

Permanova_Results = data.frame(
  Phase = c("Roman", "Early Medieval"),
  R2 = c(round(Permanova.Cereals.R$R2[1], 2), round(Permanova.Cereals.EMA$R2[1],2)),
  p_value = c(Permanova.Cereals.R$`Pr(>F)`[1], Permanova.Cereals.EMA$`Pr(>F)`[1])
)
```

```{r}
#| echo: false
#| label: tbl-Permanova-Results
#| tbl-cap: "Results of the PERMANOVA for the Roman and Early Medieval phases."

kable(Permanova_Results, col.names = c("Phase",
                                       "R2",
                                       "p-value"),
      format = "html"
      ) %>% kable_minimal()

```

PERMANOVA analysis was performed on the Roman dataset using the variable 'Macroregion', indicating a lack of statistical significance in the calculated p-value, implying homogeneity in the dataset. However, the early Medieval dataset showed highly significant results (0\<p\<0.001) with 99.99% confidence. Due to insufficient samples from Southern Italy, PERMANOVA was not conducted on the Late Roman dataset. To verify the statistical significance of the PERMANOVA outcomes obtained using the EMA dataset, it is critical to ensure that the underlying assumptions are fulfilled, especially given our small sample sizes. We first examine the homogeneity of variances, determining the distances between group samples and centroids using the `betadisper()` function in the `vegan` package. If the variance is consistent, we accept the null hypothesis of no variation in dispersion between groups. To verify the statistical significance of the PERMANOVA outcomes obtained using the EMA dataset, it is critical to ensure that the underlying assumptions are fulfilled, especially given our small sample sizes. To assess variance, we can employ analysis of variance (ANOVA).

```{r}
#| echo: false
#| code-line-numbers: true
#| message: false

## BETADISPER

# Creating distance matrix for the R period
DistMat.R <- vegdist(Bot_PA_data.R, 
                       method="jaccard", 
                       na.rm=TRUE)

# Creating distance matrix for the EMA period
DistMat.EMA <- vegdist(Bot_PA_data.EMA, 
                       method="jaccard", 
                       na.rm=TRUE)

# Betadisper: distances of group samples from centroids
Betadisper.R <- betadisper(DistMat.R, 
                             Bot_PA_categ.R$Macroregion)
Betadisper.EMA <- betadisper(DistMat.EMA, 
                             Bot_PA_categ.EMA$Macroregion)

# Printing distances:
Betadisper.GroupDistances = data.frame(
Phase = c("Roman", "Early Medieval"),
"Northern Italy" = c(Betadisper.R$group.distances[1],Betadisper.EMA$group.distances[1]),
"Southern Italy" = c(Betadisper.R$group.distances[2],Betadisper.EMA$group.distances[2])
)
```

```{r}
#| echo: false
#| label: tbl-Betadisper-GroupDistances
#| tbl-cap: "Group distances from centroids."

kable(Betadisper.GroupDistances, 
      col.names=c("Phase","Northern Italy", "Southern Italy"),
      digits = 2) %>% kable_minimal()
```

```{r}
#| echo: false
#| message: false
# Checking that the distance from the centroids is not significant:
Anova.R = anova(Betadisper.R)
Anova.EMA = anova(Betadisper.EMA)

Anova_Betadisper_Results = data.frame(
  Phase = c("Roman", "Early Medieval"),
  p_value = c(Anova.R$`Pr(>F)`[1], Anova.EMA$`Pr(>F)`[1])
)
```

```{r}
#| echo: false
#| label: tbl-Anova-Betadisper-Results
#| tbl-cap: "p-values of the ANOVA on the betadisper for the Roman and Early Medieval phases."

kable(Anova_Betadisper_Results,
      col.names = c("Phase", "p-value")) %>% kable_minimal()

```

```{r}
#| echo: false
#| layout-ncol: 2
#| layout-nrow: 2
#| label: fig-betadisper
#| fig-cap: "Results of the betadisper() on the Roman and Early Medieval datasets."
#| fig-subcap: 
#| - "Roman - Groups and distances to centroids on the first two PCoA axes."
#| - "Roman - Boxplots of distances to centroids."
#| - "Early Medieval - Groups and distances to centroids on the first two PCoA axes."
#| - "Early Medieval - Boxplots of distances to centroids."


# Plotting the betadisper
# Plot 1
plot(Betadisper.R, 
     hull=FALSE, 
     ellipse=TRUE, 
     main="R - Betadisper plot", 
     col=c("#90a955", "#212529"))

# Plot 2
boxplot(Betadisper.R, 
        col="khaki4", 
        main="R - Betadisper plot",
        xlab="Macroregion")

# Plot 1
plot(Betadisper.EMA, 
     hull=FALSE, 
     ellipse=TRUE, 
     main="EMA - Betadisper plot", 
     col=c("#90a955", "#212529"))

# Plot 2
boxplot(Betadisper.EMA, 
        col="khaki4", 
        main="EMA - Betadisper plot",
        xlab="Macroregion")

```

The graphical representation through `betadisper()` plots (@fig-betadisper) illustrates a comparable distance from centroids for both `Northern Italy` and `Southern Italy` categories. Complementing this visual analysis, the ANOVA on `betadisper()` affirms the lack of significance (p-value exceeding the threshold), indicating homogeneity in group dispersions (@tbl-Anova-Betadisper-Results). This robust statistical foundation leads us to confidently affirm the results obtained from the PERMANOVA analysis, supporting the conclusion that there is a significant difference between the two groups of sites---Southern and Northern Italy---specifically in the realm of cereal farming during the Early Middle Ages.

Conversely, when the same tests were applied to Roman sites, the outcomes failed to delineate a significant separation between the two groups. This corroborates the notion that, during the Roman age, there was not a noteworthy difference in the types of cereals cultivated between Northern and Southern Italy.

#### Quantifying the separation: nMDS {#sec-nMDS-Cereals style="text-align:justify"}

In the investigation of the Northern and Southern Italian early medieval cereals dataset (@sec-permanova-cereals), an additional approach involves quantifying the distance between groups of sites for both the Roman and Early Middle Ages. For this purpose, the chosen dimensionality reduction algorithm is the *non-metric multidimensional scaling* (nMDS) available in the `vegan` library for R. A detailed explanation of this algorithm is provided in @sec-met-nmds. The code snippet provided below exemplifies the utilisation of the `metaMDS()` function to perform the nMDS.

```{r}
#| eval: false

set.seed(29) # <1> 

nMDS <- metaMDS(Dataset, # <2> 
                   k=1, # <3>
                   distance = "jaccard") # <4>
```

1.  Again, we set a seed because these computations are random.
2.  We choose the dataframe on which to perform the nMDS.
3.  The number of dimensions chosen, in this case 1.
4.  Distance metric.

To ensure the integrity of computations and avoid potential fallacies, the macroregion `Central Italy` and the chronologies `LR` (Late Roman) and `Ma` (11^th^ century onwards) have been excluded from this analysis. This cautious approach is taken due to the uneven distribution of the group of samples. The nMDS has been executed with a reduction to a single dimension, leveraging KDE plots for effective visualization of results. Reducing the dimension to one facilitates distance calculations. In @fig-nMDS-1D-macroregion (a), the nMDS results for the Roman cereals presence/absence dataset are presented. As previously highlighted, the non-significant outcome of the PERMANOVA aligns with the shorter Wasserstein distance, as calculated using the `wasserstein1d()` function from the `transport` library. Both chronologies exhibit an overlap in the curves, with the Roman age displaying a more substantial overlap, indicative of higher similarity within the group of samples. The EMA groups' overlap (@fig-nMDS-1D-macroregion, b) can be attributed to the fact that the presence of free-threshing wheats and barley is not exclusive to Southern Italian sites; these grains are prevalent in the North as well. The key distinction lies in the South, where 'noble' grains are not cultivated in tandem with other grains. The graph for the EMA chronology reveals a clearer separation of macroregional groups, with minor overlaps. Additionally, the graph highlights variability in the Northern Italian dataset, a characteristic further underscored by outliers in the boxplots in @fig-nMDS-1D-macroregion.

```{r}
#| code-line-numbers: true
#| echo: false
#| output: false

library(ggpubr)
# Perform the metaMDS to 1D for Df_Cereals_R and Df_Cereals_EMA 
mds_R <- metaMDS(Bot_PA_data.R, k=1, distance = "jaccard")
mds_EMA <- metaMDS(Bot_PA_data.EMA, k=1, distance = "jaccard")

# Add the Macroregion data to the metaMDS results for both dataframes
mds_df_R <- data.frame(mds_R$points, Macroregion = Bot_PA_categ.R$Macroregion)
mds_df_EMA <- data.frame(mds_EMA$points, Macroregion = Bot_PA_categ.EMA$Macroregion)

# Create dataframes to calculate wasserstein distance
library(transport)

MDS_Scores_R_SI <- (subset(mds_df_R, Macroregion=="Southern Italy"))$MDS1
MDS_Scores_R_NI <- (subset(mds_df_R, Macroregion=="Northern Italy"))$MDS1

MDS_Scores_EMA_SI <- (subset(mds_df_EMA, Macroregion=="Southern Italy"))$MDS1
MDS_Scores_EMA_NI <- (subset(mds_df_EMA, Macroregion=="Northern Italy"))$MDS1

       
# Create the plots
mds_R.plot <- ggplot(
  data=mds_df_R, 
  aes(x=MDS1, 
      group=Macroregion, 
      color=Macroregion, 
      fill=Macroregion)) +
    geom_density(adjust=1.5, alpha=.2) +
      geom_vline(aes(xintercept=mean(MDS_Scores_R_SI)),
            color="#90a955", linetype="dashed", linewidth=.8)+ #South
      geom_vline(aes(xintercept=mean(MDS_Scores_R_NI)),
            color="#212529", linetype="dashed", linewidth=.8)+ #North
  scale_fill_manual(values=c("#212529","#90a955"))+
  scale_color_manual(values=c("#212529","#90a955"))+
  theme_pubclean()+
  theme(legend.position = "none")+
    labs(
      title="Roman age",
      caption = paste0(
      "PERMANOVA: p > 0.05 \n",
      "Wasserstein distance: ", round(
      wasserstein1d(MDS_Scores_R_SI,MDS_Scores_R_NI),2
      )))

mds_EMA.plot <- ggplot(
  data=mds_df_EMA, 
  aes(x=MDS1, group=Macroregion, color=Macroregion, fill=Macroregion)
  ) +
  scale_alpha(guide = 'none')+
  geom_density(adjust=1.5, alpha=.2) +
  geom_vline(
    aes(xintercept=mean(MDS_Scores_EMA_SI), color="mean"),
    color="#90a955", linetype="dashed", linewidth=.8)+ #South
  geom_vline(
    aes(xintercept=mean(MDS_Scores_EMA_NI)),
    color="#212529", linetype="dashed", linewidth=.8)+ #North
  scale_fill_manual(values=c("#212529","#90a955"))+
  scale_color_manual(values=c("#212529","#90a955"))+
  theme_pubclean()+
    labs(
      title="EMA",
      caption = paste0(
      "PERMANOVA: p < 0.0001 \n",
      "Wasserstein distance: ", round(
      wasserstein1d(MDS_Scores_EMA_SI,MDS_Scores_EMA_NI),2
      )))+
  theme(legend.position = "right")


mds_R.boxplot <- ggplot(mds_df_R, aes(x=Macroregion, y=MDS1, fill=Macroregion)) + 
    geom_boxplot(alpha=.2)+
  scale_fill_manual(values=c("#212529","#90a955"))+
  scale_color_manual(values=c("#212529","#90a955"))+
  theme_pubclean()+
    labs(
      title="Roman Age")+
  theme(legend.position = "none")

mds_EMA.boxplot <- ggplot(mds_df_EMA, aes(x=Macroregion, y=MDS1, fill=Macroregion)) + 
    geom_boxplot(alpha=.2)+
  scale_fill_manual(values=c("#212529","#90a955"))+
  scale_color_manual(values=c("#212529","#90a955"))+
  theme_pubclean()+
    labs(
      title="EMA")+
  theme(legend.position = "right")

```

```{r}
#| echo: false
#| layout-ncol: 2
#| label: fig-nMDS-1D-macroregion
#| fig-cap: "Results of the nMDS on the Roman and Early Medieval datasets."
#| fig-subcap: 
#| - "Roman - KDE curves of the nMDS. The group mean is represented by the dashed line."
#| - "Early Medieval - KDE curves of the nMDS. The group mean is represented by the dashed line."
#| - "Roman - Boxplots of nMDS scores."
#| - "Early Medieval - Boxplots of nMDS scores."

mds_R.plot
mds_EMA.plot
mds_R.boxplot
mds_EMA.boxplot

```

```{r}
#| echo: false
#| label: fig-stressplots-nmds
#| layout-ncol: 2
#| fig-cap: "nMDS stressplots. Stress values slightly change everytime we run the function, as it is an iterative algorithm."
#| fig-subcap: 
#|  - "Roman dataset. Stress value = 0.27"
#|  - "Early Medieval dataset. Stress value = 0.31"

stressplot(mds_R, p.col="khaki4", l.col="#212529")
stressplot(mds_EMA, p.col="khaki4", l.col="#212529")

```

### Legumes

```{r}
#| echo: false

####################
## LEGUMES 
####################

# Convert to list
Legumes_reg.list <- list(
    Leg_Found = Legumes$Seed_Count,
    Leg_Tot = 7,
    RC_ID = as.factor((interaction(Legumes$Chronology, 
                                   Legumes$Macroregion)))
   )

Legumes_reg.list$RC_ID <- droplevels(Legumes_reg.list$RC_ID)

```

```{r}
#| echo: false
#| eval: false
#| code-fold: true

# Create a binomial model, where N is 7 because that is the total number of minor 
# grains studied in this thesis
m_leg_reg <- ulam(
    alist(
        Leg_Found ~ dbinom( 7 , p ),
        logit(p) <- RegChr[RC_ID],
        RegChr[RC_ID] ~ dnorm(0,1.5)
    ), data=Legumes_reg.list , chains=4
    )

saveRDS(m_leg_reg, "stan_models/m_leg_reg.rds")

```

```{r}
#| echo: false
#| warning: false
#| message: false
#| output: false

m_leg_reg <- readRDS("stan_models/m_leg_reg.rds")

m_leg_reg.df <- m_leg_reg %>%
  spread_draws(RegChr[RC_ID])

m_leg_reg.df %>% mutate(Region = case_when(
  RC_ID >= 9 &  RC_ID <=12 ~ "SI",
  RC_ID >= 1 & RC_ID <= 4 ~ "CI",
  RC_ID >= 5 & RC_ID <= 8  ~ "NI"
))  %>% mutate(Chrono = case_when(
    RC_ID == 4 |  RC_ID == 8 | RC_ID==12  ~ "R",
    RC_ID == 2 |  RC_ID == 6 | RC_ID == 10  ~ "LR",
    RC_ID == 1 |  RC_ID == 5 | RC_ID == 9  ~ "EMA",
    RC_ID == 3 |  RC_ID == 7 | RC_ID == 11 ~ "Ma"
)) -> m_leg_reg.df

m_leg_reg.plot <- ggplot(
  data = m_leg_reg.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(RegChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_leg_reg.df$RegChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(factor(Region, levels=c("SI", "CI", "NI")) ~ ., scales = "free") +
  labs(
    title = "Legumes",
    subtitle = "Macroregional distribution",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line."
  )

```

After comprehensively examining the presence and richness of cereals, our focus now turns towards the scrutiny of legume distribution across the three Italian sub-regions, stratified by chronology. While we will not go into the technical details of constructing this hierarchical model, the methodology is the same as that described above for cereals, using identical predictors and priors. A clear trend is illustrated in the accompanying figure (@fig-bayes-glm-legumes-macroregion). As per the chronologies, Northern Italy persistently exhibits the most reliable credible intervals, with Southern Italy (except the 11^th^ century samples) closely following suit. Conversely, Central Italy displays wider ranges, indicating greater uncertainty in the estimates. From the Roman period (mean = 0.15) to the early medieval and medieval period (means = 0.30/0.29), the estimated means rise in the north. There is a marked decrease from the Roman (mean = 0.24) to the late Roman (mean = 0.09) era in southern Italy, followed by an increase during the early medieval (mean = 0.23) and medieval (mean = 0.37, though with an HDI varying between 0.29-0.46). Similarly, the central Italian area demonstrates a steady increase in legumes farming, with a mean of 0.19 in the Roman epoch and reaching its peak at 0.60 in the 11^th^ century samples (though with a 0.50 credible interval spanning from 0.55-0.66). The importance of legumes in this sub-region aligns with expectations, considering the hilly landscape and the historical agricultural focus of this area.

```{r}
#| echo: false
#| label: fig-bayes-glm-legumes-macroregion
#| fig-cap: "Bayesian probability estimates for legumes, divided by macroregion and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."

m_leg_reg.plot

```

### Fruits

Binomial models have been systematically developed for a range of fruit categories, following the same logical approach used in other macro-regional models and utilizing the same priors. The models' specific formulas are not repeated here, but they are in line with the established methodology. The results for the two most important cash crops, grapes and olives, are of particular interest. The analysis reveals considerable variability in the findings for these crops, denoting a degree of uncertainty in the estimates. The scope of our investigation is not limited to marketable crops, as we have also assessed the diversity of wild and domestic fruits and nuts, providing an in-depth exploration of heterogeneous fruit categories across Italian sub-regions and over different time periods.

#### Grape

The models assessing the occurrence of grapes exhibit notable dispersion, leading to large credible intervals. Basing our interpretation on the 0.50 HDIs, in the Roman period, grapes were markedly more prevalent in the southern regions (0.76-0.85), aligning with expectations given their warmer climates and longstanding tradition of grape cultivation. Central Italy also displayed widespread cultivation, albeit with a larger interval (0.61-0.82). The North showed a notable presence as well, with an HDI ranging between 0.62-0.72. However, in the Late Roman period, credible intervals expanded significantly, especially in Southern and Central Italy. In the South, there was a substantial decrease in the HDI, ranging between 0.32 and 0.50. Contrastingly, Central Italy displayed an HDI in a higher probability range, spanning between 0.72-0.86. In the North, the range remained similar to the previous phase, with an estimated mean around the overall mean of 0.65. Transitioning to the Early Medieval phase, the occurrence of grapes experienced a renewed increase in the South (range: 0.50-0.65). However, Central Italy and the North witnessed a decline in their HDIs. Particularly in Northern Italian samples, the estimated mean (0.60) dropped below the Roman maximum of 0.66. Notably, the North demonstrated minimal variation in means across the four phases, with the 11^th^-century samples returning a mean of 0.65. In Southern and Central Italy, broad credible intervals limit the provision of valuable information.

```{r}
#| echo: false

Grape_reg.list <- list(
    Grape_Found = Grape$Present,
    RC_ID = as.factor((interaction(Grape$Chronology, 
                                   Grape$Macroregion)))
   )

Grape_reg.list$RC_ID <- droplevels(Grape_reg.list$RC_ID)
```

```{r}
#| echo: false
#| eval: false

m_grape_reg <- ulam(
    alist(
        Grape_Found ~ dbinom( 1 , p ),
        logit(p) <- RegChr[RC_ID],
        RegChr[RC_ID] ~ dnorm(0,1.5)
    ), data=Grape_reg.list , chains=4
    )

saveRDS(m_grape_reg, "stan_models/m_grape_reg.rds")


```

```{r}
#| echo: false
#| warning: false
#| message: false
#| output: false

m_grape_reg <- readRDS("stan_models/m_grape_reg.rds")

m_grape_reg.df <- m_grape_reg %>%
  spread_draws(RegChr[RC_ID])

m_grape_reg.df %>% mutate(Region = case_when(
  RC_ID >= 9 &  RC_ID <=12 ~ "SI",
  RC_ID >= 1 & RC_ID <= 4 ~ "CI",
  RC_ID >= 5 & RC_ID <= 8  ~ "NI"
))  %>% mutate(Chrono = case_when(
    RC_ID == 4 |  RC_ID == 8 | RC_ID==12  ~ "R",
    RC_ID == 2 |  RC_ID == 6 | RC_ID == 10  ~ "LR",
    RC_ID == 1 |  RC_ID == 5 | RC_ID == 9  ~ "EMA",
    RC_ID == 3 |  RC_ID == 7 | RC_ID == 11 ~ "Ma"
)) -> m_grape_reg.df

m_grape_reg.plot <- ggplot(
  data = m_grape_reg.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(RegChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_grape_reg.df$RegChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(factor(Region, levels=c("SI", "CI", "NI")) ~ ., scales = "free") +
  labs(
    title = "Grape",
    subtitle = "Macroregional distribution",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line."
  )

```

```{r}
#| echo: false
#| label: fig-bayes-glm-grape-macroregion
#| fig-cap: "Bayesian probability estimates for grape, divided by macroregion and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."

m_grape_reg.plot

```

#### Olives

Similar to grapes, the models for olive occurrence present credible intervals of notable magnitude, posing challenges to reliable interpretations. Relying on the 0.50 HDIs for insights, discernible trends emerge. Notably, a pronounced distinction between the South and North of Italy is evident, primarily attributed to climatic factors, as will be further elucidated in subsequent models within this chapter. In the Roman period, the HDI for the South ranges between 0.83 and 0.90, underscoring a robust presence of olives. In contrast, the North displays a considerably lower HDI of 0.30-0.40, reflecting a lesser prevalence. The scarcity of sites in Roman Central Italy results in a broad 0.50 HDI (0.46-0.70), and the 0.99 credible interval for this region is exceptionally dispersed (0.12-0.91), rendering it unreliable. Moving to the Late Roman period, the HDIs remain expansive, especially for the Southern (0.59-0.77) and Central (0.50-0.71) regions. In the North, however, the range narrows to 0.19-0.25, suggesting a more consistent pattern. As we transition to the Early Medieval period, the presence of olives diminishes across all regions, with the HDI ranging between 0.50-0.65 in the South, 0.17-0.31 in the Center, and 0.05-0.1 in the North, where the dataset is more coherent and substantial. The declining trend persists in the post-11^th^-century samples, although this period exhibits increased variability across sites.

```{r}
#| echo: false


# Convert to list
Olive_reg.list <- list(
    Olive_Found = Olives$Present,
    RC_ID = as.factor((interaction(Olives$Chronology, 
                                   Olives$Macroregion)))
   )

Olive_reg.list$RC_ID <- droplevels(Olive_reg.list$RC_ID)
  
```

```{r}
#| echo: false
#| eval: false

m_olive_reg <- ulam(
    alist(
        Olive_Found ~ dbinom( 1 , p ),
        logit(p) <- RegChr[RC_ID],
        RegChr[RC_ID] ~ dnorm(0,1.5)
    ), data=Olive_reg.list , chains=4
    )

saveRDS(m_olive_reg, "stan_models/m_olive_reg.rds")

```

```{r}
#| echo: false
#| warning: false
#| message: false
#| output: false

m_olive_reg <- readRDS("stan_models/m_olive_reg.rds")

m_olive_reg.df <- m_olive_reg %>%
  spread_draws(RegChr[RC_ID])

m_olive_reg.df %>% mutate(Region = case_when(
  RC_ID >= 9 &  RC_ID <=12 ~ "SI",
  RC_ID >= 1 & RC_ID <= 4 ~ "CI",
  RC_ID >= 5 & RC_ID <= 8  ~ "NI"
))  %>% mutate(Chrono = case_when(
    RC_ID == 4 |  RC_ID == 8 | RC_ID==12  ~ "R",
    RC_ID == 2 |  RC_ID == 6 | RC_ID == 10  ~ "LR",
    RC_ID == 1 |  RC_ID == 5 | RC_ID == 9  ~ "EMA",
    RC_ID == 3 |  RC_ID == 7 | RC_ID == 11 ~ "Ma"
)) -> m_olive_reg.df

m_olive_reg.plot <- ggplot(
  data = m_olive_reg.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(RegChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_olive_reg.df$RegChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(factor(Region, levels=c("SI", "CI", "NI")) ~ ., scales = "free") +
  labs(
    title = "Olive",
    subtitle = "Macroregional distribution",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line."
  )

```

```{r}
#| echo: false
#| label: fig-bayes-glm-olive-macroregion
#| fig-cap: "Bayesian probability estimates for olive, divided by macroregion and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."

m_olive_reg.plot

```

#### Nuts

The model examining archaeobotanical remains of nuts does not show very large variations across various regions and chronological phases. In the Roman period, the estimated occurrence of nuts in the Southern regions spans from 0.14 to 0.19. Central Italy presents a challenge for interpretation due to an extremely large credible interval, which in the highest density region ranges from 0.11 to 0.26, indicating substantial uncertainty in the estimates. Moving to the Northern regions, a relatively narrower range is observed, with an estimated occurrence between 0.24 and 0.30. Transitioning to the Late Roman period, the Southern regions witness a decline in the presence of nuts, with an estimated range dwindling to 0.03 to 0.06. In Central Italy, a broad credible interval persists, spanning from 0.17 to 0.28. Meanwhile, the Northern regions maintain a similar estimated range as observed in the Roman phase, hovering between 0.25 and 0.30. As we move into the Early Medieval period, the South sees a continuity in the occurrence of nuts, remaining relatively consistent with the Late Roman phase. In Central Italy, the estimated range shifts to 0.11 to 0.19. Northern Italy reports an estimated range of 0.19 to 0.24, suggesting a slight fluctuation. In the 11^th^ century, the Southern and Central regions exhibit very large credible intervals, rendering the estimates less reliable. However, the estimated mean aligns closely with the overall mean of 0.15 in both regions. The North, on the other hand, reports an estimated range of 0.14 to 0.23, suggesting a persistence of nut presence in this phase.

```{r}
#| echo: false

####################
## NUTS
####################

# Convert to list
Nuts_reg.list <- list(
    Nuts_Found = Nuts$Seed_Count,
    Nuts_Tot = 3,
    RC_ID = as.factor((interaction(Nuts$Chronology, 
                                   Nuts$Macroregion)))
   )

Nuts_reg.list$RC_ID <- droplevels(Nuts_reg.list$RC_ID)

```

```{r}
#| echo: false
#| eval: false

m_nuts_reg <- ulam(
    alist(
        Nuts_Found ~ dbinom( 3 , p ),
        logit(p) <- RegChr[RC_ID],
        RegChr[RC_ID] ~ dnorm(0,1.5)
    ), data=Nuts_reg.list , chains=4
    )

saveRDS(m_nuts_reg, "stan_models/m_nuts_reg.rds")


```

```{r}
#| echo: false
#| warning: false
#| message: false
#| output: false

m_nuts_reg <- readRDS("stan_models/m_nuts_reg.rds")

m_nuts_reg.df <- m_nuts_reg %>%
  spread_draws(RegChr[RC_ID])

m_nuts_reg.df %>% mutate(Region = case_when(
  RC_ID >= 9 &  RC_ID <=12 ~ "SI",
  RC_ID >= 1 & RC_ID <= 4 ~ "CI",
  RC_ID >= 5 & RC_ID <= 8  ~ "NI"
))  %>% mutate(Chrono = case_when(
    RC_ID == 4 |  RC_ID == 8 | RC_ID==12  ~ "R",
    RC_ID == 2 |  RC_ID == 6 | RC_ID == 10  ~ "LR",
    RC_ID == 1 |  RC_ID == 5 | RC_ID == 9  ~ "EMA",
    RC_ID == 3 |  RC_ID == 7 | RC_ID == 11 ~ "Ma"
)) -> m_nuts_reg.df

m_nuts_reg.plot <- ggplot(
  data = m_nuts_reg.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(RegChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_nuts_reg.df$RegChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(factor(Region, levels=c("SI", "CI", "NI")) ~ ., scales = "free") +
  labs(
    title = "Nuts",
    subtitle = "Macroregional distribution",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line."
  )

```

```{r}
#| echo: false
#| label: fig-bayes-glm-nuts-macroregion
#| fig-cap: "Bayesian probability estimates for nuts, divided by macroregion and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."

m_nuts_reg.plot

```

#### Domestic and wild fruits

The model for the occurrence of domestic fruits performed better than the previous fruits models. In Southern Italy during the Roman period, the probability of domestic fruits being present ranges from an estimated 0.19 to 0.24 with a 0.50 credible interval. In the Roman Centre, it is estimated that the presence of domestic fruits was more modest, with estimates ranging from 0.03 to 0.07. During the Late Roman era, there was a decline in the occurrence of domestic fruit in the Southern regions, which was approximately estimated between 0.04 to 0.07. In contrast, there was a mild improvement in domestic fruit presence in the Late Roman Centre which estimated to range from 0.05 to 0.09. Meanwhile, the North sustained a similar range as the previous phase, which was between 0.14-0.16. Moving into the Early Medieval period, the Southern region continues to exhibit domestic fruit occurrences, ranging from 0.06 to 0.09. In the Early Medieval Centre, a similar presence is noted, with estimates ranging from 0.04 to 0.07. The Northern region reports domestic fruit occurrences, with estimates between 0.12 and 0.14. By the 11^th^ century, the Southern region sustains its presence of domestic fruit, estimated to be between 0.07 to 0.17. Central Italy also sees continued occurrences, with estimates ranging between 0.09 and 0.17. In the North, there is a significant presence of domestic fruits observed, with estimates ranging from 0.20 to 0.26. It is noteworthy that the larger HDIs during this phase are due to a smaller number of observations, thereby introducing increased uncertainty.

The berries model demonstrates a minor dietary impact from these predominantly wild fruits during the 1^st^ millennium CE. One notable trend is discernible, whereby Southern and Central Italy exhibit lower HDIs falling below the mean of 0.07 from the Roman phase through the Early Medieval period. Reliable results, attributed to smaller HDIs, indicate a consistent range between 0.09 and 0.16. The small presence observed in this area is in contrast to the consumption pattern observed in Northern Italy. Upon further investigation into the 11^th^ century, a clear increase in the presence of berries can be seen across all sub-regions. In the Southern territories, HDIs increase from 0.03 to 0.09, reflecting a higher density of berry findings. Central Italy shows an increase in the prevalence of berries, reaching HDI values between 0.07 and 0.14. In contrast, Northern Italy experiences the largest growth, with HDI values peaking between 0.27 and 0.34, indicative of a significant surge in the utilization of berries during this period. In contrast, Northern Italy experiences the largest growth, with HDI values peaking between 0.27 and 0.34, indicative of a substantial rise in the utilisation of berries during this period.

```{r}
#| echo: false

####################
## Domestic FRUITS 
####################

# Convert to list
DomFruit_reg.list <- list(
    DF_Found = DomFruit$Seed_Count,
    DF_Tot = 7,
    RC_ID = as.factor((interaction(DomFruit$Chronology, 
                                   DomFruit$Macroregion)))
   )

DomFruit_reg.list$RC_ID <- droplevels(DomFruit_reg.list$RC_ID)

```

```{r}
#| echo: false
#| eval: false

m_dfruit_reg <- ulam(
    alist(
        DF_Found ~ dbinom( 7 , p ),
        logit(p) <- RegChr[RC_ID],
        RegChr[RC_ID] ~ dnorm(0,1.5)
    ), data=DomFruit_reg.list , chains=4
    )

m_berries_reg <- ulam(
    alist(
        Berries_Found ~ dbinom( 9 , p ),
        logit(p) <- RegChr[RC_ID],
        RegChr[RC_ID] ~ dnorm(0,1.5)
    ), data=Berries_reg.list , chains=4
    )

saveRDS(m_dfruit_reg, "stan_models/m_dfruit_reg.rds")
saveRDS(m_berries_reg, "stan_models/m_berries_reg.rds")


```

```{r}
#| echo: false
#| warning: false
#| message: false
#| output: false

m_berries_reg <- readRDS("stan_models/m_berries_reg.rds")

m_berries_reg.df <- m_berries_reg %>%
  spread_draws(RegChr[RC_ID])

m_berries_reg.df %>% mutate(Region = case_when(
  RC_ID >= 9 &  RC_ID <=12 ~ "SI",
  RC_ID >= 1 & RC_ID <= 4 ~ "CI",
  RC_ID >= 5 & RC_ID <= 8  ~ "NI"
))  %>% mutate(Chrono = case_when(
  RC_ID == 4 |  RC_ID == 8 | RC_ID==12  ~ "R",
  RC_ID == 2 |  RC_ID == 6 | RC_ID == 10  ~ "LR",
  RC_ID == 1 |  RC_ID == 5 | RC_ID == 9  ~ "EMA",
  RC_ID == 3 |  RC_ID == 7 | RC_ID == 11 ~ "Ma"
)) -> m_berries_reg.df

m_berries_reg.plot <- ggplot(
  data = m_berries_reg.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(RegChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_berries_reg.df$RegChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(factor(Region, levels=c("SI", "CI", "NI")) ~ ., scales = "free") +
  labs(
    title = "Berries",
    subtitle = "Macroregional distribution",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line."
  )


m_dfruit_reg <- readRDS("stan_models/m_dfruit_reg.rds")

m_dfruit_reg.df <- m_dfruit_reg %>%
  spread_draws(RegChr[RC_ID])

m_dfruit_reg.df %>% mutate(Region = case_when(
  RC_ID >= 9 &  RC_ID <=12 ~ "SI",
  RC_ID >= 1 & RC_ID <= 4 ~ "CI",
  RC_ID >= 5 & RC_ID <= 8  ~ "NI"
))  %>% mutate(Chrono = case_when(
  RC_ID == 4 |  RC_ID == 8 | RC_ID==12  ~ "R",
  RC_ID == 2 |  RC_ID == 6 | RC_ID == 10  ~ "LR",
  RC_ID == 1 |  RC_ID == 5 | RC_ID == 9  ~ "EMA",
  RC_ID == 3 |  RC_ID == 7 | RC_ID == 11 ~ "Ma"
)) -> m_dfruit_reg.df

m_dfruit_reg.plot <- ggplot(
  data = m_dfruit_reg.df,
  aes(
    y = (factor(Chrono, levels = c("R", "LR", "EMA", "Ma"))),
    x = inv_logit(RegChr)
  )
) +
  stat_interval(
    .width = c(.50, .80, .95, .99),
    linewidth = 3
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(m_dfruit_reg.df$RegChr)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_color_brewer(palette = "Greys") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +
  facet_grid(factor(Region, levels=c("SI", "CI", "NI")) ~ ., scales = "free") +
  labs(
    title = "Domestic Fruits",
    subtitle = "Macroregional distribution",
    x = "Probability",
    y = "Chronology",
    color = "Credible interval",
    caption = "The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line."
  )

```

```{r}
#| echo: false
#| label: fig-bayes-glm-domfruits-macroregion
#| fig-cap: "Bayesian probability estimates for domestic fruits, divided by macroregion and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."

m_dfruit_reg.plot

```

```{r}
#| echo: false
#| label: fig-bayes-glm-berries-macroregion
#| fig-cap: "Bayesian probability estimates for domestic fruits, divided by macroregion and chronology.\nThe prediction estimates are produced with a GLM and weakly informative priors. Credible intervals are provided."

m_berries_reg.plot

```

## Altitude {style="text-align: justify;"}

The probability of the occurrence of the most prevalent cereal remains can be modelled against site elevation in the four time periods examined. The distribution of archaeobotanical remains across sites is uneven. During the Roman age, the majority of investigated sites are situated between 0 and 100 MSL. However, there is a rise in the number of sites at higher elevations in the subsequent phases. Though this may indicate a change in settlement patterns, it is not the focus of this study. Nonetheless, mapping the distribution of sites according to elevation could yield valuable information. Due to the time consuming nature of the process, it was not possible to produce elevation models for all the plants surveyed. Therefore, we selected only those plants that showed susceptibility to altitude-based positive or negative effects or were economically significant. Cereal crops were given priority. As not all cereals are suitable for cultivation at high altitudes, it was considered more appropriate to model them independently instead of categorising them into 'noble' and 'minor' grains. For reference, the breakdown of site elevations studied during the four chronologies can be found in @fig-bot-sites-elevation.

```{r}
#| echo: false

# Load dataset
bot_altitude <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/bot_altitude.csv", header=TRUE, sep=";")

# All elevations already > 0

# Convert to PA
bot_altitude[,c(14:ncol(bot_altitude))] <- decostand(bot_altitude[,c(14:ncol(bot_altitude))], method = "pa")
bot_altitude[is.na(bot_altitude)] <- 0

# Create a chronology table for the map
bot_altitude.chronotable <- table(factor(bot_altitude$Chronology, levels = chrono_levels))
```

```{r}
#| echo: false
#| fig-height: 8
#| label: fig-bot-sites-elevation
#| fig-cap: "Distribution of sites at different elevations. The site density has been scaled to facilitate comparison between phases."

bot_altitude %>% 
  ggplot(aes(x=site_altitude/1000)) +
  geom_histogram(bins=80, alpha=.6, aes(y = after_stat(ndensity)) )+ 
  geom_density(aes(y=after_stat(ndensity)), adjust=0.3, color = "red4", linewidth=0.75)+
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1,
                                        colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="Density",
       x="Altitude (km)",
       title="Sites distribution",
       caption="Density of sites scaled from 0 to 1."
       )+
  facet_grid(factor(Chronology, levels=chrono_levels)~.)



```

### Model specification and priors

The previous models used an interaction index since we were dealing with categorical variables. However, in this scenario, we have a categorical and numerical variable as we focus on the impact of altitude on plant presence. The DAG for this case still displays Chronology as a collider, similar to the prior situation. Certainly, time period affects both the likelihood of a plant's existence and the elevation of sites. As demonstrated in @fig-bot-sites-elevation, the spread of sites varies among different chronological phases. It is unclear if this is an actual pattern or just one present in our data, but we must make chronology adjustments.

```{r}
#| echo: false
#| label: fig-altitude-dag-plants
#| fig-cap: "The DAG that represents the relationship between Chronology, Altitude, and the presence of plants in the study. Chronology is shown as a collider variable, and its influence on NISP is mediated through Altitude. To block the backdoor path between Chronology and Plant_Present, the dataset is stratified by Chronology."

DAG_altitude <- dagitty('dag {
Plant_Present [outcome]
Chronology [collider,dagitty.stratum="1"]
Altitude [exposure,dagitty.stratum="2"]
Chronology -> Plant_Present
Chronology -> Altitude
Altitude -> Plant_Present
}')

DAG_altitude <- tidy_dagitty(DAG_altitude)

ggdag_paths(DAG_altitude, 
      text = FALSE, 
      use_labels = "name", 
      shadow = TRUE) +
  theme_dag(base_size = 14)+
  theme(legend.position = "none", strip.text = element_blank())+
  scale_color_manual(values = "#0072B2", na.value = "grey80") + 
  scale_fill_manual(values = "#0072B2", na.value = "grey80")+
   ggraph::scale_edge_color_manual(values = "#0072B2", na.value = "grey80")

```

Creating a Bayesian hierarchical model to predict the presence of a particular cereal taxon at different elevations is comparable to the binomial models discussed earlier. Since we are only modelling individual taxa, we are dealing with a Bernoulli distribution (in which the number of trials is fixed at 1). Furthermore, we intend to stratify the models by chronology, just as we did previously. For this purpose, we introduce two parameters: a varying intercept $\alpha$ that carries the chronology index ${[ChrID]}$ (i.e. Roman = 1, Late Roman = 2, etc.), and a slope $\beta$ that is multiplied by the elevation of the $i$-th site $Alt_{i}$. The slope parameter is included to ensure that a change in elevation is reflected in the predicted probability. Both parameters have a weakly informative prior (with a mean of 0 and a standard deviation of 1.5) introduced to make the possible outcomes (present/absent) equally likely in the absence of data. The prior predictive simulation in @fig-prior-pred-cereals-altitude visually demonstrates the effect of these priors, with probabilities piling up on both 0 and 1. The figures can be interpreted in a comparable manner to the previous ones, which did not incorporate numerical predictors. The x-axis displays elevation expressed in kilometers, while the y-axis presents the probability of discovering a distinct cereal. Similar to previous plots, estimates can be identified across various credible intervals, where wider intervals convey greater uncertainty in the estimation (owing to limited sample sizes or prominent variability in the data observed). For example, it is evident from each plot that the credible interval widens with increasing elevation. In fact, most of the sites examined in @fig-bot-sites-elevation are situated at lower elevations. The 0.50 HDI, which provides the most reliable probability range, is represented by the darkest shade in the middle of the curves. The following formula shows the components of this model, where the mean probability $p_{i}$ is modelled by a logit link:

$$
P_{i} \sim Bernoulli(\bar{p}_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + \beta_{[ChrID]}\cdot Alt_{i}
$$

$$
\alpha_{ChrID} \sim Normal(0,1.5)
$$

$$
\beta_{ChrID} \sim Normal(0,1.5)
$$

```{r}
#| echo: false
#| label: fig-prior-pred-cereals-altitude
#| fig-cap: "Prior predictive simulation for the altitude models used in this section."

# Prior predictive simulation:
simplehist(rbern(1000, 
                  inv_logit(
                    rnorm(1e4, 0, 1.5)+rnorm(1e4, 0, 1.5)*sample(bot_altitude$site_altitude/1000, size=1e4, replace=T)
    )
                  ),
           xlab="Present", 
  main="Prior Predictive Simulation",
           col=rangi2)
```

### Cereals

As planned, we concentrated on modelling the presence of particular types of cereal at varying elevations and chronological phases. This decision was influenced by our interest in economically significant plants and the fact that certain cereal species, such as rye, are more resilient to low temperatures. This makes elevation a crucial factor in farming strategies. The models are classified based on chronology and varying elevations, while acknowledging the significance of certain cultural factors such as geographical area and context type. However, these are not taken into account as having an excessive number of subsets with a relatively small dataset poses a risk. Therefore, we can examine the estimated patterns throughout the entire peninsula. Free-threshing wheats, which are likely the most cultivated cereals in Italy, demonstrate a robust presence in all four chronological phases at any altitude, with the likelihood of their occurrence gradually increasing towards the early middle ages. It is evident that there is no noticeable trend in the prediction curve, and there appears to be no correlation between site elevation and this cereal taxon. Whether it was cultivated everywhere or imported, it is impossible to determine with this dataset. However, the mere presence of this information remains significant. On the contrary, barley displays more compelling patterns unlike free-threshing wheats. During the Roman period, and particularly in the Late Roman era, there is a notable correlation between the presence of barley and a heightened elevation quota. If the estimated occurrence at sea level is approximately 0.4 (which is still a significant contribution), at around 1100-1200 MSL the prediction increases to a probability of 0.90. This correlation appears to remain strong during the early medieval period, with probabilities ranging from 0.70 (at sea level) to 1. The high probabilities also reflect the significance of this cereal in early medieval agriculture. Conversely, in the samples after the 11^th^ century, the curve seems to be flat, suggesting no correlation and exhibiting greater uncertainty in the data. Additionally, the small sample size is apparent in the graph, which terminates predictions at approximately 450 MSL due to a lack of available data beyond that altitude (refer to @fig-bot-sites-elevation). There is a chronological shift evident in the estimated probabilities for emmer, although during the Roman and Late Roman periods there is higher uncertainty due to wide HDIs, particularly at high elevations. The estimated means during these two phases imply no correlation, however their credible intervals allow for the possibility of positive or negative trends at higher elevations. In the early Middle Ages, the correlation between the increase in more rustic grains (particularly in the North where some sites are located at higher elevations, see @fig-topography-bot-waffle) and a higher probability of discovering emmer appears to be positive. The correlation remains only marginally positive in the subsequent phase. However, as previously mentioned, the model ceases predictions at 450 MSL. Similarly to emmer, the posterior predictive simulations for einkorn display significant ambiguity at any stage, particularly beyond 300 MSL. During the Roman period, emmer seems to have been present at greater frequencies in higher altitude sites, while the curves remain flat in subsequent phases, as indicated by the 0.50 HDI. The only visible change is the higher probabilities in the early medieval era. The model for rye produced some interesting results. During the Roman era, the chances of discovering rye on a particular site are minimal, with a slightly higher likelihood at greater elevations. In the later Roman period, the likelihood of identification even at sea level rises, displaying an upward trend on sites located at high elevations, albeit accompanied by greater ambiguity (owing to the limited number of locations at high altitudes). During the early medieval period, rye was found to have a higher probability of growth at sea level with a strong positive correlation to higher altitudes, where it became more established. The correlation was observed to be flat in post-11^th^ century samples. However, this data is unreliable as the HDI values are very large and should not be considered. It is more challenging to identify potential patterns in the graph of broomcorn and foxtail millets beyond the Roman phase. In the Roman era, millets were more likely to be found at sea level, with a mean probability of 0.35 and a 0.50 HDI indicating a 0.10-0.25 probability around 1200 MSL. While this particular phase shows a slightly negative trend, the overall probabilities of discovering millets increase in subsequent phases without any apparent correlation to altitude. Only in the post-11^th^ century samples, where the HDI is high, does the negative trend re-emerge. Regarding the final cereal evaluated, sorghum, its presence during the Roman and Late Roman periods is scarce, making it difficult to establish any correlation. During the early medieval period, its presence increases and, at sea level, the mean probability is approximately 0.20; however, this probability lessens as altitude increases (having an absolute low of 0 at 1200 MSL). Sorghum is more prevalent in 11^th^-century samples (mean = 0.40), nevertheless, uncertainty remains high. Although there are wide credible intervals, this phase still indicates a negative correlation. The uncertainty primarily stems from the small sample size rather than the variability in the observed data.

```{r}
#| echo: false
# Create grain lists

dat.CWheat_Altitude = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude$Common.Wheat, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )

dat.Barley_Altitude = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude$Barley, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )

dat.Einkorn_Altitude = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude$Einkorn, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )

dat.Emmer_Altitude = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude$Emmer, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )

dat.Rye_Altitude = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude$Rye, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )

dat.Millets_Altitude = list(
  N = 2, # 1 for binomial 
  A = bot_altitude$Proso.millet+bot_altitude$Foxtail.millet, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )

dat.Sorghum_Altitude = list(
  N = 2, # 1 for Bernoulli t. 
  A = bot_altitude$Sorghum, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )
```

```{r}
#| echo: false
#| eval: false

m_cwheat_alt <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + b[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        b[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.CWheat_Altitude , chains=4
    )

m_barley_alt <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + b[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        b[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.Barley_Altitude , chains=4
    )

m_emmer_alt <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + b[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        b[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.Emmer_Altitude , chains=4
    )

m_einkorn_alt <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + b[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        b[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.Einkorn_Altitude , chains=4
    )

m_Rye_alt <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + b[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        b[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.Rye_Altitude , chains=4
    )

m_Millets_alt <- ulam(
    alist(
        A ~ dbinom( 2 , p ),
        logit(p) <- a[Chr_id] + b[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        b[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.Millets_Altitude , chains=4
    )

m_Sorghum_alt <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + b[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        b[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.Sorghum_Altitude , chains=4
    )

saveRDS(m_cwheat_alt, "stan_models/m_cwheat_alt.rds")
saveRDS(m_barley_alt, "stan_models/m_barley_alt.rds")
saveRDS(m_emmer_alt, "stan_models/m_emmer_alt.rds")
saveRDS(m_einkorn_alt, "stan_models/m_einkorn_alt.rds")
saveRDS(m_Rye_alt, "stan_models/m_Rye_alt.rds")
saveRDS(m_Millets_alt, "stan_models/m_Millets_alt.rds")
saveRDS(m_Sorghum_alt, "stan_models/m_Sorghum_alt.rds")


```

```{r}
#| echo: false
#| message: false
#| warning: false

library(modelr)

# Read models
m_cwheat_alt <- readRDS("stan_models/m_cwheat_alt.rds")
m_barley_alt <- readRDS("stan_models/m_barley_alt.rds")
m_emmer_alt <- readRDS("stan_models/m_emmer_alt.rds")
m_einkorn_alt <- readRDS("stan_models/m_einkorn_alt.rds")
m_Rye_alt <- readRDS("stan_models/m_Rye_alt.rds")
m_Millets_alt <- readRDS("stan_models/m_Millets_alt.rds")
m_Sorghum_alt <- readRDS("stan_models/m_Sorghum_alt.rds")

## PLOTS

# Common Wheat
m_cwheat_alt.post <- extract.samples(m_cwheat_alt)

m_cwheat_alt.plot <- as.data.frame(dat.CWheat_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_cwheat_alt) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="P (F-T Ws | 1)",
       x="Altitude (km)",
       title="Free-Threshing Wheats",
       subtitle="Altitude"
       )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

# Barley
m_Barley_alt.post <- extract.samples(m_barley_alt)

m_Barley_alt.plot <- as.data.frame(dat.Barley_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_barley_alt) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Barley | 1)",
    x="Altitude (km)",
    title="Barley",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

# Emmer
m_Emmer_alt.post <- extract.samples(m_emmer_alt)

m_Emmer_alt.plot <- as.data.frame(dat.Emmer_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_emmer_alt) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Emmer | 1)",
    x="Altitude (km)",
    title="Emmer",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

# Einkorn
m_Einkorn_alt.post <- extract.samples(m_einkorn_alt)

m_Einkorn_alt.plot <- as.data.frame(dat.Einkorn_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_einkorn_alt) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Einkorn | 1)",
    x="Altitude (km)",
    title="Einkorn",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

# Rye

m_Rye_alt.post <- extract.samples(m_Rye_alt)

m_Rye_alt.plot <- as.data.frame(dat.Rye_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_Rye_alt) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Rye | 1)",
    x="Altitude (km)",
    title="Rye",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

# Millets

m_Millets_alt.post <- extract.samples(m_Millets_alt)

m_Millets_alt.plot <- as.data.frame(dat.Millets_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_Millets_alt) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Millets | 2)",
    x="Altitude (km)",
    title="Millets",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

# Sorghum
m_Sorghum_alt.post <- extract.samples(m_Sorghum_alt)

m_Sorghum_alt.plot <- as.data.frame(dat.Sorghum_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_Sorghum_alt) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Sorghum | 1)",
    x="Altitude (km)",
    title="Sorghum",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))


```

```{r}
#| echo: false
#| label: fig-altitude-bot-plots
#| fig-cap: "Posterior distribution plots showing the presence of cereals in relation to different altitudes and stratified by chronological phase."
#| fig-subcap: 
#| - "Free-Threshing Wheats."
#| - "Barley."
#| - "Emmer."
#| - "Einkorn."
#| - "Rye."
#| - "Foxtail and Broomcorn millet."
#| - "Sorghum."

m_cwheat_alt.plot
m_Barley_alt.plot
m_Emmer_alt.plot
m_Einkorn_alt.plot
m_Rye_alt.plot
m_Millets_alt.plot
m_Sorghum_alt.plot

```

#### Community plot

Upon evaluating the impact of elevation changes on each taxon, their posterior distributions have been plotted together on a graph. The x-axis, representing the inverse logit probability of occurrence, provides a user-friendly interpretation within the confines of a standard probability space bounded between 0 and 1. On the other hand, the y-axis unfurls the estimated slope parameter ($\beta$), a varying parameter of our model that has been multiplied with the altitude of each site. This graphical representation not only aids in visualising our findings but also facilitates the comprehensive evaluation of cereals presence. This approach allows to assess positive or negative correlations within our graph. Furthermore, the graph illuminates the substantial variability in estimating the probability of certain taxa being present, echoing the broad HDIs observed in earlier plots. The graph illustrates that the most significant correlations and variations occurred during the early medieval period. A discernible positive correlation emerges between higher sites and the presence of free-threshing wheat, barley, rye, and emmer. Contrarily, altitude exhibits a negative correlation with sorghum presence. As we transition to medieval samples from the 11^th^ century onwards, the narrative becomes nuanced, marked by high uncertainty: point clusters hover both above and below 0.

```{r}
#| echo: false


m_cwheat_alt.a <- as.data.frame(m_cwheat_alt.post) %>% mutate(Plant = "Free-Threshing Wheat")
m_Barley_alt.a <- as.data.frame(m_Barley_alt.post) %>% mutate(Plant = "Barley")
m_Emmer_alt.a <- as.data.frame(m_Emmer_alt.post) %>% mutate(Plant = "Emmer")
m_Einkorn_alt.a <- as.data.frame(m_Einkorn_alt.post) %>% mutate(Plant = "Einkorn")
m_Rye_alt.a <- as.data.frame(m_Rye_alt.post) %>% mutate(Plant = "Rye")
m_Millets_alt.a <- as.data.frame(m_Millets_alt.post) %>% mutate(Plant = "Millets")
m_Sorghum_alt.a <- as.data.frame(m_Sorghum_alt.post) %>% mutate(Plant = "Sorghum")

Cerals_Alt_binded <- bind_rows(
  m_cwheat_alt.a,
  m_Barley_alt.a,
  m_Emmer_alt.a,
  m_Einkorn_alt.a,
  m_Rye_alt.a,
  m_Millets_alt.a,
  m_Sorghum_alt.a
)

names(Cerals_Alt_binded)[1:8] <- c("a.EMA", "a.LR", "a.Ma", "a.R", "b.EMA", "b.LR", "b.Ma", "b.R")

# Reshape
Cereals_Alt_R <- Cerals_Alt_binded %>%
  select(Plant, a= a.R, b= b.R) %>%
  mutate(Chronology = "R")

Cereals_Alt_LR <- Cerals_Alt_binded %>%
  select(Plant, a=a.LR, b=b.LR) %>%
  mutate(Chronology = "LR")

Cereals_Alt_EMA <- Cerals_Alt_binded %>%
  select(Plant, a=a.EMA, b=b.EMA) %>%
  mutate(Chronology = "EMA")

Cereals_Alt_Ma <- Cerals_Alt_binded %>%
  select(Plant, a=a.Ma, b=b.Ma) %>%
  mutate(Chronology = "Ma")

Cereals_Alt_post <- bind_rows(Cereals_Alt_R, Cereals_Alt_LR, Cereals_Alt_EMA, Cereals_Alt_Ma)

# end reshape

Cereals_Alt_post.plot <- ggplot(Cereals_Alt_post, aes(x = inv_logit(a), y = b, color = Plant)) +
  geom_point(alpha = .3) +
  theme_tidybayes() +
  scale_color_brewer(palette = "Accent") +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +  
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  labs(
    x = expression(paste("Estimated probability (", alpha, ")")),
    y = expression(paste("Altitude parameter (", beta, ")")),
    color = "Cereal",
    title = "Cereals",
    subtitle = "Altitude"
  )+
  facet_grid(factor(Chronology, levels=chrono_levels)~., scales="free")

```

```{r}
#| echo: false
#| fig-height: 10
#| label: fig-cereals-alt
#| fig-cap: "MCMC estimates for intercept and slope (the latter plotted in the logit scale). Negative slopes indicate a negative relationship between the plant occurrence and increasing altitude. Intercepts were kept as a baseline occurrence probability of the taxa. Taxa on the left of the graph are rarer, while taxa on the right are more common. It is important to notice that this graph represents the taxa response to elevation." 

Cereals_Alt_post.plot
```

### Legumes

Instead of creating separate models for each type of legume, an individual model has been developed for several legumes since they can be grown under similar conditions. This model uses a Binomial distribution instead of a Bernoulli distribution, as the number of legumes under examination - lentil, pea, blue/red pea, chickpea, and vetches (common vetch, faba bean, *Vicia sp.*) - is fixed at 7. The model was built using a formula that slightly modifies the Bernoulli distribution: $$
F_{i} \sim Binomial(7, \bar{p}_{i} )
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + \beta_{[ChrID]}\cdot Alt_{i}
$$

$$
\alpha_{ChrID} \sim Normal(0,1.5)
$$

$$
\beta_{ChrID} \sim Normal(0,1.5)
$$

The impact of altitude on the discovery of legumes appears to be mild, displaying a slight decreasing trend during the Roman era and a minor positive upturn in the Late Roman and early Medieval periods. Nonetheless, there is a more pronounced association in samples from the 11^th^ century, albeit restricted to 450 MSL, which prevents comprehensive analysis.

```{r}
#| echo: false

####################
## LEGUMES 
####################

# Convert to list
dat.Legumes_Altitude = list(
  N = 7, # Tot number of legumes taxa
  A = rowSums(bot_altitude[24:30]), 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )

```

```{r}
#| echo: false
#| eval: false

m_Legumes_altitude <- ulam(
    alist(
        A ~ dbinom( 7 , p ),
        logit(p) <- a[Chr_id] + bAlt[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        bAlt[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.Legumes_Altitude , chains=4, log_lik=T
    )

saveRDS(m_Legumes_altitude, "stan_models/m_Legumes_altitude.rds")

```

```{r}
#| echo: false
m_Legumes_altitude <- readRDS("stan_models/m_Legumes_altitude.rds")

m_Legumes_altitude.post <- extract.samples(m_Legumes_altitude)

m_Legumes_altitude.plot <- as.data.frame(dat.Legumes_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_Legumes_altitude) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Legumes | 7)",
    x="Altitude (km)",
    title="Legumes",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

```

```{r}
#| echo: false
#| label: fig-legumes-altitude-plot
#| fig-cap: "Posterior distribution plots showing the presence of legumes in relation to different altitudes and stratified by chronological phase."

m_Legumes_altitude.plot

```

### Grapes and olives

The altitude models for fruits have solely focused on grapes and olives, the two cash crops of interest. Negative correlations with altitude were observed in both models. For grapes, the probabilities at sea level are similar in the Roman and Late Roman periods, exceeding 0.75. In subsequent phases, they fall slightly below 0.75. During the first two periods, the probabilities sharply decline upon reaching the 1200 MSL, while in the early medieval period, the decrease is less intense. It is important to note that these models only consider the presence of plant remains. It would be informative to observe the abundance of these remains at different elevations if a sufficiently robust dataset is available. The trend in the 11^th^ century samples does not exhibit any correlation; however, the prediction only extends up to 450 metres above sea level, which would not significantly impede vine cultivation. Similarly, the olive model shows a marked decrease in predicted probabilities at higher altitudes during the Roman and Late Roman periods. The early medieval dataset still shows a negative correlation, but with a higher uncertainty. For grapes, the medieval samples show no correlations because there are no observations at high altitudes. In fact, olive trees can thrive within the range of altitudes offered by this chronological phase (0-450 MSL).

```{r}
#| echo: false

# Create grain lists

dat.Grape_Altitude = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude$Grape, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude/1000,
  J = nrow(bot_altitude)
  )

```

```{r}
#| echo: false
#| eval: false

m_grape_altitude <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + bAlt[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        bAlt[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.Grape_Altitude , chains=4, log_lik=T
    )

saveRDS(m_grape_altitude, "stan_models/m_grape_altitude.rds")

```

```{r}
#| echo: false

# Read models
m_grape_altitude <- readRDS("stan_models/m_grape_altitude.rds")

# Plots

# Common Wheat
m_Grape_alt.post <- extract.samples(m_grape_altitude)

m_Grape_alt.plot <- as.data.frame(dat.Grape_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_grape_altitude) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Grape | 1)",
    x="Altitude (km)",
    title="Grape",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

```

```{r}
#| echo: false
#| label: fig-grape-altitude
#| fig-cap: "Posterior distribution plots showing the presence of grapes in relation to different altitudes and stratified by chronological phase."

m_Grape_alt.plot

```

```{r}
#| echo: false

# Careful - this model is stored in this file after, under the "Temperature" section. If I need to recreate it, run the code below first.

dat.Olive_altitude = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude$Olive, 
  Chr_id = as.numeric(as.factor(bot_altitude$Chronology)), 
  Alt = bot_altitude$site_altitude / 1000, 
  J = nrow(bot_altitude)
  )

m_Olive_altitude <- readRDS("stan_models/precipitation_models/m_Olive_altitude.rds")

m_Olive_altitude.post <- extract.samples(m_Olive_altitude)

m_Olive_altitude.plot <- as.data.frame(dat.Olive_altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(m_Olive_altitude) %>%
  ggplot(aes(x = Alt, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Olive | 1)",
    x="Altitude (km)",
    title="Olive",
    subtitle="Altitude"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

```

```{r}
#| echo: false
#| label: fig-olive-altitude
#| fig-cap: "Posterior distribution plots showing the presence of olives in relation to different altitudes and stratified by chronological phase."


m_Olive_altitude.plot
```

## Model comparisons {style="text-align: justify;"}

In the concluding remarks of @sec-sampling-posterior-diagnostics, the significance of model comparison when conducting Bayesian modelling was emphasised. So far, categorical predictors have predominantly been employed in models to draw different causal inferences, but numerical predictors are also usually utilised to evaluate the extent to which a predictor's presence improves the model's fitness. Indeed, adding further predictors can result in overfitting, leading to certain metrics (such as WAIC, pWAIC, etc.) penalising models with more predictors when comparing them. Farms can accommodate various animals in various climatic conditions, but plants are more vulnerable to external factors. Therefore, in addition to altitude, we included predictors such as average yearly precipitation and temperature. Different models have been developed, with various combinations of predictors, following the common procedure of starting with one predictor and progressively adding more. The aim is to determine whether some variables are more effective in predicting the presence of specific plants than others. For example, we can investigate whether the presence of free-threshing wheat in the sites is influenced more by the yearly rainfall, temperature, or altitude. These figures were derived from 1 km spatial resolution rasters using contemporary climatic data [@fickWorldClimNew1km2017]. While climatic fluctuations existed during the first millennium, these models are among the most accurate datasets obtainable.

### Precipitation

The presence of plants in a particular region may be influenced by the amount of rainfall. Sorghum and millets are examples of cereals that are tolerant to drought, while olives are among the fruits that are particularly resistant. Our study aimed to investigate whether increased rainfall has an impact on the presence of certain plant species. To assess the efficacy of this variable in elucidating the presence of specific plant taxa in comparison to altitude, our approach involved constructing hierarchical models. The first Bernoulli model incorporated a varying effect for each chronology, following the previously established practice of introducing an index $[ChrID]$ to the intercept $\alpha$. Additionally, we incorporated a varying slope $bPrecip$---also contingent on the index $[ChrID]$---to capture the variability across different subsets. This slope is then multiplied by a constant $MeanAnnualPrecip_{i}$, representing the standardised mean annual precipitation for each site. Both $\alpha$ and $bPrecip$ were then assigned weak priors.

$$
P_{i} \sim Bernoulli(\bar{p}_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + bPrecip_{[ChrID]}\cdot MeanAnnualPrecip_{i}
$$

$$
\alpha_{[ChrID]} \sim Normal(0,1.3)
$$

$$
bPrecip_{[ChrID]} \sim Normal(0,1.3)
$$

The second model was previously introduced in the altitude section of this chapter, but is being presented again for comparison purposes. This model utilises site altitude $Alt_{i}$ as its sole predictor, stratified by chronology:

$$
P_{i} \sim Bernoulli(\bar{p}_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + bAlt_{[ChrID]}\cdot Alt_{i}
$$

$$
\alpha_{[ChrID]} \sim Normal(0,1.3)
$$

$$
bAlt_{[ChrID]} \sim Normal(0,1.3)
$$ We subsequently include both altitude and mean annual precipitation in a third model to examine whether the addition of both predictors enhances the fit significantly:

$$
P_{i} \sim Bernoulli(\bar{p}_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + bAlt_{[ChrID]}\cdot Alt_{i} + bPrecip_{[ChrID]}\cdot MeanAnnualPrecip_{i}
$$

$$
\alpha_{[ChrID]} \sim Normal(0,1.3)
$$

$$
bAlt_{[ChrID]} \sim Normal(0,1.3)
$$

$$
bPrecip_{[ChrID]} \sim Normal(0,1.3)
$$

```{r}
#| echo: false
#| eval: true
#| message: false

library(raster)

prec_raster_list <- list()

for(i in 1:12){
  file_name <- paste0("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Rasters/wc2_precip/wc2.1_2.5m_prec_", sprintf("%02d", i), ".tif")
  prec_raster_list[[i]] <- raster(file_name)
}

# assign each raster file to a variable with a meaningful name
names <- paste0("prec_", sprintf("%02d", 1:12))
for(i in 1:12){
  assign(names[i], prec_raster_list[[i]])
}

precipStack = raster::stack(prec_raster_list)

bot_altitude.Coord <- bot_altitude
  
coordinates(bot_altitude.Coord)= ~ x+y

precip_rasValue=extract(precipStack, bot_altitude.Coord)
precip_rasValue_Mean = data.frame(Precip_Mean = rowMeans(precip_rasValue))

bot_altitude_precip=cbind(bot_altitude.Coord,precip_rasValue_Mean)

bot_altitude_precip$Precip_Mean <- standardize(bot_altitude_precip$Precip_Mean) 

# Create a list

dat.CWheat_Precip = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude_precip$Common.Wheat, 
  Chr_id = as.numeric(as.factor(bot_altitude_precip$Chronology)), 
  Alt = bot_altitude_precip$site_altitude / 1000, 
  MeanPrec = bot_altitude_precip$Precip_Mean,
  J = nrow(bot_altitude_precip)
  )

```

```{r}
#| echo: false
#| label: fig-prior-pred-cereals-precip
#| fig-cap: "Prior predictive simulations were conducted for the precipitation models employed in this section. As in previous models, both scenarios (present or absent) are equally plausible."
#| fig-subcap: 
#|  - "Single coefficient."
#|  - "Two coefficients."
#| layout-ncol: 2

# Prior predictive simulation:

simplehist(rbern(1000, 
                  inv_logit(
                    rnorm(1e4, 0, 1.3)+
                    rnorm(1e4, 0,1.3)*sample(bot_altitude_precip$Precip_Mean, size=1e4, replace=T)
    )
                  ),
           xlab="Present", 
  main="Prior Predictive Simulation: One predictor",
           col=rangi2)

simplehist(rbern(1000, 
                 inv_logit(
                    rnorm(1e4, 0, 1.3) + 
    rnorm(1e4, 0, 1.3)*sample(bot_altitude_precip$Precip_Mean, 
                              size=1e4, replace=T)+
    rnorm(1e4, 0, 1.3)*sample(bot_altitude_precip$site_altitude/1000, 
                              size=1e4, replace=T)
    )
                  ),
           xlab="Present", 
 main="Prior Predictive Simulation: Two predictors",
           col=rangi2)

```

```{r}
#| echo: false
#| eval: false

m_Cwheat_precip <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + bPrec[Chr_id]*MeanPrec,
        a[Chr_id] ~ dnorm(0,1.3),
        bPrec[Chr_id] ~ dnorm(0,1.3)
    ), data=dat.CWheat_Precip , chains=4, log_lik = T
    )

m_CWheat_precip_alt <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + bPrec[Chr_id]*MeanPrec + bAlt[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.3),
        bPrec[Chr_id] ~ dnorm(0,1.3),
        bAlt[Chr_id] ~ dnorm(0,1.3)
    ), data=dat.CWheat_Precip , chains=4, log_lik=T
    )

m_CWheat_altitude <- ulam(
    alist(
        A ~ dbinom( 1 , p ),
        logit(p) <- a[Chr_id] + bAlt[Chr_id]*(Alt),
        a[Chr_id] ~ dnorm(0,1.5),
        bAlt[Chr_id] ~ dnorm(0,1.5)
    ), data=dat.CWheat_Precip , chains=4,  log_lik=T
    )

# Save RDS 
saveRDS(m_Cwheat_precip, "stan_models/precipitation_models/m_Cwheat_precip.rds")
saveRDS(m_CWheat_altitude, "stan_models/precipitation_models/m_Cwheat_altitude.rds")
saveRDS(m_CWheat_precip_alt, "stan_models/precipitation_models/m_CWheat_precip_alt.rds")

```

However, our findings suggest that including the average annual rainfall as a predictor did not have a significant impact on model fitness. When comparing the three models using the WAIC measure[^archaeobotany-3], no significant difference was observed:

[^archaeobotany-3]: As a reminder, note that WAIC (and pWAIC) scores hold meaning only within the context of model comparison, with the aim being to favour the lowest score when significant differences exist between models. However, computing this score for a single model lacks significance as it serves purely as a relative measure within the framework of model comparison.

```{r}
#| echo: false
m_Cwheat_precip <- readRDS("stan_models/precipitation_models/m_Cwheat_precip.rds")
m_CWheat_altitude <- readRDS("stan_models/precipitation_models/m_CWheat_altitude.rds")
m_CWheat_precip_alt <- readRDS("stan_models/precipitation_models/m_Cwheat_precip_alt.rds")

round(
compare(m_Cwheat_precip, m_CWheat_altitude, m_CWheat_precip_alt, func = "WAIC"),
2)
```

Although we have only shown the free-threshing wheats models for simplicity, we have created models for various other plants, including non-cereal plants, and found no significant impact of mean annual precipitation on the model. It should be noted that our analysis employs presence/absence measures. While this variable may be beneficial in predicting crop output, it is not appropriate for this particular data conversion. As the disparities are negligible, selecting the optimal predictor is subjective and based on what we consider to be a more relevant factor in explaining historical agricultural phenomena. Therefore, we will rely on altitude.

```{r}
#| echo: false
#| label: fig-coef-prec-alt-wheat-models
#| fig-cap: "Slope coefficients for the three models analysed are displayed. The numerical values indicate the chronological levels. Larger bars indicate greater credible intervals."
#| fig-subcap: 
#|  - "Precipitation coefficients"
#|  - "Altitude coefficients"
#| layout-ncol: 2

plot( coeftab(m_Cwheat_precip,m_CWheat_altitude, m_CWheat_precip_alt), par=5:8)
plot( coeftab(m_Cwheat_precip,m_CWheat_altitude, m_CWheat_precip_alt), par=c(243:246) )

```

```{r}
#| echo: false
#| eval: false

## PLOTS

# Common Wheat
m_cwheat_precip.post <- extract.samples(m_cwheat_precip)

m_cwheat_precip.plot <- as.data.frame(dat.CWheat_Precip) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(MeanPrec = seq_range(MeanPrec, n = 51), Chronology) %>%
  add_linpred_draws(m_cwheat_precip) %>%
  ggplot(aes(x = MeanPrec, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="P (Common Wheat | 1)",
       x="Scaled Mean Annual Precipitation",
       title="Common Wheat",
       subtitle="Precipitation"
       )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))


# Barley
m_Barley_precip.post <- extract.samples(m_barley_precip)

m_Barley_precip.plot <- as.data.frame(dat.Barley_Precip) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(MeanPrec = seq_range(MeanPrec, n = 51), Chronology) %>%
  add_linpred_draws(m_barley_precip) %>%
  ggplot(aes(x = MeanPrec, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Barley | 1)",
    x="Scaled Mean Annual Precipitation",
    title="Barley",
    subtitle="Precipitation"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

# Rye
m_Rye_precip.post <- extract.samples(m_Rye_precip)

m_Rye_precip.plot <- as.data.frame(dat.Rye_Precip) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(MeanPrec = seq_range(MeanPrec, n = 51), Chronology) %>%
  add_linpred_draws(m_Rye_precip) %>%
  ggplot(aes(x = MeanPrec, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Rye | 1)",
    x="Scaled Mean Annual Precipitation",
    title="Rye",
    subtitle="Precipitation"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))


```

### Temperature

```{r}
#| echo: false
temperature_raster_list <- list()

for(i in 1:12){
  file_name <- paste0("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Rasters/wc2_temperature/wc2.1_2.5m_tavg_", sprintf("%02d", i), ".tif")
  temperature_raster_list[[i]] <- raster(file_name)
}

# assign each raster file to a variable with a meaningful name
names <- paste0("temperature_", sprintf("%02d", 1:12))
for(i in 1:12){
  assign(names[i], temperature_raster_list[[i]])
}

temperatureStack = raster::stack(temperature_raster_list)

temperature_rasValue=raster::extract(temperatureStack, bot_altitude.Coord)
temperature_rasValue_Mean = data.frame(temperature_Mean = rowMeans(temperature_rasValue))

bot_altitude_temperature=cbind(bot_altitude.Coord,temperature_rasValue_Mean)

bot_altitude_temperature$temperature_Mean <- standardize(bot_altitude_temperature$temperature_Mean) 

# Create a list

dat.CWheat_temperature = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude_temperature$Common.Wheat, 
  Chr_id = as.numeric(as.factor(bot_altitude_temperature$Chronology)), 
  Alt = bot_altitude_temperature$site_altitude / 1000, 
  MeanTemp = bot_altitude_temperature$temperature_Mean,
  J = nrow(bot_altitude_temperature)
  )

dat.Rye_temperature = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude_temperature$Rye, 
  Chr_id = as.numeric(as.factor(bot_altitude_temperature$Chronology)), 
  Alt = bot_altitude_temperature$site_altitude / 1000, 
  MeanTemp = bot_altitude_temperature$temperature_Mean,
  J = nrow(bot_altitude_temperature)
  )

legumes_altitude_temperature <- as.data.frame(bot_altitude_temperature)

dat.Legumes_temperature = list(
  N = 7, 
  A = rowSums(legumes_altitude_temperature[22:28]), 
  Chr_id = as.numeric(as.factor(legumes_altitude_temperature$Chronology)), 
  Alt = legumes_altitude_temperature$site_altitude / 1000, 
  MeanTemp = legumes_altitude_temperature$temperature_Mean,
  J = nrow(legumes_altitude_temperature)
  )

dat.Olive_temperature = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude_temperature$Olive, 
  Chr_id = as.numeric(as.factor(bot_altitude_temperature$Chronology)), 
  Alt = bot_altitude_temperature$site_altitude / 1000, 
  MeanTemp = bot_altitude_temperature$temperature_Mean,
  J = nrow(bot_altitude_temperature)
  )

dat.Grape_temperature = list(
  N = 1, # 1 for Bernoulli trials
  A = bot_altitude_temperature$Grape, 
  Chr_id = as.numeric(as.factor(bot_altitude_temperature$Chronology)), 
  Alt = bot_altitude_temperature$site_altitude / 1000, 
  MeanTemp = bot_altitude_temperature$temperature_Mean,
  J = nrow(bot_altitude_temperature)
  )

```

In contrast to the precipitation models, models that utilise the standardised mean annual temperatures as a predictor exhibited diverse results. For each plant that is known to be more vulnerable to extreme temperature conditions or valuable plants, three models were developed. The models' specifications remain identical to those presented in the preceding section. The first model utilised temperature ($MeanAnnualTemp_{i}$) as the sole predictor, stratified by chronology ($[ChrID]$):

$$
P_{i} \sim Bernoulli(\bar{p}_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + bTemp_{[ChrID]}\cdot MeanAnnualTemp_{i}
$$

$$
\alpha_{[ChrID]} \sim Normal(0,1.3)
$$

$$
bTemp_{[ChrID]} \sim Normal(0,1.3)
$$

The second model is the altitude model that we have already presented before, and is used as a baseline for comparison:

$$
P_{i} \sim Bernoulli(\bar{p}_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + bAlt_{[ChrID]}\cdot Alt_{i}
$$

$$
\alpha_{[ChrID]} \sim Normal(0,1.3)
$$

$$
bAlt_{[ChrID]} \sim Normal(0,1.3)
$$ Finally, the last model uses two predictors (in addition to chronology), namely site elevation and standardised mean annual temperature:

$$
P_{i} \sim Bernoulli(\bar{p}_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + bAlt_{[ChrID]}\cdot Alt_{i} + bTemp_{[ChrID]}\cdot MeanAnnualTemp_{i}
$$

$$
\alpha_{ChrID} \sim Normal(0,1.3)
$$

$$
bAlt_{[ChrID]} \sim Normal(0,1.3)
$$

$$
bTemp_{[ChrID]} \sim Normal(0,1.3)
$$

Given that the models are identical to those created for the precipitation variable, we do not reproduce the prior predictive simulations.

The investigation into models for free-threshing wheat, rye, legumes, and grape indicates that incorporating an additional predictor does not appear to be warranted. The current models for each of these crops adequately capture the relevant dynamics and trends associated with their respective occurrences.

```{r}
#| echo: false
#| eval: false

m_Cwheat_temperature <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp,
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.CWheat_temperature , chains=4, log_lik = T
)

m_CWheat_temperature_alt <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp + bAlt[Chr_id]*(Alt),
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3),
    bAlt[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.CWheat_temperature , chains=4, log_lik=T
)

# Save RDS 
saveRDS(m_Cwheat_temperature, "stan_models/precipitation_models/m_Cwheat_temperature.rds")
saveRDS(m_CWheat_temperature_alt, "stan_models/precipitation_models/m_CWheat_temperature_alt.rds")
```

```{r}
#| echo: false
m_Cwheat_temperature <- readRDS("stan_models/precipitation_models/m_Cwheat_temperature.rds")
m_CWheat_temperature_alt <- readRDS("stan_models/precipitation_models/m_CWheat_temperature_alt.rds")

round(
compare(m_Cwheat_temperature, m_CWheat_altitude, m_CWheat_temperature_alt, func = "WAIC"),
2)
```

```{r}
#| echo: false
#| eval: false
m_Rye_temperature <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp,
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Rye_temperature , chains=4, log_lik = T
)

m_Rye_temperature_alt <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp + bAlt[Chr_id]*(Alt),
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3),
    bAlt[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Rye_temperature , chains=4, log_lik=T
)

m_Rye_altitude <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bAlt[Chr_id]*(Alt),
    a[Chr_id] ~ dnorm(0,1.3),
    bAlt[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Rye_temperature , chains=4, log_lik=T
)

# Save RDS 
saveRDS(m_Rye_temperature, "stan_models/precipitation_models/m_Rye_temperature.rds")
saveRDS(m_Rye_temperature_alt, "stan_models/precipitation_models/m_Rye_temperature_alt.rds")
saveRDS(m_Rye_altitude, "stan_models/precipitation_models/m_Rye_altitude.rds")

```

```{r}
#| echo: false
m_Rye_temperature <- readRDS("stan_models/precipitation_models/m_Rye_temperature.rds")
m_Rye_temperature_alt <- readRDS("stan_models/precipitation_models/m_Rye_temperature_alt.rds")
m_Rye_altitude <- readRDS("stan_models/precipitation_models/m_Rye_altitude.rds")

round(
compare(m_Rye_temperature, m_Rye_altitude, m_Rye_temperature_alt, func = "WAIC"),
2)

```

```{r}
#| echo: false
#| eval: false
m_Legumes_temperature <- ulam(
  alist(
    A ~ dbinom( 7 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp,
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Legumes_temperature , chains=4, log_lik = T
)

m_Legumes_temperature_alt <- ulam(
  alist(
    A ~ dbinom( 7 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp + bAlt[Chr_id]*(Alt),
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3),
    bAlt[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Legumes_temperature , chains=4, log_lik=T
)

# Save RDS
saveRDS(m_Legumes_temperature, "stan_models/precipitation_models/m_Legumes_temperature.rds")
saveRDS(m_Legumes_temperature_alt, "stan_models/precipitation_models/m_Legumes_temperature_alt.rds")

```

```{r}
#| echo: false
m_Legumes_temperature <- readRDS("stan_models/precipitation_models/m_Legumes_temperature.rds")
m_Legumes_temperature_alt <- readRDS("stan_models/precipitation_models/m_Legumes_temperature_alt.rds")

round(
compare(m_Legumes_temperature, m_Legumes_altitude, m_Legumes_temperature_alt, func = "WAIC"),
2)

```

```{r}
#| echo: false
#| eval: false
m_Grape_temperature <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp,
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Grape_temperature , chains=4, log_lik = T
)

m_Grape_temperature_alt <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp + bAlt[Chr_id]*(Alt),
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3),
    bAlt[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Grape_temperature , chains=4, log_lik=T
)

# Save RDS
saveRDS(m_Grape_temperature, "stan_models/precipitation_models/m_Grape_temperature.rds")
saveRDS(m_Grape_temperature_alt, "stan_models/precipitation_models/m_Grape_temperature_alt.rds")

```

```{r}
#| echo: false
m_Grape_temperature <- readRDS("stan_models/precipitation_models/m_Grape_temperature.rds")
m_Grape_temperature_alt <- readRDS("stan_models/precipitation_models/m_Grape_temperature_alt.rds")

round(
compare(m_Grape_temperature, m_grape_altitude, m_Grape_temperature_alt, func = "WAIC"),
2)

```

However, the olive-related findings are noteworthy. After comparing the three models thoroughly, it is evident that choosing a model that includes both temperature and site elevation as explanatory factors proves beneficial, despite the additional predictor being penalized. The superiority of this model's fit, when compared to the other two, warrants closer scrutiny of the predicted probability of olive occurrence in relation to the standardized mean annual temperatures and site elevation (expressed in km). It is noteworthy that, in each chronology, there is minimal dispersion within the 0.50 HDIs.

The temporal differences between these observations seem to remain stable until the 11^th^ century. Remarkably, locations with higher temperatures exhibit a greater propensity for either consuming or producing olives. On the contrary, sites located at higher elevations exhibit a lower likelihood of participating in the consumption or production of this specific plant.

```{r}
#| echo: false
#| eval: false
m_Olive_temperature <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp,
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Olive_temperature , chains=4, log_lik = T
)

m_Olive_temperature_alt <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bTemp[Chr_id]*MeanTemp + bAlt[Chr_id]*(Alt),
    a[Chr_id] ~ dnorm(0,1.3),
    bTemp[Chr_id] ~ dnorm(0,1.3),
    bAlt[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Olive_temperature , chains=4, log_lik=T
)

m_Olive_altitude <- ulam(
  alist(
    A ~ dbinom( 1 , p ),
    logit(p) <- a[Chr_id] + bAlt[Chr_id]*(Alt),
    a[Chr_id] ~ dnorm(0,1.3),
    bAlt[Chr_id] ~ dnorm(0,1.3)
  ), data=dat.Olive_temperature , chains=4, log_lik=T
)

# Save RDS 
saveRDS(m_Olive_temperature, "stan_models/precipitation_models/m_Olive_temperature.rds")
saveRDS(m_Olive_temperature_alt, "stan_models/precipitation_models/m_Olive_temperature_alt.rds")
saveRDS(m_Olive_altitude, "stan_models/precipitation_models/m_Olive_altitude.rds")

```

```{r}
#| echo: false
m_Olive_temperature <- readRDS("stan_models/precipitation_models/m_Olive_temperature.rds")
m_Olive_temperature_alt <- readRDS("stan_models/precipitation_models/m_Olive_temperature_alt.rds")
m_Olive_altitude <- readRDS("stan_models/precipitation_models/m_Olive_altitude.rds")

round(
compare(m_Olive_temperature, m_Olive_altitude, m_Olive_temperature_alt, func = "WAIC"),
2)
```

```{r}
#| echo: false
#| label: fig-coef-temp-alt-olive-models
#| fig-cap: "Slope coefficients for the three models analysed are displayed. The numerical values indicate the chronological levels. Larger bars indicate greater credible intervals."
#| fig-subcap: 
#|  - "Temperature coefficients"
#|  - "Altitude coefficients"
#| layout-ncol: 2

plot( coeftab(m_Olive_temperature,m_Olive_altitude, m_Olive_temperature_alt), par=5:8)
plot( coeftab(m_Olive_temperature,m_Olive_altitude, m_Olive_temperature_alt), par=c(243:246) )

```

```{r}
#| echo: false

# Olive
m_Olive_temperature.post <- extract.samples(m_Olive_temperature)

m_Olive_temperature.plot <- as.data.frame(dat.Olive_temperature) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(MeanTemp = seq_range(MeanTemp, n = 101), Chronology) %>%
  add_linpred_draws(m_Olive_temperature) %>%
  ggplot(aes(x = MeanTemp, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Olive | 1)",
    x="Mean Annual Temperature (std)",
    title="Olive",
    subtitle="Temperature"
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))


```

```{r}
#| echo: false
#| label: fig-m-olive-temp-alt-plot
#| fig-cap: "Temperature and elevation models for olive occurrence."
#| fig-subcap: 
#|  - "Olive occurrence prediction plotted against standardised temperatures. The mean annual location temperatures ranged between 4-16°C (mean from January to December for each site)."
#|  - "Olive occurrence prediction plotted against altitude."
#| layout-nrow: 2

m_Olive_temperature.plot
m_Olive_altitude.plot
```

## Cereal proportions {style="text-align: justify;"}

The computations on the archaeobotanical dataset that have been done so far are based on presence/absence values. The reasons relate to the numerous biases present in the samples, which skew the distributions. However, this approach does not allow to draw any quantitative conclusion. From a qualitative standpoint, it can be informative to see which sites are producing different results by calculating the ratio of single cereal taxa on the total of cereal grains found in a certain sample. For the sake of exploring the quantitative trends, keeping in mind that these results are heavily biased by outliers and sample sizes, summary tables grouped by chronology were produced. In particular, two tables are presented here. The first (@tbl-Cereals-Ratios-Means) takes into account missing values, so that if a particular taxon was not found in a sample the missing value was converted to 0. The second table (@tbl-Cereals-Ratios-Means-Pres-Only) calculates the means only based on true presences, and missing values are ignored from the computation. In addition to these two tables, a different approach has also been presented. Raw data has been converted into relative ranks, which assigns increasing ranks to the count values (excluding zeros) on a scale of 0 to 1, thus minimizing the impact of extreme outliers and reducing the effects of large differences in values. @tbl-Cereals-Ranks-ratios-means displays the means of the relative ranks, grouped by chronology. In all three approaches, the computations have been based only on totals of cereals attributed to a species. Although these tables allow some considerations on the proportions of cereals in the sites under investigation, it is important to remember that the results might be biased by the quality of the samples.

```{r}
#| echo: false

###################
## CEREAL RATIOS ##
###################

# Calculate the ratio of each cereal on the total of cereals by site
# Just for qualitative purposes

Cereals_Ratios = Archaeobot_Condensed
Cereals_Ratios[is.na(Cereals_Ratios)] = 0

# Only select sites with cereals
Cereals_Ratios = subset(Cereals_Ratios, Tot..Cereals>0)

# Only select cereal columns
Cereals_Ratios = Cereals_Ratios[,1:24]

# Get TOT without Unsp..
Cereals_Ratios$Tot_Grains = Cereals_Ratios$Tot..Cereals - Cereals_Ratios$Unsp..cereals

# Remove Unsp..Cereals
Cereals_Ratios = Cereals_Ratios[,-23]

# Remove rows that only have Unsp..Cereals (that are now NAs)
Cereals_Ratios = Cereals_Ratios[rowSums(Cereals_Ratios[,14:22], na.rm = T) > 0, ]

# Calculate ratios
Cereals_Ratios[,14:22] =  Cereals_Ratios[,14:22] / Cereals_Ratios$Tot_Grains
Cereals_Ratios[,14:22] = round(Cereals_Ratios[,14:22],2)

# Remove the Tot..Cereals column
Cereals_Ratios = Cereals_Ratios[,-23]

#########################
## CEREAL RATIOS MEANS ##
#########################

# Just for explorative purposes, group by Chronology

# Get the number of observations/chronology to attach to the dataframe
Cereals_Obs_Chrono_Counts = Cereals_Ratios %>% 
  group_by(factor(Chronology, levels=(c("R", "LR", "EMA", "Ma")))) %>%
  summarise(Tot_Samples=n())

# Get the sample size to attach to the dataframe
Cereals_Obs_Chrono_Size = Cereals_Ratios %>% 
  group_by(factor(Chronology, levels=(c("R", "LR", "EMA", "Ma")))) %>%
  summarise(Sample_Size=sum(Tot_Grains))
Cereals_Obs_Chrono_Size$Sample_Size = round(Cereals_Obs_Chrono_Size$Sample_Size)

# This mean includes the 0 values
Cereals_Ratios_Means = Cereals_Ratios %>% 
  group_by(factor(Chronology, levels=(c("R", "LR", "EMA", "Ma")))) %>%
  summarise_at(vars(Common.Wheat:Sorghum), mean) %>%
  ungroup()

Cereals_Ratios_Means[,-1] = round(Cereals_Ratios_Means[,-1],2)

Cereals_Ratios_Means = cbind(Cereals_Ratios_Means, 
                             Sample_Size = Cereals_Obs_Chrono_Size$Sample_Size,
                             Tot_Samples=Cereals_Obs_Chrono_Counts$Tot_Samples)
colnames(Cereals_Ratios_Means)[1] = "Chronology"

# This mean does not include the 0 values
Cereals_Ratios_Pres_Only = Cereals_Ratios
Cereals_Ratios_Pres_Only[Cereals_Ratios_Pres_Only==0] = NA

Cereals_Ratios_Means_Pres_Only = Cereals_Ratios_Pres_Only %>% 
  group_by(factor(Chronology, levels=(c("R", "LR", "EMA", "Ma")))) %>%
  summarise_at(vars(Common.Wheat:Sorghum), mean, na.rm = TRUE) %>%
  ungroup()

Cereals_Ratios_Means_Pres_Only[,-1] = round(Cereals_Ratios_Means_Pres_Only[,-1],2)

colnames(Cereals_Ratios_Means_Pres_Only)[1] = "Chronology"
Cereals_Ratios_Means_Pres_Only = cbind(Cereals_Ratios_Means_Pres_Only, 
                                       Sample_Size = Cereals_Obs_Chrono_Size$Sample_Size,
                                       Tot_Samples=Cereals_Obs_Chrono_Counts$Tot_Samples)

## Relative ranks

Cereals_Ranks_ratios = Archaeobot_Condensed
#Cereals_Ranks_ratios[is.na(Cereals_Ranks_ratios)] = 0

# Only select sites with cereals
Cereals_Ranks_ratios = subset(Cereals_Ranks_ratios, Tot..Cereals>0)

# Only select cereal columns, without Unsp.. Cereals
Cereals_Ranks_ratios = Cereals_Ranks_ratios[,1:24]
Cereals_Ranks_ratios = Cereals_Ranks_ratios[,-23]

# Remove rows that only have Unsp..Cereals (that are now NAs)
Cereals_Ranks_ratios = Cereals_Ranks_ratios[rowSums(Cereals_Ranks_ratios[,14:22], na.rm = T) > 0, ]

# Get the number of observations/chronology to attach to the dataframe
Cereals_Obs_Chrono_Counts_Ranks = Cereals_Ranks_ratios %>% 
  group_by(factor(Chronology, levels=(c("R", "LR", "EMA", "Ma")))) %>%
  summarise(Tot_Samples=n())

# Calculate relative ranks
Cereals_Ranks_ratios[,14:22] = decostand(Cereals_Ranks_ratios[,14:22], 
                                         method = "rrank", 
                                         na.rm = T)

Cereals_Ranks_ratios_means = Cereals_Ranks_ratios %>% 
  group_by(factor(Chronology, levels=(c("R", "LR", "EMA", "Ma")))) %>%
  summarise_at(vars(Common.Wheat:Sorghum), mean, na.rm = TRUE) %>%
  ungroup()

Cereals_Ranks_ratios_means[,-1] = round(Cereals_Ranks_ratios_means[,-1],2)

colnames(Cereals_Ranks_ratios_means)[1] = "Chronology"
Cereals_Ranks_ratios_means = cbind(Cereals_Ranks_ratios_means, 
                                   Sample_Size = Cereals_Obs_Chrono_Size$Sample_Size,
                                   Tot_Samples=Cereals_Obs_Chrono_Counts_Ranks$Tot_Samples)

```

::: {.content-visible when-format="html"}
```{r}
#| echo: false
#| message: false
#| label: tbl-Cereals-Ratios-Means
#| tbl-cap: "Means of the proportions of cereals, calculated on the total of cereals. The means have been calculated including missing values. Results grouped by chronology."

library(knitr)
library(kableExtra)

kable(t(Cereals_Ratios_Means)) %>%
  kable_styling() %>% 
  row_spec(11, bold = T, extra_css = "border-top: 1px solid") %>% 
  row_spec(12, bold = T) %>% 
  row_spec(1, bold = T, extra_css = "border-bottom: 1px solid") 


```

```{r}
#| echo: false
#| label: tbl-Cereals-Ratios-Means-Pres-Only
#| tbl-cap: "Means of the proportions of cereals, calculated on the total of cereals. The means have been calculated only on true presences, excluding missing values. Results grouped by chronology."

kable(t(Cereals_Ratios_Means_Pres_Only)) %>%
  kable_styling() %>% 
  row_spec(11, bold = T, extra_css = "border-top: 1px solid") %>% 
  row_spec(12, bold = T) %>% 
  row_spec(1, bold = T, extra_css = "border-bottom: 1px solid") 

```

```{r}
#| echo: false
#| label: tbl-Cereals-Ranks-ratios-means
#| tbl-cap: "Relative ranks means, grouped by chronology. The ranks have been calculated only on cereals attributed to a species (excluding the category of unspecified cereals)."

Cereals_Ranks_ratios_means=t(Cereals_Ranks_ratios_means)

kable(Cereals_Ranks_ratios_means) %>%
  kable_styling() %>% 
  row_spec(11, bold = T, extra_css = "border-top: 1px solid") %>% 
  row_spec(12, bold = T) %>% 
  row_spec(1, bold = T, extra_css = "border-bottom: 1px solid") 


```
:::
