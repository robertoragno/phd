---
always_allow_html: true
---

# Zooarchaeology

::: callout-important
## Page under construction {style="text-align:justify;"}
:::

```{r}
#| echo: false
#| message: false

# Load functions
source('functions_zoo.R')

```

```{r}
#| echo: false

zooarch_cond <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/Zooarch_Condensed.csv", header=TRUE, sep=";")

```

## Case studies {style="text-align:justify;"}

The following map shows the sites under investigation, divided by chronology. Please select the desired chronology (or chronologies) from the legend on the right.

```{r}
#| echo: false
#| output: false

# Load libraries
library(sp)
library(rgdal)
library(leaflet)
library(leaflet.extras)
library(htmltools)
library(tidyverse)
library(fontawesome) 
library(vegan)

# Get an Italy shapefile
#download.file(url = 'http://biogeo.ucdavis.edu/data/diva/adm/ITA_adm.zip', 
            #  destfile = 'italy.zip')
#unzip(zipfile = 'italy.zip')

italy <- readOGR('Italy_SHP/ITA_Peninsula.shp')

# Grouping
zoo_map_R <- filter(zooarch_cond, Chronology=="R")
zoo_map_LR<- filter(zooarch_cond, Chronology=="LR")
zoo_map_EMA<- filter(zooarch_cond, Chronology=="EMA")
zoo_map_Ma<- filter(zooarch_cond, Chronology=="Ma")

#Icon for the map

Icon_red_zoo <- awesomeIcons(
  text = fa("cow"),
  iconColor = 'yellow',
  library = 'fa',
  markerColor = "red"
)

Icon_lightred_zoo <- awesomeIcons(
  text = fa("cow"),
  iconColor = 'white',
  library = 'glyphicon',
  markerColor = "lightred"
)

Icon_lightgray_zoo <- awesomeIcons(
  text = fa("cow"),
  iconColor = 'white',
  library = 'glyphicon',
  markerColor = "lightgray"
)

Icon_green_zoo <- awesomeIcons(
  text = fa("cow"),
  iconColor = 'darkgreen',
  library = 'glyphicon',
  markerColor = "lightgreen"
)

# Build the map
italy_zoo_map <- leaflet(data=italy) %>%
  addProviderTiles(providers$CartoDB.Positron,  group = "Political") %>%
  addProviderTiles(providers$Esri.WorldPhysical, group = "Physical") %>%  addPolygons(weight = 1, 
              smoothFactor = 0.5,
              opacity = 0.2, 
              fillOpacity = 0.5,
              fillColor = "#F9F5EB",
              color="#D7A86E"
              ) %>%
  addAwesomeMarkers(data=zoo_map_R, lng = zoo_map_R$X, lat = zoo_map_R$Y,
                    group="R", 
                    icon = Icon_red_zoo,
                    popup = paste(
                      "<b>", zoo_map_R$Site, "</b>",
                      "<hr style='border:2px solid green; color: solid green, border-radius:2px; margin-top:1.5px; margin-bottom:5px'>",
                   "<b>Site ID:</b>", zoo_map_R$ID,"<br>",
                           "<b>Type:</b>", zoo_map_R$Type, "<br>",
                           "<b>Centuries:</b>", zoo_map_R$From.Century,
                           "-", zoo_map_R$To.Century, "<br>",
                           "<b>Chronology:</b>", zoo_map_R$Chronology, "<br>",
                           "<b>Reference:</b><i>", zoo_map_R$Reference, "</i><br>",
                           "<b>NISP</b>:", rowSums(zoo_map_R[,c(15:23)], na.rm=T), "<br>",
                           "<br><b>Domestic %:</b> <br>",
                           "Pigs:", round(decostand(zoo_map_R[,c(15:23)], method = "total", na.rm = T)$Pigs*100, 2), "<br>",
                           "Cattle:", round(decostand(zoo_map_R[,c(15:23)], method = "total", na.rm = T)$Cattle*100, 2), "<br>",
                           "Sheep/Goat:", round(decostand(zoo_map_R[,c(15:23)], method = "total", na.rm = T)$Caprine*100, 2)
                           ), 
             label=~htmlEscape(zoo_map_R$Site)
 ) %>%
    addAwesomeMarkers(data=zoo_map_LR, lng = zoo_map_LR$X, lat = zoo_map_LR$Y,
                    group="LR",
                    icon = Icon_lightred_zoo,
                    popup = paste(
                      "<b>", zoo_map_LR$Site, "</b>",
                      "<hr style='border:2px solid green; color: solid green, border-radius:2px; margin-top:1.5px; margin-bottom:5px'>",
                   "<b>Site ID:</b>", zoo_map_LR$ID,"<br>",
                           "<b>Type:</b>", zoo_map_LR$Type, "<br>",
                           "<b>Centuries:</b>", zoo_map_LR$From.Century,
                           "-", zoo_map_LR$To.Century, "<br>",
                           "<b>Chronology:</b>", zoo_map_LR$Chronology, "<br>",
                           "<b>Reference:</b><i>", zoo_map_LR$Reference, "</i> <br>",
                      "<b>NISP</b>:", rowSums(zoo_map_LR[,c(15:23)], na.rm=T), "<br>",
                           "<br><b>Domestic %:</b> <br>",
                           "Pigs:", round(decostand(zoo_map_LR[,c(15:23)], method = "total", na.rm = T)$Pigs*100, 2), "<br>",
                           "Cattle:", round(decostand(zoo_map_LR[,c(15:23)], method = "total", na.rm = T)$Cattle*100, 2), "<br>",
                           "Sheep/Goat:", round(decostand(zoo_map_LR[,c(15:23)], method = "total", na.rm = T)$Caprine*100, 2)
                           ), 
             label=~htmlEscape(zoo_map_LR$Site)
 ) %>%
      addAwesomeMarkers(data=zoo_map_EMA, lng = zoo_map_EMA$X, lat = zoo_map_EMA$Y,
                    group="EMA",
                    icon = Icon_lightgray_zoo,
                    popup = paste(
                      "<b>", zoo_map_EMA$Site, "</b>",
                      "<hr style='border:2px solid green; color: solid green, border-radius:2px; margin-top:1.5px; margin-bottom:5px'>",
                   "<b>Site ID:</b>", zoo_map_EMA$ID,"<br>",
                           "<b>Type:</b>", zoo_map_EMA$Type, "<br>",
                           "<b>Centuries:</b>", zoo_map_EMA$From.Century,
                           "-", zoo_map_EMA$To.Century, "<br>",
                           "<b>Chronology:</b>", zoo_map_EMA$Chronology, "<br>",
                           "<b>Reference:</b><i>", zoo_map_EMA$Reference, "</i> <br>",
                      "<b>NISP</b>:", rowSums(zoo_map_EMA[,c(15:23)], na.rm=T), "<br>",
                           "<br><b>Domestic %:</b> <br>",
                           "Pigs:", round(decostand(zoo_map_EMA[,c(15:23)], method = "total", na.rm = T)$Pigs*100, 2), "<br>",
                           "Cattle:", round(decostand(zoo_map_EMA[,c(15:23)], method = "total", na.rm = T)$Cattle*100, 2), "<br>",
                           "Sheep/Goat:", round(decostand(zoo_map_EMA[,c(15:23)], method = "total", na.rm = T)$Caprine*100, 2)
                      ), 
             label=~htmlEscape(zoo_map_EMA$Site)
 ) %>%
        addAwesomeMarkers(data=zoo_map_Ma, lng = zoo_map_Ma$X, lat = zoo_map_Ma$Y,
                    group="Ma",
                    icon = Icon_green_zoo,
                    popup = paste(
                      "<b>", zoo_map_Ma$Site, "</b>",
                      "<hr style='border:2px solid green; color: solid green, border-radius:2px; margin-top:1.5px; margin-bottom:5px'>",
                   "<b>Site ID:</b>", zoo_map_Ma$ID,"<br>",
                           "<b>Type:</b>", zoo_map_Ma$Type, "<br>",
                           "<b>Centuries:</b>", zoo_map_Ma$From.Century,
                           "-", zoo_map_Ma$To.Century, "<br>",
                           "<b>Chronology:</b>", zoo_map_Ma$Chronology, "<br>",
                      "<b>Reference:</b><i>", zoo_map_Ma$Reference, "</i> <br>",
                      "<b>NISP</b>:", rowSums(zoo_map_Ma[,c(15:23)], na.rm=T), "<br><br>",
                           "<b>Domestic %:</b> <br>",
                           "Pigs:", round(decostand(zoo_map_Ma[,c(15:23)], method = "total", na.rm = T)$Pigs*100, 2), "<br>",
                           "Cattle:", round(decostand(zoo_map_Ma[,c(15:23)], method = "total", na.rm = T)$Cattle*100, 2), "<br>",
                           "Sheep/Goat:", round(decostand(zoo_map_Ma[,c(15:23)], method = "total", na.rm = T)$Caprine*100, 2)
                           ), 
             label=~htmlEscape(zoo_map_Ma$Site)
 ) %>%
  addLayersControl(
    overlayGroups = c("R", "LR", "EMA", "Ma"),
    baseGroups = c("Political", "Physical"),
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  hideGroup(c("LR", "EMA", "Ma")) %>%
  addResetMapButton() %>%
  addFullscreenControl() %>%
  htmlwidgets::onRender("
    function(el, x) {
      var myMap = this;
      myMap.on('baselayerchange',
        function (e) {
          myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
        })
    }")


```

::: {.content-visible when-format="html"}
```{r}
#| echo: false
#| fig-cap: "**Legend**: `R` = Roman, `LR` = Late Roman, `EMA` = Early Middle Ages, `Ma` = 11th c. onwards "

italy_zoo_map

```
:::

::: {.content-visible when-format="pdf"}
Show map
:::

## Medians {style="text-align:justify;"}

::: {.content-visible when-format="html"}
The faunal dataset is large (434+ records) and diversified. Looking at the distributions of each animal, the curve is not gaussian. The best choice for non-normal curves is to use medians instead of means to come up with figures that are less dependent on outliers. The function `Medians_Chrono_Zoo()` (@sec-fun-Medians-Chrono-Zoo) can be used to return as output weighted medians for each chronology. The in-depth description of how weights are calculated for each sample can be found in @sec-chrono-fuzziness. To summarise, sites with a very large (*i.e.* fuzzy) chronology contribute less to the calculation of the median. @tbl-zoo-medians-chronology provides the median values of the main categories of faunal remains for each chronology, and @tbl-zoo-medians-centuries the median values for each century. Stronger colours in the cells indicate higher values.
:::

::: {.content-visible when-format="pdf"}
The faunal dataset is large (434+ records) and diversified. Looking at the distributions of each animal, the curve is not gaussian. The best choice for non-normal curves is to use medians instead of means to come up with figures that are less dependent on outliers. The function `Medians_Chrono_Zoo()` (@sec-fun-Medians-Chrono-Zoo) can be used to return as output weighted medians for each chronology. The in-depth description of how weights are calculated for each sample can be found in @sec-chrono-fuzziness. To summarise, sites with a very large (*i.e.* fuzzy) chronology contribute less to the calculation of the median. @tbl-zoo-medians-chronology-pdf provides the median values of the main categories of faunal remains for each chronology, and @tbl-zoo-medians-centuries-pdf the median values for each century.
:::

```{r}
#| echo: false
#| output: false

library(knitr)
library(kableExtra)
library(formattable)
library(dplyr)

```

::: {.content-visible when-format="html"}
```{r}
#| code-fold: true
#| output: false
#| code-summary: "Show the code"
#| code-overflow: wrap

Medians_Categorised_per_Chronology_ZOO <- 
  data.frame(
    Medians_Chrono_Zoo(zooarch_cond, "R")*100,
    Medians_Chrono_Zoo(zooarch_cond, "LR")*100,
    Medians_Chrono_Zoo(zooarch_cond, "EMA")*100,
    Medians_Chrono_Zoo(zooarch_cond, "Ma")*100
  )

# Round to 2 digits
Medians_Categorised_per_Chronology_ZOO <- round(Medians_Categorised_per_Chronology_ZOO, 2)

## Weighted medians per century ##
Medians_ZOO_Centuries <- data.frame(
  "I BCE" = zooarch_tables(zooarch_cond, -1)$Medians,  
  "I CE" = zooarch_tables(zooarch_cond, 1)$Medians,
  "II CE" = zooarch_tables(zooarch_cond, 2)$Medians,
  "III CE" = zooarch_tables(zooarch_cond, 3)$Medians,
  "IV CE" = zooarch_tables(zooarch_cond, 4)$Medians,
  "V CE" = zooarch_tables(zooarch_cond, 5)$Medians,
  "VI CE" = zooarch_tables(zooarch_cond, 6)$Medians,
  "VII CE" = zooarch_tables(zooarch_cond, 7)$Medians,
  "VIII CE" = zooarch_tables(zooarch_cond, 8)$Medians,
  "IX CE" = zooarch_tables(zooarch_cond, 9)$Medians,
  "X CE" = zooarch_tables(zooarch_cond, 10)$Medians,
  "XI CE" = zooarch_tables(zooarch_cond, 11)$Medians
)

# Assigning the colnames (optional - instead of roman numerals)
colnames(Medians_ZOO_Centuries) <- c("1st c. BCE", "1st c. CE", "2nd c.", "3rd c.", "4th c.", "5th c.", "6th c.", "7th c.", "8th c.", "9th c.", "10th c.", "11th c.")

# Rounding the medians
Medians_ZOO_Centuries <- round(Medians_ZOO_Centuries, digits=2)

# Removing categories that are not necessary
Medians_ZOO_Centuries <- Medians_ZOO_Centuries[-c(6:9),]

```
:::

::: {.content-visible when-format="html"}
```{r}
#| label: tbl-zoo-medians-chronology
#| tbl-cap: "Weighted medians of zooarchaeological remains, divided by chronology."
#| echo: false

Medians_Categorised_per_Chronology_ZOO.tbl <- (Medians_Categorised_per_Chronology_ZOO[-10,])

Medians_Categorised_per_Chronology_ZOO.tbl$R <- color_tile("white", "#bb4734")(Medians_Categorised_per_Chronology_ZOO.tbl$R)
Medians_Categorised_per_Chronology_ZOO.tbl$LR <- color_tile("white", "#ef8f7f")(Medians_Categorised_per_Chronology_ZOO.tbl$LR)
Medians_Categorised_per_Chronology_ZOO.tbl$EMA <- color_tile("white", "#a3a3a3")(Medians_Categorised_per_Chronology_ZOO.tbl$EMA)
Medians_Categorised_per_Chronology_ZOO.tbl$Ma <- color_tile("white", "#c4ef81")(Medians_Categorised_per_Chronology_ZOO.tbl$Ma)

Medians_Categorised_per_Chronology_ZOO.tbl %>%
  kable("html", escape = F, digits = 2) %>%
  kable_styling("hover", full_width = T) %>%  
  column_spec(1, image = spec_image(
    c("https://cdn-icons-png.flaticon.com/512/776/776487.png", "https://cdn-icons-png.flaticon.com/512/4455/4455466.png", "https://cdn-icons-png.flaticon.com/512/1676/1676821.png", "https://cdn-icons-png.flaticon.com/512/6678/6678092.png", "https://cdn-icons-png.flaticon.com/512/1063/1063448.png", "https://cdn-icons-png.flaticon.com/512/1728/1728751.png", "https://cdn-icons-png.flaticon.com/512/7591/7591559.png", "https://cdn-icons-png.flaticon.com/512/91/91536.png", "https://cdn-icons-png.flaticon.com/512/616/616519.png"), 70, 70)) %>%
  add_header_above(c(" ", "Chronologies" = 4))

```
:::

::: {.content-visible when-format="pdf"}
```{r}
#| label: tbl-zoo-medians-chronology-pdf
#| tbl-cap: "Weighted medians of zooarchaeological remains, divided by chronology."
#| echo: false
Medians_Categorised_per_Chronology_ZOO.tbl <- (Medians_Categorised_per_Chronology_ZOO[-10,])

knitr::kable(Medians_Categorised_per_Chronology_ZOO.tbl, format="latex", booktabs=TRUE) %>% 
  kable_styling(latex_options = "HOLD_position") %>%
  add_header_above(c(" ", "Chronologies" = 4))

```
:::

Pigs' medians from the Italian peninsula are the highest in each chronology, although their values decrease after the Roman age peak. Cattle medians slightly decrease after the Roman age, even though surprisingly (*put a reference here to literature review to explain why surprisingly*) the values increase again (18--19.71%) during the early Medieval and Medieval age. The trends for sheeps and goats are also interesting. During the Roman age the Italian median is 25%, slightly decreasing in the 3^rd^ to the 5^th^ century, and increasing again after. When discussing sheep-farming, one must always consider the geographical features from which the data is being collected. This will be discussed later on in the chapter, where more regional and geographical trends will be provided. Domestic fowl (chickens and geese) has quite stable values of 4-5%, with a peak of 7.68% in the 11^th^ century. Wild game peaks during the Roman age, with a median value of 5%, reaching a minimum in the early Middle ages (2%) and rising again in the 11^th^ century. Two considerations must be made for game consumption. The first is that as we will see later on, game consumption is strongly related to the site typology. Secondly, the Roman age value is pulled up by assemblages from the 1^st^ century BCE. After that, the values strongly decrease and by looking at the individual centuries the medians from the 7^th^ century onwards are much higher (ranging from 1.42% to 2.09%).

::: {.content-visible when-format="html"}
```{r}
#| label: tbl-zoo-medians-centuries
#| tbl-cap: "Weighted medians of zooarchaeological remains, divided by century."
#| echo: false

Medians_ZOO_Centuries.tbl <- Medians_ZOO_Centuries

# Coloring the rows according to Chronology (R = Red, LR = Light red, EMA = gray, Ma = light green)
for(i in 1:3) {
Medians_ZOO_Centuries.tbl[,i] <- color_tile("white", "#bb4734")(Medians_ZOO_Centuries.tbl[,i])
}

for(i in 4:6) {
 Medians_ZOO_Centuries.tbl[,i] <- color_tile("white", "#ef8f7f")(Medians_ZOO_Centuries.tbl[,i])
}
 
for(i in 7:11) {
  Medians_ZOO_Centuries.tbl[,i] <- color_tile("white", "#a3a3a3")(Medians_ZOO_Centuries.tbl[,i])
}
  
Medians_ZOO_Centuries.tbl[,12] <- color_tile("white", "#c4ef81")(Medians_ZOO_Centuries.tbl[,12])

Medians_ZOO_Centuries.tbl<- t(Medians_ZOO_Centuries.tbl)

Medians_ZOO_Centuries.tbl_names_spaced <- c(
  'Pigs', 'Cattle', 'Caprine', 
  'Domestic fowl',
  'Wild game')

Medians_ZOO_Centuries.tbl %>%
  kable("html", escape = F, col.names = Medians_ZOO_Centuries.tbl_names_spaced) %>%
  kable_styling(bootstrap_options = "hover", full_width = T) %>%
  footnote(symbol = "The color gradients in this table are used to indicate the chronologies.") %>%
  add_header_above(c(" ", "Faunal remains" = 5))

```
:::

::: {.content-visible when-format="pdf"}
```{r}
#| label: tbl-zoo-medians-centuries-pdf
#| tbl-cap: "Weighted medians of zooarchaeological remains, divided by century."
#| echo: false

Medians_ZOO_Centuries.tbl <- Medians_ZOO_Centuries
Medians_ZOO_Centuries.tbl<- t(Medians_ZOO_Centuries.tbl)

Medians_ZOO_Centuries.tbl_names_spaced <- c(
  'Pigs', 'Cattle', 'Caprine', 
  'Domestic fowl',
  'Wild game')

knitr::kable(Medians_ZOO_Centuries.tbl, col.names = Medians_ZOO_Centuries.tbl_names_spaced, format="latex", booktabs=TRUE) %>% 
  kable_styling(latex_options = "HOLD_position") %>%
  add_header_above(c(" ", "Faunal remains" = 5))
```
:::

# Context type

## Pigs

::: callout-alert
**Question:** Is the animal X - let's say Pigs - more strongly associated to a particular settlement type during a certain chronology?

**Expectation 1:** Pigs % should be higher in urban and fortified settlements, as they are animals which are only used for meat and can sustain large populations or the military.

**Expectation 2:** Possibly pigs would increase in villas in the Late Roman age, as their production shifts to a more extensive agriculture (Source: Historical literature).

**Expectation 3:** If urban density decreases during the late Roman and early Medieval phase, but increases in the Medieval age, do the pigs % follow similar trends?
:::

```{r}
#| echo: false

####################
## Data pre-processing
####################

Animals_Df <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/Zooarch_Condensed_with_altitude.csv", header=TRUE, sep=";")

Animals_Df$Tot_NISP <- rowSums(Animals_Df[c(16:22)], na.rm = T)

# 1. Subsetting the dataframe
Animals_Df <- Animals_Df[c(1,16,17,18,20,25,4,5,6,7,10)]

# 2. Merge some categories in the 'Type' column
Animals_Df$Type <- str_replace(Animals_Df$Type, "Rural site, mansio", "Rural")      
Animals_Df$Type <- str_replace(Animals_Df$Type, "Religious, monastery", "Religious")
Animals_Df$Type <- str_replace(Animals_Df$Type, "Castle", "Fortified")
Animals_Df$Type <- str_replace(Animals_Df$Type, "Castrum", "Fortified")
Animals_Df$Geo <- str_replace(Animals_Df$Geo, "Hilltop", "Hill")

# 3. Remove the categories 'Necropolis' and 'Religious' as they might skew
# the results.
Animals_Df <- filter(Animals_Df,  Type!="Shipwreck")

# 4. Exclude the castrum of Ostia, very strong outlier and regardless only fortified
# roman site
Animals_Df <- subset(Animals_Df, !(Chronology=="R" & Type=="Fortified"))

# Convert to factors
Animals_Df[,c(7:9,11)] <- lapply(Animals_Df[,c(7:9,11)], factor)

# Specify chronological order
Animals_Df$Chronology <- factor(Animals_Df$Chronology, levels = c("R", "LR", "EMA", "Ma"))

# Convert NAs to 0
Animals_Df[is.na(Animals_Df)]<-0

# Create copies
Animals_Df2 <- Animals_Df
Animals_Df_fort <- Animals_Df
Animals_Df_villas <- Animals_Df
Animals_Df_Necr_Amph <- Animals_Df
Animals_Df_Rel <- Animals_Df

# Convert to proportions just the 
#Animals_Df[,c(2:5)] <- Animals_Df[,c(2:5)]/Animals_Df$Tot_NISP

# Simplifying: Urban vs Rural
# Because they exist in the same chronologies
Animals_Df2 <- subset(Animals_Df2, Type=="Rural" | Type=="Urban")
Animals_Df2 <- droplevels(Animals_Df2)

Animals_Df_fort <- subset(Animals_Df_fort, Type=="Fortified")
Animals_Df_fort <- droplevels(Animals_Df_fort)

Animals_Df_villas <- subset(Animals_Df_villas, Type=="Rural site, villa")
Animals_Df_villas <- droplevels(Animals_Df_villas)

# Because they exist in the same chronologies
Animals_Df_Necr_Amph <- subset(Animals_Df_Necr_Amph, Type=="Necropolis" | Type=="Urban, amphitheater")
Animals_Df_Necr_Amph <- droplevels(Animals_Df_Necr_Amph)

Animals_Df_Rel <- subset(Animals_Df_Rel, Type=="Religious")
Animals_Df_Rel <- droplevels(Animals_Df_Rel)


```

```{r}
#| echo: false
#| message: false
#| output: false

########################################
# Data processing for bayesian models
########################################

library(rethinking)
library(tidybayes)
library(tidybayes.rethinking)

set.seed(24)

# RURAL AND URBAN SITES
d.Animals_RurUrb <- Animals_Df2
d.Animals_RurUrb$TC_id <- as.integer(interaction(d.Animals_RurUrb$Type, d.Animals_RurUrb$Chronology))
dat.Pigs_RurUrb = list(N=d.Animals_RurUrb$Tot_NISP, A=d.Animals_RurUrb$Pigs, Tc_id=d.Animals_RurUrb$TC_id, J=nrow(d.Animals_RurUrb))

# Religious sites
d.Animals_Rel <- Animals_Df_Rel
d.Animals_Rel$TC_id <- as.integer(interaction(d.Animals_Rel$Type, d.Animals_Rel$Chronology))
dat.Pigs_Rel = list(N=d.Animals_Rel$Tot_NISP, A=d.Animals_Rel$Pigs, Tc_id=d.Animals_Rel$TC_id, J=nrow(d.Animals_Rel))

## Necropolis and amphitheaters
d.Animals_Necr_Amph <- Animals_Df_Necr_Amph
d.Animals_Necr_Amph$TC_id <- as.integer(interaction(d.Animals_Necr_Amph$Type, d.Animals_Necr_Amph$Chronology))
dat.Pigs_Necr_Amph = list(N=d.Animals_Necr_Amph$Tot_NISP, A=d.Animals_Necr_Amph$Pigs, Tc_id=d.Animals_Necr_Amph$TC_id, J=nrow(d.Animals_Necr_Amph))

# FORTIFIED SETTLEMENTS

d.Animals_fort <- Animals_Df_fort
d.Animals_fort$TC_id <- as.integer(interaction(d.Animals_fort$Type, d.Animals_fort$Chronology))
dat.Pigs_fort = list(N=d.Animals_fort$Tot_NISP, A=d.Animals_fort$Pigs, Tc_id=d.Animals_fort$TC_id, J=nrow(d.Animals_fort))

# Pigs - Villas

d.Animals_villas <- Animals_Df_villas
d.Animals_villas$TC_id <- as.integer(interaction(d.Animals_villas$Type, d.Animals_villas$Chronology))
dat.Pigs_villas = list(N=d.Animals_villas$Tot_NISP, A=d.Animals_villas$Pigs, Tc_id=d.Animals_villas$TC_id, J=nrow(d.Animals_villas))


```

```{r}
#| echo: false
#| eval: false

########################################
# Running the models
# Saving the models
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Pigs_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan",  # Stan program
  data = dat.Pigs_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Pigs_RurUrb.fit, "stan_models/Pigs_RurUrb_fit.rds")

Pigs_Rel.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Relig.stan",  # Stan program
  data = dat.Pigs_Rel,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Pigs_Rel.fit, "stan_models/Pigs_Rel_fit.rds")

Pigs_Necr_Amph.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_NecrAmph.stan",  # Stan program
  data = dat.Pigs_Necr_Amph,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Pigs_Necr_Amph.fit, "stan_models/Pigs_Necr_Amph_fit.rds")

Pigs_Fort.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Pigs_fort,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Pigs_Fort.fit, "stan_models/Pigs_Fort_fit.rds")

Pigs_Villas_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Pigs_villas,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Pigs_Villas_fit, "stan_models/Pigs_Villas_fit.rds")



```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Pigs_RurUrb.fit <- readRDS("stan_models/Pigs_RurUrb_fit.rds")
Pigs_Rel.fit <- readRDS("stan_models/Pigs_Rel_fit.rds")
Pigs_Necr_Amph.fit <- readRDS("stan_models/Pigs_Necr_Amph_fit.rds")
Pigs_Fort.fit <- readRDS("stan_models/Pigs_Fort_fit.rds")
Pigs_Villas_fit <- readRDS("stan_models/Pigs_Villas_fit.rds")

```

```{r}
#| echo: false

################################
## Data handling for ggplot
################################


Pigs_BB_Merge_a_UrbRur <- Pigs_RurUrb.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
    )
) 

Pigs_BB_Merge_a_NecrAmph <- Pigs_Necr_Amph.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
    )
) 

Pigs_BB_Merge_a_Rel <- Pigs_Rel.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
    )
) 

Pigs_BB_Merge_a_Fortified <- Pigs_Fort.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
    )
)  %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
    )
)  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
    )
)

Pigs_BB_Merge_a_Villas <- Pigs_Villas_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
    ) ) %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
    ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
    )
)

################################
## Data handling for phi/theta
################################

Pigs_BB_Merge_theta_UrbRur <- Pigs_RurUrb.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
    )
) 

Pigs_BB_Merge_theta_NecrAmph <- Pigs_Necr_Amph.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
    )
) 

Pigs_BB_Merge_theta_Rel <- Pigs_Rel.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
    )
) 

Pigs_BB_Merge_theta_Fortified <- Pigs_Fort.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
    )
)  %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
    )
)  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
    )
)

Pigs_BB_Merge_theta_Villas <- Pigs_Villas_fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
    ) ) %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
    ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
    )
)

################################
# Merging all this data together
################################


Pigs_BB_Merge_phi <- rbind(Pigs_BB_Merge_theta_UrbRur, Pigs_BB_Merge_theta_Fortified, Pigs_BB_Merge_theta_Villas, Pigs_BB_Merge_theta_Rel, Pigs_BB_Merge_theta_NecrAmph)
Pigs_BB_Merge_phi$TC_text <- factor(Pigs_BB_Merge_phi$TC_text)

Pigs_BB_Merge_a <- rbind(Pigs_BB_Merge_a_UrbRur, Pigs_BB_Merge_a_Fortified, Pigs_BB_Merge_a_Villas, Pigs_BB_Merge_a_Rel, Pigs_BB_Merge_a_NecrAmph)
Pigs_BB_Merge_a$TC_text <- factor(Pigs_BB_Merge_a$TC_text)


################################
# Creating the plots
################################

chrono_levels <- c("R", "LR", "EMA", "Ma")

Pigs_BB.plot <- Pigs_BB_Merge_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
    )+
    geom_vline(xintercept = inv_logit(mean(Pigs_BB_Merge_a$a)),    
               linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Pigs",
       subtitle = "Site type",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        linewidth = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")


Pigs_BB_phi.plot <- Pigs_BB_Merge_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
    geom_vline(xintercept = mean(Pigs_BB_Merge_phi$theta),
               linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Pigs",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        linewidth = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")

```

```{r}
#| echo: false
#| fig-height: 10

Pigs_BB.plot
Pigs_BB_phi.plot

```

## Cattle

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

######################################################
# Initial data processing for input in models
######################################################

# RURAL AND URBAN SITES
dat.Cattle_RurUrb = list(N=d.Animals_RurUrb$Tot_NISP, A=d.Animals_RurUrb$Cattle, Tc_id=d.Animals_RurUrb$TC_id, J=nrow(d.Animals_RurUrb))

# Religious sites
dat.Cattle_Rel = list(N=d.Animals_Rel$Tot_NISP, A=d.Animals_Rel$Cattle, Tc_id=d.Animals_Rel$TC_id, J=nrow(d.Animals_Rel))

## Necropolis and amphitheaters
dat.Cattle_Necr_Amph = list(N=d.Animals_Necr_Amph$Tot_NISP, A=d.Animals_Necr_Amph$Cattle, Tc_id=d.Animals_Necr_Amph$TC_id, J=nrow(d.Animals_Necr_Amph))

# FORTIFIED SETTLEMENTS
dat.Cattle_fort = list(N=d.Animals_fort$Tot_NISP, A=d.Animals_fort$Cattle, Tc_id=d.Animals_fort$TC_id, J=nrow(d.Animals_fort))

# Cattle - Villas
dat.Cattle_villas = list(N=d.Animals_villas$Tot_NISP, A=d.Animals_villas$Cattle, Tc_id=d.Animals_villas$TC_id, J=nrow(d.Animals_villas))

```

```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
#| output: false

########################################
# Running the models
# Saving the models
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Cattle_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan",  # Stan program
  data = dat.Cattle_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Cattle_RurUrb.fit, "stan_models/Cattle_RurUrb_fit.rds")

Cattle_Rel.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Relig.stan",  # Stan program
  data = dat.Cattle_Rel,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Cattle_Rel.fit, "stan_models/Cattle_Rel_fit.rds")

Cattle_Necr_Amph.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_NecrAmph.stan",  # Stan program
  data = dat.Cattle_Necr_Amph,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Cattle_Necr_Amph.fit, "stan_models/Cattle_Necr_Amph_fit.rds")

Cattle_Fort.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Cattle_fort,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Cattle_Fort.fit, "stan_models/Cattle_Fort_fit.rds")

Cattle_Villas_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Cattle_villas,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Cattle_Villas_fit, "stan_models/Cattle_Villas_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Cattle_RurUrb.fit <- readRDS("stan_models/Cattle_RurUrb_fit.rds")
Cattle_Rel.fit <- readRDS("stan_models/Cattle_Rel_fit.rds")
Cattle_Necr_Amph.fit <- readRDS("stan_models/Cattle_Necr_Amph_fit.rds")
Cattle_Fort.fit <- readRDS("stan_models/Cattle_Fort_fit.rds")
Cattle_Villas_fit <- readRDS("stan_models/Cattle_Villas_fit.rds")

```

```{r}
#| echo: false

################################################################
## Data handling for ggplot: a and theta/phi parameters
################################################################

Cattle_BB_Merge_a_UrbRur <- Cattle_RurUrb.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
    )
) 

Cattle_BB_Merge_a_NecrAmph <- Cattle_Necr_Amph.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
    )
) 

Cattle_BB_Merge_a_Rel <- Cattle_Rel.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
    )
) 

Cattle_BB_Merge_a_Fortified <- Cattle_Fort.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
    )
)  %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
    )
)  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
    )
)

Cattle_BB_Merge_a_Villas <- Cattle_Villas_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
    ) ) %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
    ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
    )
)

Cattle_BB_Merge_a <- rbind(Cattle_BB_Merge_a_UrbRur, Cattle_BB_Merge_a_Fortified, Cattle_BB_Merge_a_Villas, Cattle_BB_Merge_a_Rel, Cattle_BB_Merge_a_NecrAmph)
Cattle_BB_Merge_a$TC_text <- factor(Cattle_BB_Merge_a$TC_text)

## Data handling for theta/phi

Cattle_BB_Merge_theta_UrbRur <- Cattle_RurUrb.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
    )
) 

Cattle_BB_Merge_theta_NecrAmph <- Cattle_Necr_Amph.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
    )
) 

Cattle_BB_Merge_theta_Rel <- Cattle_Rel.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
    )
) 

Cattle_BB_Merge_theta_Fortified <- Cattle_Fort.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
    )
)  %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
    )
)  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
    )
)

Cattle_BB_Merge_theta_Villas <- Cattle_Villas_fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
    ) ) %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
    ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
    )
)

Cattle_BB_Merge_phi <- rbind(Cattle_BB_Merge_theta_UrbRur, Cattle_BB_Merge_theta_Fortified, Cattle_BB_Merge_theta_Villas, Cattle_BB_Merge_theta_Rel, Cattle_BB_Merge_theta_NecrAmph)
Cattle_BB_Merge_phi$TC_text <- factor(Cattle_BB_Merge_phi$TC_text)


################################
# Plotting
################################

Cattle_BB.plot <- Cattle_BB_Merge_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
    )+
    geom_vline(xintercept = inv_logit(mean(Cattle_BB_Merge_a$a)), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Cattle",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        size = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")


Cattle_BB_phi.plot <- Cattle_BB_Merge_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
    geom_vline(xintercept = mean(Cattle_BB_Merge_phi$theta),     
               linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Cattle",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        size = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")

```

```{r}
#| echo: false
#| fig-height: 10

Cattle_BB.plot
Cattle_BB_phi.plot

```

## Caprine

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

# RURAL AND URBAN SITES
dat.Caprine_RurUrb = list(N=d.Animals_RurUrb$Tot_NISP, A=d.Animals_RurUrb$Caprine, Tc_id=d.Animals_RurUrb$TC_id, J=nrow(d.Animals_RurUrb))

# Religious sites
dat.Caprine_Rel = list(N=d.Animals_Rel$Tot_NISP, A=d.Animals_Rel$Caprine, Tc_id=d.Animals_Rel$TC_id, J=nrow(d.Animals_Rel))

# Necropolis and amphitheaters
dat.Caprine_Necr_Amph = list(N=d.Animals_Necr_Amph$Tot_NISP, A=d.Animals_Necr_Amph$Caprine, Tc_id=d.Animals_Necr_Amph$TC_id, J=nrow(d.Animals_Necr_Amph))

# FORTIFIED SETTLEMENTS
dat.Caprine_fort = list(N=d.Animals_fort$Tot_NISP, A=d.Animals_fort$Caprine, Tc_id=d.Animals_fort$TC_id, J=nrow(d.Animals_fort))

# Caprine - Villas
dat.Caprine_villas = list(N=d.Animals_villas$Tot_NISP, A=d.Animals_villas$Caprine, Tc_id=d.Animals_villas$TC_id, J=nrow(d.Animals_villas))

```

```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
#| output: false

Caprine_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan",  # Stan program
  data = dat.Caprine_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

#saveRDS(Caprine_RurUrb.fit, "stan_models/Caprine_RurUrb_fit.rds")

Caprine_Rel.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Relig.stan",  # Stan program
  data = dat.Caprine_Rel,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Caprine_Rel.fit, "stan_models/Caprine_Rel_fit.rds")

Caprine_Necr_Amph.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_NecrAmph.stan",  # Stan program
  data = dat.Caprine_Necr_Amph,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Caprine_Necr_Amph.fit, "stan_models/Caprine_Necr_Amph_fit.rds")

Caprine_Fort.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Caprine_fort,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Caprine_Fort.fit, "stan_models/Caprine_Fort_fit.rds")

Caprine_Villas_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Caprine_villas,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Caprine_Villas_fit, "stan_models/Caprine_Villas_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Caprine_RurUrb.fit <- readRDS("stan_models/Caprine_RurUrb_fit.rds")
Caprine_Rel.fit <- readRDS("stan_models/Caprine_Rel_fit.rds")
Caprine_Necr_Amph.fit <- readRDS("stan_models/Caprine_Necr_Amph_fit.rds")
Caprine_Fort.fit <- readRDS("stan_models/Caprine_Fort_fit.rds")
Caprine_Villas_fit <- readRDS("stan_models/Caprine_Villas_fit.rds")

```

```{r}
#| echo: false

################################################################
## Data handling for ggplot: a and theta/phi parameters
################################################################

Caprine_BB_Merge_a_UrbRur <- Caprine_RurUrb.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
  )
  ) 

Caprine_BB_Merge_a_NecrAmph <- Caprine_Necr_Amph.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
  )
  ) 

Caprine_BB_Merge_a_Rel <- Caprine_Rel.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
  )
  ) 

Caprine_BB_Merge_a_Fortified <- Caprine_Fort.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
  )
  )  %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
  )
  )  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
  )
  )

Caprine_BB_Merge_a_Villas <- Caprine_Villas_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
  ) ) %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
  ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
  )
  )

Caprine_BB_Merge_a <- rbind(Caprine_BB_Merge_a_UrbRur, Caprine_BB_Merge_a_Fortified, Caprine_BB_Merge_a_Villas, Caprine_BB_Merge_a_Rel, Caprine_BB_Merge_a_NecrAmph)
Caprine_BB_Merge_a$TC_text <- factor(Caprine_BB_Merge_a$TC_text)

## Data handling for theta

Caprine_BB_Merge_theta_UrbRur <- Caprine_RurUrb.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
  )
  ) 

Caprine_BB_Merge_theta_NecrAmph <- Caprine_Necr_Amph.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
  )
  ) 

Caprine_BB_Merge_theta_Rel <- Caprine_Rel.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
  )
  ) 

Caprine_BB_Merge_theta_Fortified <- Caprine_Fort.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
  )
  )  %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
  )
  )  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
  )
  )

Caprine_BB_Merge_theta_Villas <- Caprine_Villas_fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
  ) ) %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
  ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
  )
  )

Caprine_BB_Merge_phi <- rbind(Caprine_BB_Merge_theta_UrbRur, Caprine_BB_Merge_theta_Fortified, Caprine_BB_Merge_theta_Villas, Caprine_BB_Merge_theta_Rel, Caprine_BB_Merge_theta_NecrAmph)
Caprine_BB_Merge_phi$TC_text <- factor(Caprine_BB_Merge_phi$TC_text)

# Plotting

Caprine_BB.plot <- Caprine_BB_Merge_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  geom_vline(xintercept = inv_logit(mean(Caprine_BB_Merge_a$a)),     
             linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Caprine",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")


Caprine_BB_phi.plot <- Caprine_BB_Merge_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(
    xintercept = mean(Caprine_BB_Merge_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Caprine",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")

```

```{r}
#| echo: false
#| fig-height: 10

Caprine_BB.plot
Caprine_BB_phi.plot
```

## Edible W. Mammals

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

# RURAL AND URBAN SITES
dat.WMammals_RurUrb = list(N=d.Animals_RurUrb$Tot_NISP, A=d.Animals_RurUrb$Edible.W..Mammals, Tc_id=d.Animals_RurUrb$TC_id, J=nrow(d.Animals_RurUrb))

# Religious sites
dat.WMammals_Rel = list(N=d.Animals_Rel$Tot_NISP, A=d.Animals_Rel$Edible.W..Mammals, Tc_id=d.Animals_Rel$TC_id, J=nrow(d.Animals_Rel))

# Necropolis and amphitheaters
dat.WMammals_Necr_Amph = list(N=d.Animals_Necr_Amph$Tot_NISP, A=d.Animals_Necr_Amph$Edible.W..Mammals, Tc_id=d.Animals_Necr_Amph$TC_id, J=nrow(d.Animals_Necr_Amph))

# FORTIFIED SETTLEMENTS
dat.WMammals_fort = list(N=d.Animals_fort$Tot_NISP, A=d.Animals_fort$Edible.W..Mammals, Tc_id=d.Animals_fort$TC_id, J=nrow(d.Animals_fort))

# WMammals - Villas
dat.WMammals_villas = list(N=d.Animals_villas$Tot_NISP, A=d.Animals_villas$Edible.W..Mammals, Tc_id=d.Animals_villas$TC_id, J=nrow(d.Animals_villas))

```

```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
#| output: false

WMammals_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan", 
  data = dat.WMammals_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4              # number of cores (could use one per chain
)

saveRDS(WMammals_RurUrb.fit, "stan_models/WMammals_RurUrb_fit.rds")

WMammals_Rel.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Relig.stan",  # Stan program
  data = dat.WMammals_Rel,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4              # number of cores (could use one per chain
)
saveRDS(WMammals_Rel.fit, "stan_models/WMammals_Rel_fit.rds")

WMammals_Necr_Amph.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_NecrAmph.stan",  # Stan program
  data = dat.WMammals_Necr_Amph,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(WMammals_Necr_Amph.fit, "stan_models/WMammals_Necr_Amph_fit.rds")

WMammals_Fort.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.WMammals_fort,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(WMammals_Fort.fit, "stan_models/WMammals_Fort_fit.rds")

WMammals_Villas_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.WMammals_villas,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(WMammals_Villas_fit, "stan_models/WMammals_Villas_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

WMammals_RurUrb.fit <- readRDS("stan_models/WMammals_RurUrb_fit.rds")
WMammals_Rel.fit <- readRDS("stan_models/WMammals_Rel_fit.rds")
WMammals_Necr_Amph.fit <- readRDS("stan_models/WMammals_Necr_Amph_fit.rds")
WMammals_Fort.fit <- readRDS("stan_models/WMammals_Fort_fit.rds")
WMammals_Villas_fit <- readRDS("stan_models/WMammals_Villas_fit.rds")

```

```{r}
#| echo: false

################################################################
## Data handling for ggplot: a and theta/phi parameters
################################################################

WMammals_BB_Merge_a_UrbRur <- WMammals_RurUrb.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
  )
  ) 

WMammals_BB_Merge_a_NecrAmph <- WMammals_Necr_Amph.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
  )
  ) 

WMammals_BB_Merge_a_Rel <- WMammals_Rel.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
  )
  ) 

WMammals_BB_Merge_a_Fortified <- WMammals_Fort.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
  )
  )  %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
  )
  )  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
  )
  )

WMammals_BB_Merge_a_Villas <- WMammals_Villas_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
  ) ) %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
  ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
  )
  )

WMammals_BB_Merge_a <- rbind(WMammals_BB_Merge_a_UrbRur, WMammals_BB_Merge_a_Fortified, WMammals_BB_Merge_a_Villas, WMammals_BB_Merge_a_Rel, WMammals_BB_Merge_a_NecrAmph)
WMammals_BB_Merge_a$TC_text <- factor(WMammals_BB_Merge_a$TC_text)

## Data handling for theta

WMammals_BB_Merge_theta_UrbRur <- WMammals_RurUrb.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
  )
  ) 

WMammals_BB_Merge_theta_NecrAmph <- WMammals_Necr_Amph.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
  )
  ) 

WMammals_BB_Merge_theta_Rel <- WMammals_Rel.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
  )
  ) 

WMammals_BB_Merge_theta_Fortified <- WMammals_Fort.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
  )
  )  %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
  )
  )  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
  )
  )

WMammals_BB_Merge_theta_Villas <- WMammals_Villas_fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
  ) ) %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
  ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
  )
  )

WMammals_BB_Merge_phi <- rbind(WMammals_BB_Merge_theta_UrbRur, WMammals_BB_Merge_theta_Fortified, WMammals_BB_Merge_theta_Villas, WMammals_BB_Merge_theta_Rel, WMammals_BB_Merge_theta_NecrAmph)
WMammals_BB_Merge_phi$TC_text <- factor(WMammals_BB_Merge_phi$TC_text)

# Plotting

WMammals_BB.plot <- WMammals_BB_Merge_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  geom_vline(xintercept = inv_logit(mean(WMammals_BB_Merge_a$a)),     
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Edible Wild Mammals",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")


WMammals_BB_phi.plot <- WMammals_BB_Merge_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(
    xintercept = mean(WMammals_BB_Merge_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Edible Wild Mammals",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")

```

```{r}
#| echo: false
#| fig-height: 10

WMammals_BB.plot
WMammals_BB_phi.plot
```

# Macroregion

```{r}
#| echo: false

d.Animals_Reg <- Animals_Df2
d.Animals_Reg$Reg_id <- as.integer(interaction(d.Animals_Reg$Macroregion, d.Animals_Reg$Chronology))

dat.Pigs_Reg = list(N=d.Animals_Reg$Tot_NISP, A=d.Animals_Reg$Pigs, Reg_id=d.Animals_Reg$Reg_id, J=nrow(d.Animals_Reg))
dat.Cattle_Reg = list(N=d.Animals_Reg$Tot_NISP, A=d.Animals_Reg$Cattle, Reg_id=d.Animals_Reg$Reg_id, J=nrow(d.Animals_Reg))
dat.Caprine_Reg = list(N=d.Animals_Reg$Tot_NISP, A=d.Animals_Reg$Caprine, Reg_id=d.Animals_Reg$Reg_id, J=nrow(d.Animals_Reg))
dat.WMammals_Reg = list(N=d.Animals_Reg$Tot_NISP, A=d.Animals_Reg$Edible.W..Mammals, Reg_id=d.Animals_Reg$Reg_id, J=nrow(d.Animals_Reg))

```

## Pigs

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Pigs_Reg.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_reg.stan",  # Stan program
  data = dat.Pigs_Reg,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Pigs_Reg.fit, "stan_models/Pigs_Reg_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Pigs_Reg.fit <- readRDS("stan_models/Pigs_Reg_fit.rds")

Pigs_Reg.fit_a <- Pigs_Reg.fit %>%
  spread_draws(a[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Northern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

Pigs_Reg.fit_phi <- Pigs_Reg.fit %>%
  spread_draws(theta[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

# Plotting

Pigs_Reg.plot <- Pigs_Reg.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    geom_vline(
    xintercept = inv_logit(mean(Pigs_Reg.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Pigs",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each macroregion and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


Pigs_Reg_phi.plot <- Pigs_Reg.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Pigs_Reg.fit_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Pigs",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


```

```{r}
#| echo: false
#| fig-height: 8

Pigs_Reg.plot
Pigs_Reg_phi.plot
```

## Cattle

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Cattle_Reg.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_reg.stan",  # Stan program
  data = dat.Cattle_Reg,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Cattle_Reg.fit, "stan_models/Cattle_Reg_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Cattle_Reg.fit <- readRDS("stan_models/Cattle_Reg_fit.rds")

Cattle_Reg.fit_a <- Cattle_Reg.fit %>%
  spread_draws(a[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

Cattle_Reg.fit_phi <- Cattle_Reg.fit %>%
  spread_draws(theta[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

# Plotting

Cattle_Reg.plot <- Cattle_Reg.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    geom_vline(
    xintercept = inv_logit(mean(Cattle_Reg.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Cattle",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each macroregion and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


Cattle_Reg_phi.plot <- Cattle_Reg.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Cattle_Reg.fit_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Cattle",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


```

```{r}
#| echo: false
#| fig-height: 8

Cattle_Reg.plot
Cattle_Reg_phi.plot
```

## Caprine

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false

########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Caprine_Reg.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_reg.stan",  # Stan program
  data = dat.Caprine_Reg,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
#saveRDS(Caprine_Reg.fit, "stan_models/Caprine_Reg_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Caprine_Reg.fit <- readRDS("stan_models/Caprine_Reg_fit.rds")

Caprine_Reg.fit_a <- Caprine_Reg.fit %>%
  spread_draws(a[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

Caprine_Reg.fit_phi <- Caprine_Reg.fit %>%
  spread_draws(theta[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

# Plotting

Caprine_Reg.plot <- Caprine_Reg.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    geom_vline(
    xintercept = inv_logit(mean(Caprine_Reg.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Caprine",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each macroregion and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


Caprine_Reg_phi.plot <- Caprine_Reg.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Caprine_Reg.fit_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Caprine",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


```

```{r}
#| echo: false
#| fig-height: 8

Caprine_Reg.plot
Caprine_Reg_phi.plot
```

## Edible W. Mammals

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

WMammals_Reg.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_reg.stan",  # Stan program
  data = dat.WMammals_Reg,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)


saveRDS(WMammals_Reg.fit, "stan_models/WMammals_Reg_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

WMammals_Reg.fit <- readRDS("stan_models/WMammals_Reg_fit.rds")

WMammals_Reg.fit_a <- WMammals_Reg.fit %>%
  spread_draws(a[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Northern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

WMammals_Reg.fit_phi <- WMammals_Reg.fit %>%
  spread_draws(theta[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

# Plotting

WMammals_Reg.plot <- WMammals_Reg.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  geom_vline(
    xintercept = inv_logit(mean(WMammals_Reg.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Edible Wild Mammals",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each macroregion and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


WMammals_Reg_phi.plot <- WMammals_Reg.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(WMammals_Reg.fit_phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Edible Wild Mammals",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


```

```{r}
#| echo: false
#| fig-height: 8

WMammals_Reg.plot
WMammals_Reg_phi.plot
```

# Geography

```{r}
#| echo: false

d.Animals_Geo <- Animals_Df2
d.Animals_Geo$Geo_id <- as.integer(interaction(d.Animals_Geo$Geo,d.Animals_Geo$Chronology))

dat.Pigs_Geo = list(N=d.Animals_Geo$Tot_NISP, A=d.Animals_Geo$Pigs, Geo_id=d.Animals_Geo$Geo_id, J=nrow(d.Animals_Geo))
dat.Cattle_Geo = list(N=d.Animals_Geo$Tot_NISP, A=d.Animals_Geo$Cattle, Geo_id=d.Animals_Geo$Geo_id, J=nrow(d.Animals_Geo))
dat.Caprine_Geo = list(N=d.Animals_Geo$Tot_NISP, A=d.Animals_Geo$Caprine, Geo_id=d.Animals_Geo$Geo_id, J=nrow(d.Animals_Geo))
dat.WMammals_Geo = list(N=d.Animals_Geo$Tot_NISP, A=d.Animals_Geo$Edible.W..Mammals, Geo_id=d.Animals_Geo$Geo_id, J=nrow(d.Animals_Geo))


```

## Pigs

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Pigs_Geo.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_geo.stan",  # Stan program
  data = dat.Pigs_Geo,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

#saveRDS(Pigs_Geo.fit, "stan_models/Pigs_Geo_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Pigs_Geo.fit <- readRDS("stan_models/Pigs_Geo_fit.rds")

Pigs_Geo.fit_a <- Pigs_Geo.fit %>%
  spread_draws(a[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

Pigs_Geo.fit_phi <- Pigs_Geo.fit %>%
  spread_draws(theta[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

# Plotting

Pigs_Geo.plot <- Pigs_Geo.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    geom_vline(
    xintercept = inv_logit(mean(Pigs_Geo.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Pigs",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each macroregion and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")


Pigs_Geo_phi.plot <- Pigs_Geo.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Pigs_Geo.fit_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Pigs",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")
```

```{r}
#| echo: false
#| fig-height: 10

Pigs_Geo.plot
Pigs_Geo_phi.plot
```

## Cattle

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Cattle_Geo.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_geo.stan",  # Stan program
  data = dat.Cattle_Geo,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

#saveRDS(Cattle_Geo.fit, "stan_models/Cattle_Geo_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Cattle_Geo.fit <- readRDS("stan_models/Cattle_Geo_fit.rds")

Cattle_Geo.fit_a <- Cattle_Geo.fit %>%
  spread_draws(a[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

Cattle_Geo.fit_phi <- Cattle_Geo.fit %>%
  spread_draws(theta[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

# Plotting

Cattle_Geo.plot <- Cattle_Geo.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  geom_vline(
    xintercept = inv_logit(mean(Cattle_Geo.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Cattle",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each macroregion and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")


Cattle_Geo_phi.plot <- Cattle_Geo.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Cattle_Geo.fit_phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Cattle",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")
```

```{r}
#| echo: false
#| fig-height: 10

Cattle_Geo.plot
Cattle_Geo_phi.plot
```

## Caprine

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Caprine_Geo.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_geo.stan",  # Stan program
  data = dat.Caprine_Geo,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

#saveRDS(Caprine_Geo.fit, "stan_models/Caprine_Geo_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Caprine_Geo.fit <- readRDS("stan_models/Caprine_Geo_fit.rds")

Caprine_Geo.fit_a <- Caprine_Geo.fit %>%
  spread_draws(a[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

Caprine_Geo.fit_phi <- Caprine_Geo.fit %>%
  spread_draws(theta[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

# Plotting

Caprine_Geo.plot <- Caprine_Geo.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  geom_vline(
    xintercept = inv_logit(mean(Caprine_Geo.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Caprine",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each macroregion and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")


Caprine_Geo_phi.plot <- Caprine_Geo.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Caprine_Geo.fit_phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Caprine",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")
```

```{r}
#| echo: false
#| fig-height: 10

Caprine_Geo.plot
Caprine_Geo_phi.plot
```

## Edible W. Mammals

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

WMammals_Geo.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_geo.stan",  # Stan program
  data = dat.WMammals_Geo,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(WMammals_Geo.fit, "stan_models/WMammals_Geo_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

WMammals_Geo.fit <- readRDS("stan_models/WMammals_Geo_fit.rds")

WMammals_Geo.fit_a <- WMammals_Geo.fit %>%
  spread_draws(a[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

WMammals_Geo.fit_phi <- WMammals_Geo.fit %>%
  spread_draws(theta[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

# Plotting

WMammals_Geo.plot <- WMammals_Geo.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  geom_vline(
    xintercept = inv_logit(mean(WMammals_Geo.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credibility interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Edible Wild Mammals",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each macroregion and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")


WMammals_Geo_phi.plot <- WMammals_Geo.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(WMammals_Geo.fit_phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Edible Wild Mammals",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each site type and chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")
```

```{r}
#| echo: false
#| fig-height: 10

WMammals_Geo.plot
WMammals_Geo_phi.plot
```

# Altitude

Proposed model:

$$
P_{i} \sim BetaBinomial(NISP_{i}, \bar{p}_{i} , \phi_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + \beta_{[ChrID]}\cdot Alt_{i}
$$

$$
\alpha_{ChrID} \sim Normal(0,1.5)
$$

$$
\beta_{ChrID} \sim Normal(0,1.5)
$$

$$
\phi \sim Exponential(1)
$$

```{r}
#| echo: false
#| eval: true
#| message: false

# Libraries
library(tidybayes)
library(tidyverse)
library(tidybayes.rethinking)
library(modelr)

# Load dataset
zoo_altitude <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/Zooarch_Condensed_with_altitude.csv", header=TRUE, sep=";")

# Add distance to coast
# Need to calculate the distance of each point from the coast
# Load the libraries
library(geosphere)
library(sf)

# Load a coast shapefile
coast <- readOGR('/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Italy_SHP/ne_110m_coastline/ne_110m_coastline.shp')
coast <- st_as_sf(coast, crs = st_crs(italy))

# Convert bot_altitude to a sf object
zoo_altitude.sf <- st_as_sf(zoo_altitude, crs=st_crs(italy), coords=c("X","Y"))

zoo_coast_dists = data.frame(
  st_distance(zoo_altitude.sf, coast) / 1000
  )

zoo_altitude_dists <- zoo_altitude.sf

zoo_altitude_dists$Dist_Coast <- apply(zoo_coast_dists, 1, min)


# End distance to coast

###########
# CAPRINE #
###########

# Create dataframe for the chosen animal
# Can't create list directly from original dataset as I have to select
# only observations > 0 

caprine_altitude <- data.frame(
  Site_ID = zoo_altitude$ID,
  Macroregion = factor(zoo_altitude$Macroregion),
  Altitude = zoo_altitude$Altitude,
  Dist_Coast = zoo_altitude_dists$Dist_Coast,
  Chronology = factor(zoo_altitude$Chronology),
  Capr_NISP = zoo_altitude$Caprine,
  Tot_NISP = rowSums(zoo_altitude[c(16:24)], na.rm = T)
)

# Subset by removing NAs and choosing positive altitudes
caprine_altitude[is.na(caprine_altitude)] <- 0
caprine_altitude <- subset(caprine_altitude, Altitude>0 & Capr_NISP>0)

# Finally creating the list
dat.Caprine_Altitude = list(
  N = caprine_altitude$Tot_NISP, 
  A = caprine_altitude$Capr_NISP, 
  Chr_id = as.factor(as.numeric(caprine_altitude$Chronology)), 
  Alt = caprine_altitude$Altitude,
  J = nrow(caprine_altitude)
  )

dat.Caprine_Alt_Coast = list(
  N = caprine_altitude$Tot_NISP, 
  A = caprine_altitude$Capr_NISP, 
  Chr_id = as.factor(as.numeric(caprine_altitude$Chronology)), 
  Alt = caprine_altitude$Altitude,
  Dist_Coast = caprine_altitude$Dist_Coast,
  J = nrow(caprine_altitude)
  )

###########
# PIGS    #
###########

pigs_altitude <- data.frame(
  Site_ID = zoo_altitude$ID,
  Macroregion = factor(zoo_altitude$Macroregion),
  Altitude = zoo_altitude$Altitude,
  Chronology = factor(zoo_altitude$Chronology),
  Pigs_NISP = zoo_altitude$Pigs,
  Tot_NISP = rowSums(zoo_altitude[c(16:24)], na.rm = T)
)

pigs_altitude[is.na(pigs_altitude)] <- 0
pigs_altitude <- subset(pigs_altitude, Altitude>0 & Pigs_NISP>0)


dat.Pigs_Altitude = list(
  N = pigs_altitude$Tot_NISP, 
  A = pigs_altitude$Pigs_NISP, 
  Chr_id = as.factor(as.numeric(pigs_altitude$Chronology)), 
  Alt = pigs_altitude$Altitude,
  J = nrow(pigs_altitude)
  )

###########
# CATTLE  #
###########

cattle_altitude <- data.frame(
  Site_ID = zoo_altitude$ID,
  Macroregion = factor(zoo_altitude$Macroregion),
  Altitude = zoo_altitude$Altitude,
  Chronology = factor(zoo_altitude$Chronology),
  Cattle_NISP = zoo_altitude$Cattle,
  Tot_NISP = rowSums(zoo_altitude[c(16:24)], na.rm = T)
)

cattle_altitude[is.na(cattle_altitude)] <- 0
cattle_altitude <- subset(cattle_altitude, Altitude>0 & Cattle_NISP>0)


dat.Cattle_Altitude = list(
  N = cattle_altitude$Tot_NISP, 
  A = cattle_altitude$Cattle_NISP, 
  Chr_id = as.factor(as.numeric(cattle_altitude$Chronology)), 
  Alt = cattle_altitude$Altitude,
  J = nrow(cattle_altitude)
  )

######################
# Edible W. Mammals  #
######################

WMammals_altitude <- data.frame(
  Site_ID = zoo_altitude$ID,
  Macroregion = factor(zoo_altitude$Macroregion),
  Altitude = zoo_altitude$Altitude,
  Chronology = factor(zoo_altitude$Chronology),
  WMammals_NISP = zoo_altitude$Edible.W..Mammals,
  Tot_NISP = rowSums(zoo_altitude[c(16:24)], na.rm = T)
)

WMammals_altitude[is.na(WMammals_altitude)] <- 0
WMammals_altitude <- subset(WMammals_altitude, Altitude>0 & WMammals_NISP>0)

dat.WMammals_Altitude = list(
  N = WMammals_altitude$Tot_NISP, 
  A = WMammals_altitude$WMammals_NISP, 
  Chr_id = as.factor(as.numeric(WMammals_altitude$Chronology)), 
  Alt = WMammals_altitude$Altitude,
  J = nrow(WMammals_altitude)
  )

```

## Pigs

```{r}
#| eval: false
#| echo: false


# CODE WITH Rethinking MODEL
# Only one phi/theta

Pigs_Alt_fit.reth <- ulam(
    alist(
        A ~ dbetabinom( N , pbar , theta ),
        logit(pbar) <- a[Chr_id] + b[Chr_id]*(Alt/1000.0),
        a[Chr_id] ~ dnorm( 0 , 1.5 ),
        b[Chr_id] ~ dnorm( 0 , 1.5 ),
        transpars> theta <<- phi + 2.0,
        phi ~ dexp(1)
    ), data=dat.Pigs_Altitude , chains=4 )

saveRDS(Pigs_Alt_fit.reth, "stan_models/Pigs_Alt_fit_rethinking.rds")

```

```{r}
#| echo: false
#| message: false
#| warning: false


Pigs_Alt_fit.reth <- readRDS("stan_models/Pigs_Alt_fit_rethinking.rds")
Pigs_Alt_fit.reth.post <- extract.samples(Pigs_Alt_fit.reth)

Pigs_Alt_fit_reth.plot <- as.data.frame(dat.Pigs_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(Pigs_Alt_fit.reth) %>%
  ggplot(aes(x = Alt/1000, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="P (Pigs | Total NISP)",
       x="Altitude (km)",
       title="Pigs",
       subtitle="Altitude",
       caption = bquote("Precision parameter ("~phi~"): " ~ .(round(mean(Pigs_Alt_fit.reth.post$theta), 2)))
)+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

Pigs_Alt_fit_reth.plot

```

## Cattle

```{r}
#| eval: false
#| echo: false


# CODE WITH Rethinking MODEL
# Only one phi/theta

Cattle_Alt_fit.reth <- ulam(
    alist(
        A ~ dbetabinom( N , pbar , theta ),
        logit(pbar) <- a[Chr_id] + b[Chr_id]*(Alt/1000.0),
        a[Chr_id] ~ dnorm( 0 , 1.5 ),
        b[Chr_id] ~ dnorm( 0 , 1.5 ),
        transpars> theta <<- phi + 2.0,
        phi ~ dexp(1)
    ), data=dat.Cattle_Altitude , chains=4 )

saveRDS(Cattle_Alt_fit.reth, "stan_models/Cattle_Alt_fit_rethinking.rds")

```

```{r}
#| echo: false
#| message: false
#| warning: false


Cattle_Alt_fit.reth <- readRDS("stan_models/Cattle_Alt_fit_rethinking.rds")
Cattle_Alt_fit.reth.post <- extract.samples(Cattle_Alt_fit.reth)

Cattle_Alt_fit_reth.plot <- as.data.frame(dat.Cattle_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(Cattle_Alt_fit.reth) %>%
  ggplot(aes(x = Alt/1000, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="P (Cattle | Total NISP)",
       x="Altitude (km)",
       title="Cattle",
       subtitle="Altitude",
       caption = bquote("Precision parameter ("~phi~"): " ~ .(round(mean(Cattle_Alt_fit.reth.post$theta), 2)))
)+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

Cattle_Alt_fit_reth.plot

```

## Caprine

```{r}
#| eval: false
#| echo: false

# MODELS

# CODE WITH STAN MODEL
# THIS GIVES A THETA FOR EACH CHRONOLOGY
Capr_Alt_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_capr_altitude2.stan",  # Stan program
  data = dat.Caprine_Altitude,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4
)


# CODE WITH Rethinking MODEL
# Only one phi/theta

Capr_Alt_fit.reth <- ulam(
    alist(
        A ~ dbetabinom( N , pbar , theta ),
        logit(pbar) <- a[Chr_id] + b[Chr_id]*(Alt/1000.0),
        a[Chr_id] ~ dnorm( 0 , 1.5 ),
        b[Chr_id] ~ dnorm( 0 , 1.5 ),
        transpars> theta <<- phi + 2.0,
        phi ~ dexp(1)
    ), data=dat.Caprine_Altitude , chains=4, log_lik = T )

saveRDS(Capr_Alt_fit.reth, "stan_models/Capr_Alt_fit_rethinking.rds")

```

```{r}
#| echo: false

Capr_Alt_fit.reth <- readRDS("stan_models/Capr_Alt_fit_rethinking.rds")
Capr_Alt_fit.reth.post <- extract.samples(Capr_Alt_fit.reth)
#Capr_Alt_fit.post <- extract.samples(Capr_Alt_fit)


Capr_Alt_fit_reth.plot <- as.data.frame(dat.Caprine_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(Capr_Alt_fit.reth) %>%
  ggplot(aes(x = Alt/1000, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="P (Caprine | Total NISP)",
       x="Altitude (km)",
       title="Caprine",
       subtitle="Altitude",
       caption = bquote("Precision parameter ("~phi~"): " ~ .(round(mean(Capr_Alt_fit.reth.post$theta), 2)))
)+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

Capr_Alt_fit_reth.plot


```

```{r}
#| eval: false
#| echo: false


###########################
## PLOTS WITH STAN MODEL
###########################

# PHI PLOT

Capr_Alt_fit.phi <- Capr_Alt_fit %>%
  spread_draws(theta[Chr_id]) %>% 
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )
  ) 

Capr_Alt_fit_phi.plot <- Capr_Alt_fit.phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Capr_Alt_fit.phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Caprine",
       subtitle="Altitude",
       caption="The dashed line indicates the mean for each chronology.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )

```

## Edible W. Mammals

```{r}
#| eval: false
#| echo: false


# CODE WITH Rethinking MODEL
# Only one phi/theta

WMammals_Alt_fit.reth <- ulam(
  alist(
    A ~ dbetabinom( N , pbar , theta ),
    logit(pbar) <- a[Chr_id] + b[Chr_id]*(Alt/1000.0),
    a[Chr_id] ~ dnorm( 0 , 1.5 ),
    b[Chr_id] ~ dnorm( 0 , 1.5 ),
    transpars> theta <<- phi + 2.0,
    phi ~ dexp(1)
  ), data=dat.WMammals_Altitude , chains=4 )

saveRDS(WMammals_Alt_fit.reth, "stan_models/WMammals_Alt_fit_rethinking.rds")

```

```{r}
#| echo: false
#| message: false
#| warning: false

WMammals_Alt_fit.reth <- readRDS("stan_models/WMammals_Alt_fit_rethinking.rds")
WMammals_Alt_fit.reth.post <- extract.samples(WMammals_Alt_fit.reth)

WMammals_Alt_fit_reth.plot <- as.data.frame(dat.WMammals_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(WMammals_Alt_fit.reth) %>%
  ggplot(aes(x = Alt/1000, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Edible Wild Mammals | Total NISP)",
    x="Altitude (km)",
    title="Edible Wild Mammals",
    subtitle="Altitude",
    caption = bquote("Precision parameter ("~phi~"): " ~ .(round(mean(WMammals_Alt_fit.reth.post$theta), 2)))
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

WMammals_Alt_fit_reth.plot

```

## Community plot

```{r}
#| echo: false

WMamm_post.a <- as.data.frame(WMammals_Alt_fit.reth.post) %>% mutate(animal = "W_Mammals")
Pigs_post.a <- as.data.frame(Pigs_Alt_fit.reth.post) %>% mutate(animal = "Pigs")
Cattle_post.a <- as.data.frame(Cattle_Alt_fit.reth.post) %>% mutate(animal = "Cattle")
Caprine_post.a <- as.data.frame(Capr_Alt_fit.reth.post) %>% mutate(animal = "Caprine")

Domestic_Alt_binded <- bind_rows(
  WMamm_post.a,
  Pigs_post.a,
  Cattle_post.a,
  Caprine_post.a
)
names(Domestic_Alt_binded)[1:8] <- c("a.EMA", "a.LR", "a.Ma", "a.R", "b.EMA", "b.LR", "b.Ma", "b.R")

# Reshape
Domestic_Alt_R <- Domestic_Alt_binded %>%
  select(animal, a= a.R, b= b.R) %>%
  mutate(Chronology = "R")

Domestic_Alt_LR <- Domestic_Alt_binded %>%
  select(animal, a=a.LR, b=b.LR) %>%
  mutate(Chronology = "LR")

Domestic_Alt_EMA <- Domestic_Alt_binded %>%
  select(animal, a=a.EMA, b=b.EMA) %>%
  mutate(Chronology = "EMA")

Domestic_Alt_Ma <- Domestic_Alt_binded %>%
  select(animal, a=a.Ma, b=b.Ma) %>%
  mutate(Chronology = "Ma")

Domestic_Alt_post <- bind_rows(Domestic_Alt_R, Domestic_Alt_LR, Domestic_Alt_EMA, Domestic_Alt_Ma)

# end reshape

Domestic_Alt_post.plot <- ggplot(Domestic_Alt_post, aes(x = a, y = b, color = animal)) +
  geom_point(alpha = .4) +
  theme_tidybayes() +
  scale_color_brewer(palette = "Spectral") +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +  
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  labs(
    x = "Intercept",
    y = "Slope",
    color = "Animal",
    title = "Model estimates: logit(p) = Intercept+Slope*Altitude",
    subtitle = "Altitude"
  )+
  facet_grid(factor(Chronology, levels=chrono_levels)~., scales="free")


```

```{r}
#| echo: false
#| fig-height: 10
#| label: fig-domestic-alt
#| fig-cap: "MCMC estimates for slope and intercept plotted in the logit scale. Negative slopes indicate a negative relationship between the animal remains and increasing altitude. Intercepts were kept as a baseline occurrence probability of the species. Species on the left of the graph are rarer, species on the right are more common. It is important to notice that this represents the species response to elevation." 

Domestic_Alt_post.plot
```
