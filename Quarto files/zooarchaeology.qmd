---
always_allow_html: true
---

# Zooarchaeology {#sec-zooarchaeology style="text-align:justify;"}

```{r}
#| echo: false
#| message: false

# Load functions
source('functions_zoo.R')
library(tidyverse)
library(fontawesome) 
library(vegan)

```

```{r}
#| echo: false

zooarch_cond <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/Zooarch_Condensed.csv", header=TRUE, sep=";")

```

The faunal dataset used in this study is both extensive and diverse, containing 466 records. While NISP is a useful proxy for historical livestock keeping, it is not without its limitations, as discussed in @sec-methods. However, it is important to highlight the presence of overdispersion within the data, which requires more sophisticated and nuanced approaches than simply calculating overall means for each animal species. Overdispersion is a common occurrence when analysing datasets of this nature, given the specific factors at play in each context, including historical and depositional influences. Nevertheless, data modelling requires simplification and causal reasoning, and the best approach is to start with simple models that can account for overdispersion and generate credible distributions.

To this end, Bayesian hierarchical models were developed for each chronology, context type, macroregion, and geography. As a further step, an additional analysis was conducted that solely focused on altitude and chronology as predictors. By examining the specific contributions of altitude and chronology in predicting animal farming/consumption patterns, this analysis provides valuable insights that complement the earlier models. These findings underscore the importance of considering multiple factors when studying the probability of occurrence of farmed and wild animals in historical contexts. They also demonstrate the potential benefits of simplified models to focus on key predictors. Moreover, several attempts were made to create a coherent understanding of the likelihood of economically valuable animals occurring during the first millennium, in order to provide a more comprehensive perspective on the role of animal farming in shaping historical societies.

## Data exploration

As mentioned above, the faunal dataset used in this study exhibits overdispersion, which is a common problem when analysing datasets of this type. The term 'overdispersion' refers to the presence of greater variability in the data than would be expected based on a normal curve (@fig-curves-dispersion-example).

In this section, we will present the distribution of the animals of interest to provide a visual representation of the dispersion within the dataset. By examining the distribution curves, we can better understand the variability that exists within the dataset, and use this information to develop more accurate models. In @fig-faunal-rem-distributions, it is evident that the distribution of animal remains in the faunal dataset is not symmetrical and does not conform to a normal curve. This non-normal distribution indicates that the standard measures of central tendency, such as mean and median, may not accurately capture the overall distribution of the data. Traditional statistical measures, such as measures of central tendency and dispersion, are often used in frequentist approaches to data analysis. However, these measures may not be appropriate for analysing the complex patterns of animal farming and consumption in the faunal dataset due to the presence of overdispersion. As an alternative, Bayesian multilevel models can account for overdispersion by incorporating appropriate probability distributions, such as the betabinomial distribution.

```{r}
#| echo: false
#| label: fig-curves-dispersion-example
#| fig-cap: "Probability density curves of three simulated normal distributions, representing underdispersed (sd = 0.5), normal (sd = 1), and overdispersed (sd = 2) data." 

plot(seq(0, 10, length.out = 100), 
     dnorm(seq(0, 10, length.out = 100), mean = 5, sd = 0.5), 
     type = "l", col = "#838B8B",
     xlab = "x", ylab = "Density", ylim = c(0, 1.5), yaxs = "i", lty=3)
lines(seq(0, 10, length.out = 100), 
      dnorm(seq(0, 10, length.out = 100), mean = 5, sd = 1), 
      col = "#00688B")
lines(seq(0, 10, length.out = 100), dnorm(seq(0, 10, length.out = 100), mean = 5, sd = 2), col = "#8B1A1A", lty=5)
legend("topright", legend = c("Underdispersed", "Normal", "Overdispersed"),
       col = c("#838B8B", "#00688B", "#8B1A1A"), lty = 1)


```

```{r}
#| echo: false

library(tidybayes)

# Create a copy of the dataframe
zooarch_cond_densityplot <- zooarch_cond 

# Remove NAs
zooarch_cond_densityplot[is.na(zooarch_cond_densityplot)]<-0

# Create a total column (to create proportions)
zooarch_cond_densityplot$Tot_NISP = rowSums(zooarch_cond_densityplot[,15:23])

# Remove not needed animals
zooarch_cond_densityplot = zooarch_cond_densityplot[,-c(20:23)]

# Rename columns for plot
colnames(zooarch_cond_densityplot)[18:19] <- c("Dom.Fowl", "Ed.Wild")

# Remove duplicates (caused by chronology column)
zooarch_cond_densityplot <- zooarch_cond_densityplot[,-5] 
zooarch_cond_densityplot <- zooarch_cond_densityplot[!duplicated(zooarch_cond_densityplot),]

# Reshape: Wide -> Longer
zooarch_cond_densityplot = zooarch_cond_densityplot %>%
  pivot_longer(cols = c("Pigs", "Cattle", "Caprine", "Dom.Fowl", "Ed.Wild"),
               names_to = "animal",
               values_to = "Value") %>%
  mutate(Value_Type="NISP")

# Create a proportions database
zooarch_cond_densityplot_props=zooarch_cond_densityplot %>%
  mutate(Value=zooarch_cond_densityplot$Value/zooarch_cond_densityplot$Tot_NISP)  %>%
  mutate(Value_Type="Proportions")

# Bind the dataframe to the previous one
zooarch_cond_densityplot = rbind(zooarch_cond_densityplot, zooarch_cond_densityplot_props)

# Just keep columns of interest
zooarch_cond_densityplot = zooarch_cond_densityplot[,c(15:17)]

# No need to keep the temporary dataframe for proportions anymore
rm(zooarch_cond_densityplot_props)

```

```{r}
#| echo: false
#| fig-height: 7
#| label: fig-faunal-rem-distributions
#| fig-cap: "Distribution of animal remains in the dataset, displayed both by NISP raw value and NISP proportions."

zooarch_cond_densityplot %>% 
  ggplot(aes(x=Value)) +
  geom_density(aes(y=after_stat(ndensity)), adjust=1, color = "red4", linewidth=0.75)+
  facet_grid(factor(animal, levels = c("Pigs", "Cattle", "Caprine", "Dom.Fowl", "Ed.Wild"))~Value_Type, scales="free_x")+
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 5),
    sec.axis = dup_axis()
  ) +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1,
                                        colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="Density",
       x="Value",
       title="Distribution of main faunal remains"
       )

```

## Chronology {style="text-align:justify;"}

```{r}
#| echo: false
#| message: false
#| warning: false

####################
## Data pre-processing
####################

library(rethinking)

# 1. Making a copy of the original data frame
Animals_Condensed <- zooarch_cond

# 2. Calculating Total NISP
Animals_Condensed$Tot_NISP <- rowSums(Animals_Condensed[c(15:23)], na.rm = T)

Animals_by_Chronology <- Animals_Condensed

# 3. Remove duplicate chronologies because we are just dealing with centuries
Animals_Condensed <- Animals_Condensed[,-5] # Remove Chronology
Animals_Condensed <- Animals_Condensed[!duplicated(Animals_Condensed),]

## TRENDS BY CENTURY
# 4. Replicating rows (to have breakdown by century)
Animals_Expanded <- Animals_Condensed %>%
  mutate(Century = map2(From.Century, To.Century, seq)) %>%
  unnest(cols = Century) %>%
  filter(Century != 0)

# 5. Preparing the dataframe for the model
# Removing the columns from and to century, reference
Animals_by_Century <- Animals_Expanded[,-c(9:11)]
Animals_by_Century <- Animals_by_Century %>% relocate(Century, .after = Site)

Animals_by_Century <- subset(Animals_by_Century, Century >= -1 & Century<=11)

## TRENDS BY CHRONOLOGY

Animals_by_Chronology[is.na(Animals_by_Chronology)] <- 0 # Remove NAs
Animals_by_Chronology$Chronology <- factor(Animals_by_Chronology$Chronology)

# Create a list for STAN
dat.Pigs_by_Chronology = list(
  N = Animals_by_Chronology$Tot_NISP,
  A = Animals_by_Chronology$Pigs,
  Chronology = Animals_by_Chronology$Chronology,
  J = nrow(Animals_by_Chronology)
)
dat.Cattle_by_Chronology = list(
  N = Animals_by_Chronology$Tot_NISP,
  A = Animals_by_Chronology$Cattle,
  Chronology = Animals_by_Chronology$Chronology,
  J = nrow(Animals_by_Chronology)
)
dat.Caprine_by_Chronology = list(
  N = Animals_by_Chronology$Tot_NISP,
  A = Animals_by_Chronology$Caprine,
  Chronology = Animals_by_Chronology$Chronology,
  J = nrow(Animals_by_Chronology)
)
dat.E_WMammals_by_Chronology = list(
  N = Animals_by_Chronology$Tot_NISP,
  A = Animals_by_Chronology$Edible.W..Mammals,
  Chronology = Animals_by_Chronology$Chronology,
  J = nrow(Animals_by_Chronology)
)
dat.DomFowl_by_Chronology = list(
  N = Animals_by_Chronology$Tot_NISP,
  A = Animals_by_Chronology$Dom..Fowl,
  Chronology = Animals_by_Chronology$Chronology,
  J = nrow(Animals_by_Chronology)
)

```

### Trends by century

The proposed model uses a betabinomial distribution to model overdispersion in the data and estimates the precision (or shape) parameter $\phi$ in the Beta distribution. The $A$ on the left side of the formula is the outcome variable, which represents the animal NISP count for each observed sample $i$. The model is intercept-only, meaning that there are no further predictors included in the model. The average probability of success $\bar{p}_{i}$ is modelled through a logit link function, and is assumed to equal the intercept $\alpha$. The model is also indexed with ${[Century]}$ so that separate estimates can be obtained for each century (1^st^ BCE to 11^th^ CE).

$$
A_{i} \sim BetaBinomial(NISP_{i}, \bar{p}_{i} , \phi_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[Century]}
$$

$$
\alpha_{[Century]} \sim Normal(0,1.5)
$$

$$
\phi_{[Century]} \sim Exponential(1) + 2
$$ 
The prior distributions selected for the model are weakly informative. Specifically, the prior chosen for the intercept $\alpha$ is a normal distribution with a mean of 0 and a standard deviation of 1.5. Given that $logit(\bar{p}) = \alpha$ is modelled using the logit link, a mean of 0 corresponds to a probability of 0.50 on the logit scale. With a standard deviation of 1.5, the prior is flat and only slightly informative.

As for the shape parameter $\phi$, the prior was selected to ensure that the parameter was at least 2, which corresponds to a flat distribution. This value (2) was then added to an exponential distribution with rate 1 to produce a weakly informative prior.

A prior predictive simulation (@fig-betabin-zoo-prior) shows how when no information is provided to the model, counts on the extremes of the binomial histogram are more likely, while all other counts have similar probabilities. Bimodal priors are common practice with Beta distributions as they are non-informative enough. However, updating a bimodal prior even with one observation rapidly changes the posterior.

```{r}
#| echo: false
#| layout-ncol: 2
#| label: fig-betabin-zoo-prior
#| fig-cap: "Prior predictive simulation for the betabinomial distribution."
#| fig-subcap: 
#|  - "The simulation shows how when no data is available values on the limits are likely. New observations however rapidly affect the posterior distribution."
#|  - "Conjugate beta distribution."

set.seed(21)

simplehist(rbetabinom(1e4, 
                      size=20, 
                      prob=inv_logit(
                      rnorm(1e4, 0, 1.5)
                                ), 
                      theta = dexp(1e4, 1)+2
                      ),  main="Prior predictive simulation - Betabinomial distribution", 
col=rangi2
           )

plot(
  density(
  rbeta2(1000, 
         inv_logit(rnorm(1e4,0,1.5)), 
         rexp(1000, 1)+2
         )
  ),
  main="Prior predictive simulation - Beta distribution", 
col=rangi2, xlim=c(0,1)
)


```

The model for pigs' NISP counts shows a positive trend above the millennium average (0.36) for predicted highest density intervals (HDIs) from the 1^st^ century BCE to the 3^rd^ century CE. The probability intervals exhibit a steady decrease that begins in the 3^rd^ century and continues until the 8^th^ century, when the mean of the probability distribution coincides with the first millennium average. Despite positive trends reported in the 8^th^ and 9^th^ centuries, interpretation of these values requires caution since the credible intervals are wider due to fewer observed samples dated to these centuries. The HDIs mean for the 10^th^ and 11^th^ centuries is again around the millennium average, indicating a decrease in the probability of pig occurrence.

Cattle, on the other hand, exhibit different trends, with a HDI interval in the 1^st^ century BCE above the millennium average (0.20), although with a large credible interval, and a negative trend from the 1^st^ to the 3^rd^ century CE. HDIs are again increasingly positive between the 4^th^ and 7^th^ centuries, but decrease in the 8^th^ century. As for pigs, HDIs means are close to the millennium average in the 10^th^ and 11^th^ centuries.

The modelled probability of occurrence of sheep/goats reveals a negative trend (below the average of 0.28) from the 1^st^ to the 3^rd^ century CE. The probability of occurrence then increases around the 4^th^/5^th^ centuries up to the 6^th^/7^th^ centuries, with HDIs stable around the mean from the 8^th^ to the 11^th^ century. The edible wild animals that were included in the analysis are *Sus scrofa ferus* (boar), *Cervus elaphus* (red deer), *Dama dama* (fallow deer), *Capreolus capreolus* (roe deer), *Lepus sp.* (hare), *Glis glis* (dormouse), and unspecified birds. The domestic fowl species that were analysed are *Gallus g.* (chicken) and *Anser A*. (goose). The predicted probabilities for edible wild animals and domestic poultry show relatively stable trends throughout the period analysed, with HDI means consistently below 0.10. Domestic fowl HDIs remain below the millennium mean of 0.06 from the 1^st^ century BCE to the 2^nd^ century CE, and then increase steadily from the 3^rd^ century to remain around the mean until the 7^th^ century. From the 7^th^ to the 11^th^ century, the HDIs remain positive, but with a much larger credible interval. Similarly, wild animals' HDIs are positive in the 1^st^ century BCE and remain stable around the millennium average (0.05) until the 6^th^ century CE, after which they also show a slight increase until the 11^th^ century.

In addition to plotting the probabilities of occurrence extracted by the posterior distributions, the distributions of the precision parameter $\phi$ are plotted for samples in each century. Each line is plotted with two probability intervals 0.65 (shorter thicker line) and 0.99 (longer thinner line). The probability density functions are also added to the top of the bar.


```{r}
#| message: false
#| output: false
#| echo: false


library(tidybayes)
library(tidybayes.rethinking)


########################################
# Data processing for bayesian models
########################################

Animals_by_Century$Century <- factor(Animals_by_Century$Century) # Convert to factor
Animals_by_Century[is.na(Animals_by_Century)] <- 0 # Remove NAs

# Create a list for STAN
dat.Pigs_by_Century = list(N=Animals_by_Century$Tot_NISP, A=Animals_by_Century$Pigs, Century = Animals_by_Century$Century, J=nrow(Animals_by_Century))
dat.Cattle_by_Century = list(N=Animals_by_Century$Tot_NISP, A=Animals_by_Century$Cattle, Century = Animals_by_Century$Century, J=nrow(Animals_by_Century))
dat.Caprine_by_Century = list(N=Animals_by_Century$Tot_NISP, A=Animals_by_Century$Caprine, Century = Animals_by_Century$Century, J=nrow(Animals_by_Century))
dat.E_WMammals_by_Century = list(N=Animals_by_Century$Tot_NISP, A=Animals_by_Century$Edible.W..Mammals, Century = Animals_by_Century$Century, J=nrow(Animals_by_Century))
dat.DomFowl_by_Century = list(N=Animals_by_Century$Tot_NISP, A=Animals_by_Century$Dom..Fowl, Century = Animals_by_Century$Century, J=nrow(Animals_by_Century))

```

```{r}
#| message: false
#| output: false
#| echo: false
#| eval: false


########################################
# Running the models
# Saving the models
# Setting code chunk to eval: false
# To save up on rendering time
########################################
set.seed(24)

Pigs_by_Century_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_centuries.stan",  # Stan program
  data = dat.Pigs_by_Century,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

Cattle_by_Century_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_centuries.stan",  # Stan program
  data = dat.Cattle_by_Century,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

Caprine_by_Century_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_centuries.stan",  # Stan program
  data = dat.Caprine_by_Century,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

E_WMammals_by_Century_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_centuries.stan",  # Stan program
  data = dat.E_WMammals_by_Century,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

DomFowl_by_Century_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_centuries.stan",  # Stan program
  data = dat.DomFowl_by_Century,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(Pigs_by_Century_fit, "stan_models/by_century/Pigs_by_Century_fit.rds")
saveRDS(Cattle_by_Century_fit, "stan_models/by_century/Cattle_by_Century_fit.rds")
saveRDS(Caprine_by_Century_fit, "stan_models/by_century/Caprine_by_Century_fit.rds")
saveRDS(E_WMammals_by_Century_fit, "stan_models/by_century/E_WMammals_by_Century_fit.rds")
saveRDS(DomFowl_by_Century_fit, "stan_models/by_century/DomFowl_by_Century_fit.rds")


```

```{r}
#| message: false
#| output: false
#| echo: false

Pigs_by_Century_fit <- readRDS("stan_models/by_century/Pigs_by_Century_fit.rds")
Cattle_by_Century_fit <- readRDS("stan_models/by_century/Cattle_by_Century_fit.rds")
Caprine_by_Century_fit<- readRDS("stan_models/by_century/Caprine_by_Century_fit.rds")
E_WMammals_by_Century_fit<- readRDS("stan_models/by_century/E_WMammals_by_Century_fit.rds")
DomFowl_by_Century_fit<- readRDS("stan_models/by_century/DomFowl_by_Century_fit.rds")

```

```{r}
#| message: false
#| output: false
#| echo: false

########################################
## Data processing for Ggplot
########################################

########
# PIGS 
########

# Create map of centuries (the model will just give intercept from 0:12)
pigs_centuries_map <- levels(dat.Pigs_by_Century$Century)
names(pigs_centuries_map) <- 1:12

# Get the results
Pigs_by_Century_fit_a <- Pigs_by_Century_fit %>%
  spread_draws(a[Century]) %>% mutate(animal = "Pigs")

Pigs_by_Century_fit_phi <- Pigs_by_Century_fit %>%
  spread_draws(theta[Century]) %>% mutate(animal = "Pigs")

# Change the century code to the real century
Pigs_by_Century_fit_a$Century <- recode(Pigs_by_Century_fit_a$Century, !!!pigs_centuries_map)
Pigs_by_Century_fit_phi$Century <- recode(Pigs_by_Century_fit_phi$Century, !!!pigs_centuries_map)

#########
# CATTLE
#########

# Create map of centuries (the model will just give intercept from 0:12)
Cattle_centuries_map <- levels(dat.Cattle_by_Century$Century)
names(Cattle_centuries_map) <- 1:12

# Get the results
Cattle_by_Century_fit_a <- Cattle_by_Century_fit %>%
  spread_draws(a[Century]) %>% mutate(animal = "Cattle")

Cattle_by_Century_fit_phi <- Cattle_by_Century_fit %>%
  spread_draws(theta[Century]) %>% mutate(animal = "Cattle")

# Change the century code to the real century
Cattle_by_Century_fit_a$Century <- recode(Cattle_by_Century_fit_a$Century, !!!Cattle_centuries_map)
Cattle_by_Century_fit_phi$Century <- recode(Cattle_by_Century_fit_phi$Century, !!!Cattle_centuries_map)

#########
# CAPRINE
#########

# Create map of centuries (the model will just give intercept from 0:20)
Caprine_centuries_map <- levels(dat.Caprine_by_Century$Century)
names(Caprine_centuries_map) <- 1:12

# Get the results
Caprine_by_Century_fit_a <- Caprine_by_Century_fit %>%
  spread_draws(a[Century]) %>% mutate(animal = "Caprine")

Caprine_by_Century_fit_phi <- Caprine_by_Century_fit %>%
  spread_draws(theta[Century]) %>% mutate(animal = "Caprine")

# Change the century code to the real century
Caprine_by_Century_fit_a$Century <- recode(Caprine_by_Century_fit_a$Century, !!!Caprine_centuries_map)
Caprine_by_Century_fit_phi$Century <- recode(Caprine_by_Century_fit_phi$Century, !!!Caprine_centuries_map)

###########################
# Edible Wild Animals
###########################

# Get the results
E_WMammals_by_Century_fit_a <- E_WMammals_by_Century_fit %>%
  spread_draws(a[Century]) %>% mutate(animal = "W_Mammals")

E_WMammals_by_Century_fit_phi <- E_WMammals_by_Century_fit %>%
  spread_draws(theta[Century]) %>% mutate(animal = "W_Mammals")

# Change the century code to the real century
E_WMammals_by_Century_fit_a$Century <- recode(E_WMammals_by_Century_fit_a$Century, !!!Caprine_centuries_map)
E_WMammals_by_Century_fit_phi$Century <- recode(E_WMammals_by_Century_fit_phi$Century, !!!Caprine_centuries_map)

###########################
# Domestic Fowl
###########################

# Get the results
DomFowl_by_Century_fit_a <- DomFowl_by_Century_fit %>%
  spread_draws(a[Century]) %>% mutate(animal = "Dom_Fowl")

DomFowl_by_Century_fit_phi <- DomFowl_by_Century_fit %>%
  spread_draws(theta[Century]) %>% mutate(animal = "Dom_Fowl")

# Change the century code to the real century
DomFowl_by_Century_fit_a$Century <- recode(DomFowl_by_Century_fit_a$Century, !!!Caprine_centuries_map)
DomFowl_by_Century_fit_phi$Century <- recode(DomFowl_by_Century_fit_phi$Century, !!!Caprine_centuries_map)


## Bind dataframes

Animals_by_Century_a_fit <- bind_rows(
  Pigs_by_Century_fit_a,
  Cattle_by_Century_fit_a,
  Caprine_by_Century_fit_a,
  E_WMammals_by_Century_fit_a,
  DomFowl_by_Century_fit_a
      )

# Means for each animal
Animals_by_Century_a_means_fit <- data.frame(
  animal=c("Pigs", "Cattle", "Caprine", "W_Mammals", "Dom_Fowl"),
  means=c(
   inv_logit(mean(Pigs_by_Century_fit_a$a)),
    inv_logit(mean(Cattle_by_Century_fit_a$a)),
    inv_logit(mean(Caprine_by_Century_fit_a$a)),
    inv_logit(mean(E_WMammals_by_Century_fit_a$a)),
    inv_logit(mean(DomFowl_by_Century_fit_a$a))
    )
)


Animals_by_Century_phi_fit <- bind_rows(
  Pigs_by_Century_fit_phi,
  Cattle_by_Century_fit_phi,
  Caprine_by_Century_fit_phi,
  E_WMammals_by_Century_fit_phi,
  DomFowl_by_Century_fit_phi
)

# Means for each animal
Animals_by_Century_phi_means_fit <- data.frame(
  animal=c("Pigs", "Cattle", "Caprine", "W_Mammals", "Dom_Fowl"),
  means=c(
    (mean(Pigs_by_Century_fit_phi$theta)),
    (mean(Cattle_by_Century_fit_phi$theta)),
    (mean(Caprine_by_Century_fit_phi$theta)),
    (mean(E_WMammals_by_Century_fit_phi$theta)),
    (mean(DomFowl_by_Century_fit_phi$theta))
  )
)

```

```{r}
#| message: false
#| output: false
#| echo: false

########################################
# Plot: Intercept
########################################

Animals_by_Century_a.plot <- Animals_by_Century_a_fit %>%
  ggplot(aes(
    y = factor(Century, levels = pigs_centuries_map),
    x = inv_logit(a)
  )) +
  stat_interval(.width = c(.50, .80, .95, .99),
                linewidth = 3) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    data = Animals_by_Century_a_means_fit,
    aes(xintercept = means),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  )+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10),
                     sec.axis = dup_axis()) +
  scale_y_discrete(limits = rev) +
  scale_color_brewer(palette = "Greys", name = "Credible interval") +
  labs(
    y = "Predicted probability",
    x = "Century",
    title = "Animals",
    subtitle = "Century",
    caption = "The dashed line indicates the probability of occurrence for each animal.\n The circle indicates the mean for each line."
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) + facet_wrap(factor(
    animal,
    levels = c("Pigs", "Cattle", "Caprine", "Dom_Fowl", "W_Mammals")
  ) ~ .,
  ncol = 1,
  strip.position = "right")


########################################
# Plot: Precision parameter
########################################

Animals_by_Century_phi.plot <- Animals_by_Century_phi_fit %>%
  ggplot(aes(
    y = factor(Century, levels = pigs_centuries_map),
    x = theta
  )) +
  stat_halfeye(.width = c(0.66, 0.95)) +
  geom_vline(
    data = Animals_by_Century_phi_means_fit,
    aes(xintercept = means),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10),
                     sec.axis = dup_axis()) +
  scale_y_discrete(limits = rev) +
  scale_color_brewer(palette = "Greys") +
  labs(
    x = expression(paste("Precision parameter (", phi, ")")),
    y = "Century",
    title = "Animals",
    subtitle = "Century",
    caption = "The dashed line indicates the average precision for each animal dataset. The circle indicates the mean for each line."
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) + facet_wrap(factor(
    animal,
    levels = c("Pigs", "Cattle", "Caprine", "Dom_Fowl", "W_Mammals")
  ) ~ .,
  ncol = 1,
  strip.position = "right")



```

```{r}
#| echo: false
#| fig-height: 14

Animals_by_Century_a.plot
Animals_by_Century_phi.plot
```

### Trends by phase

The relationship between animal NISP counts and chronological phases is similar to the previous one, but with a different indexing variable for the intercept. Instead of being indexed by century, the intercept $\alpha$ is now indexed by phase (${[ChrID]}$). While a phase can span several centuries, this modification allows the model to estimate separate intercepts for each phase, providing more specific insight into potential differences in the outcome variable and the average probability of animals occurrences over time. The rest of the model structure and distributional assumptions remain the same as the previous model, which uses a betabinomial distribution to model overdispersion in the data and an intercept-only structure.

$$
A_{i} \sim BetaBinomial(NISP_{i}, \bar{p}_{i} , \phi_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]}
$$

$$
\alpha_{[ChrID]} \sim Normal(0,1.5)
$$

$$
\phi_{[ChrID]} \sim Exponential(1)+2
$$

```{r}
#| message: false
#| output: false
#| echo: false
#| eval: false

########################################
# Running the models
# Saving the models
# Setting code chunk to eval: false
# To save up on rendering time
########################################
set.seed(24)

Pigs_by_Chronology_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_chronologies.stan",  # Stan program
  data = dat.Pigs_by_Chronology,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

Cattle_by_Chronology_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_chronologies.stan",  # Stan program
  data = dat.Cattle_by_Chronology,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

Caprine_by_Chronology_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_chronologies.stan",  # Stan program
  data = dat.Caprine_by_Chronology,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

E_WMammals_by_Chronology_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_chronologies.stan",  # Stan program
  data = dat.E_WMammals_by_Chronology,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

DomFowl_by_Chronology_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_chronologies.stan",  # Stan program
  data = dat.DomFowl_by_Chronology,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(Pigs_by_Chronology_fit, "stan_models/by_Chronology/Pigs_by_Chronology_fit.rds")
saveRDS(Cattle_by_Chronology_fit, "stan_models/by_Chronology/Cattle_by_Chronology_fit.rds")
saveRDS(Caprine_by_Chronology_fit, "stan_models/by_Chronology/Caprine_by_Chronology_fit.rds")
saveRDS(E_WMammals_by_Chronology_fit, "stan_models/by_Chronology/E_WMammals_by_Chronology_fit.rds")
saveRDS(DomFowl_by_Chronology_fit, "stan_models/by_Chronology/DomFowl_by_Chronology_fit.rds")

```

```{r}
#| message: false
#| output: false
#| echo: false

Pigs_by_Chronology_fit <- readRDS("stan_models/by_Chronology/Pigs_by_Chronology_fit.rds")
Cattle_by_Chronology_fit <- readRDS("stan_models/by_Chronology/Cattle_by_Chronology_fit.rds")
Caprine_by_Chronology_fit<- readRDS("stan_models/by_Chronology/Caprine_by_Chronology_fit.rds")
E_WMammals_by_Chronology_fit<- readRDS("stan_models/by_Chronology/E_WMammals_by_Chronology_fit.rds")
DomFowl_by_Chronology_fit<- readRDS("stan_models/by_Chronology/DomFowl_by_Chronology_fit.rds")

```

```{r}
#| echo: false

########################################
## Data processing for Ggplot
########################################


Pigs_by_Chronology_fit_a <- Pigs_by_Chronology_fit %>%
  spread_draws(a[Chronology]) %>%   
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "Pigs")

Pigs_by_Chronology_fit_phi <- Pigs_by_Chronology_fit %>%
  spread_draws(theta[Chronology]) %>% 
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "Pigs")

Cattle_by_Chronology_fit_a <- Cattle_by_Chronology_fit %>%
  spread_draws(a[Chronology]) %>%   
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "Cattle")

Cattle_by_Chronology_fit_phi <- Cattle_by_Chronology_fit %>%
  spread_draws(theta[Chronology]) %>% 
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "Cattle")

Caprine_by_Chronology_fit_a <- Caprine_by_Chronology_fit %>%
  spread_draws(a[Chronology]) %>%   
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "Caprine")

Caprine_by_Chronology_fit_phi <- Caprine_by_Chronology_fit %>%
  spread_draws(theta[Chronology]) %>% 
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "Caprine")

E_WMammals_by_Chronology_fit_a <- E_WMammals_by_Chronology_fit %>%
  spread_draws(a[Chronology]) %>%   
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "W_Animals")

E_WMammals_by_Chronology_fit_phi <- E_WMammals_by_Chronology_fit %>%
  spread_draws(theta[Chronology]) %>% 
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "W_Animals")


DomFowl_by_Chronology_fit_a <- DomFowl_by_Chronology_fit %>%
  spread_draws(a[Chronology]) %>%   
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "Dom_Fowl")

DomFowl_by_Chronology_fit_phi <- DomFowl_by_Chronology_fit %>%
  spread_draws(theta[Chronology]) %>% 
  mutate(Chronology = case_when(
    Chronology == 1 ~ "EMA",
    Chronology == 2 ~ "LR",
    Chronology == 3 ~ "Ma",
    Chronology == 4 ~ "R"
  )) %>% 
  mutate(animal = "Dom_Fowl")


Animals_by_Chronology_a_fit <- bind_rows(
  Pigs_by_Chronology_fit_a,
  Cattle_by_Chronology_fit_a,
  Caprine_by_Chronology_fit_a,
  E_WMammals_by_Chronology_fit_a,
  DomFowl_by_Chronology_fit_a
)

# Means for each animal
Animals_by_Chronology_a_means_fit <- data.frame(
  animal=c("Pigs", "Cattle", "Caprine", "W_Animals", "Dom_Fowl"),
  means=c(
    inv_logit(mean(Pigs_by_Chronology_fit_a$a)),
    inv_logit(mean(Cattle_by_Chronology_fit_a$a)),
    inv_logit(mean(Caprine_by_Chronology_fit_a$a)),
    inv_logit(mean(E_WMammals_by_Chronology_fit_a$a)),
    inv_logit(mean(DomFowl_by_Chronology_fit_a$a))
  )
)


Animals_by_Chronology_phi_fit <- bind_rows(
  Pigs_by_Chronology_fit_phi,
  Cattle_by_Chronology_fit_phi,
  Caprine_by_Chronology_fit_phi,
  E_WMammals_by_Chronology_fit_phi,
  DomFowl_by_Chronology_fit_phi
)

# Means for each animal
Animals_by_Chronology_phi_means_fit <- data.frame(
  animal=c("Pigs", "Cattle", "Caprine", "W_Animals", "Dom_Fowl"),
  means=c(
    (mean(Pigs_by_Chronology_fit_phi$theta)),
    (mean(Cattle_by_Chronology_fit_phi$theta)),
    (mean(Caprine_by_Chronology_fit_phi$theta)),
    (mean(E_WMammals_by_Chronology_fit_phi$theta)),
    (mean(DomFowl_by_Chronology_fit_phi$theta))
  )
)

```

```{r}
#| message: false
#| output: false
#| echo: false

########################################
# Plot: Intercept
########################################

chrono_levels <- c("R", "LR", "EMA", "Ma")


Animals_by_Chronology_a.plot <- Animals_by_Chronology_a_fit %>%
  ggplot(aes(
    y = factor(Chronology, levels = chrono_levels),
    x = inv_logit(a)
  )) +
  stat_interval(.width = c(.50, .80, .95, .99),
                linewidth = 3) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    data = Animals_by_Chronology_a_means_fit,
    aes(xintercept = means),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10),
                     sec.axis = dup_axis()) +
  scale_y_discrete(limits = rev) +
  scale_color_brewer(palette = "Greys", name = "Credible interval") +
  labs(
    y = "Predicted probability",
    x = "Chronology",
    title = "Animals",
    subtitle = "Chronology",
    caption = "The dashed line indicates the probability of occurrence for each animal.\n The circle indicates the mean for each line."
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) + facet_wrap(factor(
    animal,
    levels = c("Pigs", "Cattle", "Caprine", "Dom_Fowl", "W_Animals")
  ) ~ .,
  ncol = 1,
  strip.position = "right")


########################################
# Plot: Precision parameter
########################################

Animals_by_Chronology_phi.plot <- Animals_by_Chronology_phi_fit %>%
  ggplot(aes(
    y = factor(Chronology, levels = chrono_levels),
    x = theta
  )) +
  stat_halfeye() +
  geom_vline(
    data = Animals_by_Chronology_phi_means_fit,
    aes(xintercept = means),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10),
                     sec.axis = dup_axis()) +
  scale_y_discrete(limits = rev) +
  scale_color_brewer(palette = "Greys") +
  labs(
    x = expression(paste("Precision parameter (", phi, ")")),
    y = "Chronology",
    title = "Animals",
    subtitle = "Chronology",
    caption = "The dashed line indicates the average precision for each animal dataset. The circle indicates the mean for each line."
  ) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) + facet_wrap(factor(
    animal,
    levels = c("Pigs", "Cattle", "Caprine", "Dom_Fowl", "W_Animals")
  ) ~ .,
  ncol = 1,
  strip.position = "right")


```

As anticipated, the phase-level trends exhibit posterior distributions similar to the more detailed century-level results. However, the phase-level model offers an advantage - the credible intervals are considerably narrower than those of the previous model. Since each phase spans several centuries, except for the medieval phase that only includes the 11^th^ century, there are more data points available to provide more reliable probabilities.

Pigs' NISP are at their highest point during the Roman phase, whereas they decrease in the late Roman and early medieval phase, only to be slightly below the millennium average (of 0.37) in the 11^th^ century. The predicted millennium average is comparable to the previous century-level model (0.36), with a small difference which can be due to the grouping of the observations. The diachronical means for the other animals are also very comparable to the other with a maximum difference of ±1 for each animal.

Cattle's NISP probabilities of occurrence increase throughout the millennium, although in the 11^th^ century (marked as 'Ma' on the plot) the 99% credible interval is larger, spanning from 0.15 to 0.26. Conversely, the century-level model for this period indicated a small increase towards the millennium average.

As for the century-level model, the sheep/goats are the second most represented animal in the millennium. Their probability of occurrence shows HDIs just below the millennium mean (of 0.27) in the Roman and late Roman age, and positive HDIs values for the early medieval and medieval phase, a situation not so different than the century-level model. The phase-level trends for domestic fowl and wild animals show perhaps clearer trends than the century-level models. The HDI for domestic fowl, which is below the millennium mean of 0.05 in the Roman age, slightly increases in the later phases, with a peak in the 11^th^ century. This peak is however less reliable than other phases, as the credible interval range is much larger. Wild animals posterior probabilities on the other hand are stable around the mean (0.04) with a small increase in probability during the early medieval and medieval phases. In addition to improved credible intervals as opposed to the century-level model, the probability intervals for the $\phi$ shape parameter are also more reliable, as the PDFs are more narrow and most of the values are around the mean. Unfortunately, a smaller amount of samples for the 11^th^ century produced more dispersed curves.

```{r}
#| echo: false
#| fig-height: 14

Animals_by_Chronology_a.plot
Animals_by_Chronology_phi.plot

```

#### Community plot

After estimating the intercepts for each animal separately, they were compiled together to get a cohesive view of the probability of occurrence of the four animals. This approach is not ideal, but it can still be informative with regards to the patterns of animal exploitation in the archaeological record. The joint community plot allows to visually compare the probability of occurrence of each animal species over time and identify trends in their occurrence. For instance, the plot below shows how the predicted probability values for the four main domesticates---pigs, cattle and sheep/goats vary across the four phases. Pigs have higher probabilities during the Roman phase, while already in the late Roman period they get closer to other domesticates. It is in this period that the inter-sample variability of $\phi$ seem to decrease, although the values are not very high. The precision $\phi$ is instead very variable for edible wild animals and domestic fowl, as it can be expected given that it is much rarer to find these animals in a sample for various reasons already discussed in the methods. The high variability in the precision of the medieval (11^th^ century) intercept and $\phi$ estimates can be explained by the lower number of samples.

Overall, the most noticeable trends in the plot are the increased number of cattle in the early medieval period and the decreased number of pigs from the late Roman phase. Modelling each animal species separately does not fully capture the complex interactions that exist among them, and future work should explore more advanced modelling approaches that account for the co-occurrence of multiple animal species in the same assemblages.

```{r}
#| echo: false

Animals_by_Chronology_fit_comm <-  tibble(Animals_by_Chronology_a_fit, theta= Animals_by_Chronology_phi_fit$theta)

Animals_by_Chronology_fit_comm <- slice_sample(
  Animals_by_Chronology_fit_comm,
  n=4000
)
```

```{r}
#| echo: false
#| fig-height: 7
#| fig-cap: "MCMC estimates for the predicted probability of occurrence of faunal remains in four chronological phases. On the y-axis, the predicted precision in the estimates. The higher the precision, the better the estimate."
#| label: fig-animals-by-chrono-comm-plot

ggplot(Animals_by_Chronology_fit_comm, aes(x = inv_logit(a), y = theta, color = animal)) +
  geom_point(alpha = .4) +
  theme_tidybayes() +
  scale_color_brewer(palette = "Spectral") +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +  
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  labs(
    x = "Predicted occurrence",
    y = "Precision",
    color = "Animal",
    title = "Animals",
    subtitle = "Chronological occurrence against precision"
  )+
  facet_grid(factor(Chronology, levels=chrono_levels)~., scales="free")

```

## Context type {style="text-align:justify;"}

Chronological models offer a broad overview of the trends in animal husbandry and consumption, both domestic and wild. It is essential, however, to consider the contextualization of animal remains since different site types can impact the NISP of a specific animal. Therefore, a detailed analysis of the specific site must be undertaken before any conclusions regarding the abundance of an animal can be reached. When applying the same method as in @sec-archaeobotany, we see how direct stratification by site type is not possible because of a backdoor path between `Chronology` and `Site_Type` that cannot be ignored. Ignoring chronological differences would imply expecting a rural villa site to have comparable production and consumption patterns in the Roman and late Roman (or even later) periods. To gain a more comprehensive understanding of how the environment in which animal remains were discovered influences the result variable, NISP, we present the directed acyclic graph (DAG) created for the botanical models. The DAG indicates that we must block by Chronology and stratify the dataset by Site_Type. To accomplish this, we introduce an interaction index (${[TCid]}$).

```{r}
#| echo: false
#| message: false
#| warning: false
library(dagitty)
library(ggdag)
```

```{r}
#| echo: false
#| label: fig-site-type-dag-animals
#| fig-height: 2.5
#| fig-cap: "This is a Directed Acyclic Graph (DAG) that represents the relationship between Chronology, Site_Type, and NISP in the study. Chronology is shown as a collider variable, and its influence on NISP is mediated through Site_Type. To block the backdoor path between Chronology and NISP, the dataset is stratified by Chronology."

DAG_site_type <- dagitty('dag {
NISP [outcome]
Chronology [collider,dagitty.stratum="1"]
Site_Type [exposure,dagitty.stratum="2"]
Chronology -> NISP
Chronology -> Site_Type
Site_Type -> NISP
}')

DAG_site_type <- tidy_dagitty(DAG_site_type)

ggdag_paths(DAG_site_type, 
      text = FALSE, 
      use_labels = "name", 
      shadow = TRUE) +
  theme_dag(base_size = 14)+
  theme(legend.position = "none", strip.text = element_blank())+
  scale_color_manual(values = "#0072B2", na.value = "grey80") + 
  scale_fill_manual(values = "#0072B2", na.value = "grey80")+
   ggraph::scale_edge_color_manual(values = "#0072B2", na.value = "grey80")

```

The approach for the proposed model for estimating the posterior likelihood of animal occurrence in various chronological phases and context types is very similar to the models discussed earlier. The only modification is the interaction index. The model structure and priors remain the same as in the previous models.

$$
A_{i} \sim BetaBinomial(NISP_{i}, \bar{p}_{i} , \phi_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[TCid]}
$$

$$
\alpha_{[TCid]} \sim Normal(0,1.5)
$$

$$
\phi_{[TCid]} \sim Exponential(1) + 2
$$

### Pigs

As previously noted, pig remains are consistently the most frequently found type of faunal remains in first millennium Italian excavations. However, this study reveals divergent patterns in the presence of pigs depending on the site type and function. We will first discuss categories with narrower credible intervals before moving on to those with smaller sample sizes and wider credible intervals.

Urban sites are the most common category, where the probability of finding pig remains follows patterns similar to the chronological trends presented earlier. During the Roman phase, the probability of finding pig remains in urban contexts is very high compared to other animals or categories, with a mean probability of almost 0.5. The consumption of pork in cities appears to have decreased during the late Roman and early medieval phase, with similar credible intervals, only to increase again in the 11^th^ century. Although the precision ($\phi$) in urban contexts is slightly below the across-contexts mean of 5, the curves are not too dispersed, at least in the Roman and late Roman periods, and we can be confident in these results. On the other hand, the 95% HDIs for pigs in rural contexts are lower than those in urban contexts during the Roman and late Roman periods. In the early medieval phase, the mean probabilities are comparable to urban contexts, with both categories having a mean of around 0.31, which then increases to 0.37 in the 11^th^ century (0.39 in urban contexts). In general, while the decline in pig presence appears to be significant in urban areas, rural contexts exhibit only a slight increase.

Rural villas have been analysed separately from other rural sites due to their potential implications for the production and consumption of meat, given their status as elite sites. Although the sample size is not large enough to provide highly confident posterior predictions, the results suggest that pork was likely an important component of the diet in these sites, with a mean of approximately 0.4 in the Roman period and an increase in the late Roman phase. However, the early medieval phase is characterized by greater uncertainty, as the sample size is reduced and rural estates often changed function or were abandoned. The credible interval for this period ranges from 0.25 to 0.62. The suggested increase in pigs NISP in the late Roman period will be discussed further later (@sec-discussion), as the historical debate might provide helpful hypotheses. It is worth noting that there is no sample from the 11^th^ century for rural villas, which is why that line is not included in the graph.

Fortified sites were also large consumers of pork, with the probabilities of occurrence sticking around the mean value and a minor increase in the early medieval-medieval periods. However, there are no significant changes in trends to observe. The probabilities of occurrence in the late Roman phase are not so trustworthy as the credible interval is large. It is worth noting that there is no Roman posterior prediction on the graph because there were not fortified Roman sites in the sample except for one, the *castrum* of Ostia [@mackinnon2014], which has not been included in the observed data for this model as it was one single sample. The *castrum* had a 71.9% NISP proportion of pigs, out of a sample of 121 total NISP. The religious category has fewer observations than the site types presented before, and the credible intervals are wider. The Roman and late Roman religious sites mostly include temples such as the temples C and D of Grumentum, the Demetra temple in Macchia delle Valli, the Mithraeum of Crypta Balbi, and more. In the medieval phases, religious sites are mostly monasteries including the well-studied ones of Monte Gelato, Farfa, San Salvo, S. Giulia of Brescia, and San Vincenzo al Volturno. The range of credible intervals can span probabilities of 0.40, so we must be cautious in our considerations. If we look at the mean of the HDIs, a precise pattern does not emerge. However, in every chronology, the probability of occurrence of pig's NISP is over the across-contexts average of 0.41.

The credible intervals for necropolis sites are too large - spanning almost the entire probability range - to trace any clear patterns. With only nine samples from seven sites, including the Roman and late Roman *necropoleis* of Cantone, Otranto, San Cassiano (Riva del Garda), Trieste (loc. Crosada), Poggio Gramignano, San Lorenzo di Sebato, and the early medieval necropolis of Baggiovara, the sample size is small. As a result, it is best to draw only qualitative conclusions in the later discussion.

Finally, the last category includes only one well-known site, the Flavium amphitheater in Rome, which provided 29 zooarchaeological samples. The 95% HDIs for this site show very high probabilities, with mean values of 0.65 for the Roman and late Roman periods and 0.49 for the early medieval period. However, the credible interval is quite wide for the early medieval phase, making it less certain. This type of site was not grouped with the other urban observations as it was too unique and might have biased the results.

```{r}
#| echo: false

####################
## Data pre-processing
####################

Animals_Df <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/Zooarch_Condensed_with_altitude.csv", header=TRUE, sep=";")

Animals_Df$Tot_NISP <- rowSums(Animals_Df[c(16:22)], na.rm = T) 

# Separate Rome - sorry code is messy because it was a later inclusion
# Need a dataframe just for Rome and Urban sites
Animals_urban_sites <- Animals_Df %>%
  filter(Type == "Urban") %>%
  mutate(isRome = ifelse(grepl("^Roma", Site) | grepl("^Ostia", Site), "Rome", "Urban"))
Animals_urban_sites[,c(7:9,11,12)] <- lapply(Animals_urban_sites[,c(7:9,11,12)], factor)
Animals_urban_sites$Chronology <- factor(Animals_urban_sites$Chronology, levels = c("R", "LR", "EMA", "Ma"))
Animals_urban_sites[is.na(Animals_urban_sites)]<-0

# end of inclusion

# 1. Subsetting the dataframe
Animals_Df <- Animals_Df[c(1,16,17,18,20,25,4,5,6,7,10)]
Animals_urban_sites = Animals_urban_sites[c(1,16,17,18,20,25,4,5,6,7,10,26)]

# 2. Merge some categories in the 'Type' column
Animals_Df$Type <- str_replace(Animals_Df$Type, "Rural site, mansio", "Rural")      
Animals_Df$Type <- str_replace(Animals_Df$Type, "Religious, monastery", "Religious")
Animals_Df$Type <- str_replace(Animals_Df$Type, "Castle", "Fortified")
Animals_Df$Type <- str_replace(Animals_Df$Type, "Castrum", "Fortified")
Animals_Df$Geo <- str_replace(Animals_Df$Geo, "Hilltop", "Hill")

# 3. Remove the categories 'Necropolis' and 'Religious' as they might skew
# the results.
Animals_Df <- filter(Animals_Df,  Type!="Shipwreck")

# 4. Exclude the castrum of Ostia, very strong outlier and regardless only fortified
# roman site
Animals_Df <- subset(Animals_Df, !(Chronology=="R" & Type=="Fortified"))

# Convert to factors
Animals_Df[,c(7:9,11)] <- lapply(Animals_Df[,c(7:9,11)], factor)

# Specify chronological order
Animals_Df$Chronology <- factor(Animals_Df$Chronology, levels = c("R", "LR", "EMA", "Ma"))

# Convert NAs to 0
Animals_Df[is.na(Animals_Df)]<-0

# Create copies
Animals_Df2 <- Animals_Df
Animals_Df_fort <- Animals_Df
Animals_Df_villas <- Animals_Df
Animals_Df_Necr_Amph <- Animals_Df
Animals_Df_Rel <- Animals_Df


# Simplifying: Urban vs Rural
# Because they exist in the same chronologies
Animals_Df2 <- subset(Animals_Df2, Type=="Rural" | Type=="Urban")
Animals_Df2 <- droplevels(Animals_Df2)

Animals_Df_fort <- subset(Animals_Df_fort, Type=="Fortified")
Animals_Df_fort <- droplevels(Animals_Df_fort)

Animals_Df_villas <- subset(Animals_Df_villas, Type=="Rural site, villa")
Animals_Df_villas <- droplevels(Animals_Df_villas)

# Because they exist in the same chronologies
Animals_Df_Necr_Amph <- subset(Animals_Df_Necr_Amph, Type=="Necropolis" | Type=="Urban, amphitheater")
Animals_Df_Necr_Amph <- droplevels(Animals_Df_Necr_Amph)

Animals_Df_Rel <- subset(Animals_Df_Rel, Type=="Religious")
Animals_Df_Rel <- droplevels(Animals_Df_Rel)


```

```{r}
#| echo: false
#| message: false
#| output: false

########################################
# Data processing for bayesian models
########################################

set.seed(24)

# RURAL AND URBAN SITES
d.Animals_RurUrb <- Animals_Df2
d.Animals_RurUrb$TC_id <- as.integer(interaction(d.Animals_RurUrb$Type, d.Animals_RurUrb$Chronology))
dat.Pigs_RurUrb = list(N=d.Animals_RurUrb$Tot_NISP, A=d.Animals_RurUrb$Pigs, Tc_id=d.Animals_RurUrb$TC_id, J=nrow(d.Animals_RurUrb))

# Religious sites
d.Animals_Rel <- Animals_Df_Rel
d.Animals_Rel$TC_id <- as.integer(interaction(d.Animals_Rel$Type, d.Animals_Rel$Chronology))
dat.Pigs_Rel = list(N=d.Animals_Rel$Tot_NISP, A=d.Animals_Rel$Pigs, Tc_id=d.Animals_Rel$TC_id, J=nrow(d.Animals_Rel))

## Necropolis and amphitheaters
d.Animals_Necr_Amph <- Animals_Df_Necr_Amph
d.Animals_Necr_Amph$TC_id <- as.integer(interaction(d.Animals_Necr_Amph$Type, d.Animals_Necr_Amph$Chronology))
dat.Pigs_Necr_Amph = list(N=d.Animals_Necr_Amph$Tot_NISP, A=d.Animals_Necr_Amph$Pigs, Tc_id=d.Animals_Necr_Amph$TC_id, J=nrow(d.Animals_Necr_Amph))

# FORTIFIED SETTLEMENTS

d.Animals_fort <- Animals_Df_fort
d.Animals_fort$TC_id <- as.integer(interaction(d.Animals_fort$Type, d.Animals_fort$Chronology))
dat.Pigs_fort = list(N=d.Animals_fort$Tot_NISP, A=d.Animals_fort$Pigs, Tc_id=d.Animals_fort$TC_id, J=nrow(d.Animals_fort))

# Pigs - Villas

d.Animals_villas <- Animals_Df_villas
d.Animals_villas$TC_id <- as.integer(interaction(d.Animals_villas$Type, d.Animals_villas$Chronology))
dat.Pigs_villas = list(N=d.Animals_villas$Tot_NISP, A=d.Animals_villas$Pigs, Tc_id=d.Animals_villas$TC_id, J=nrow(d.Animals_villas))

# ROME, OSTIA, AND URBAN SITES
d.Animals_urban_sites <- Animals_urban_sites
d.Animals_urban_sites$TC_id <- as.integer(interaction(Animals_urban_sites$isRome, Animals_urban_sites$Chronology))
dat.Pigs_Rome_Urban = list(N=d.Animals_urban_sites$Tot_NISP, A=d.Animals_urban_sites$Pigs, Tc_id=d.Animals_urban_sites$TC_id, J=nrow(d.Animals_urban_sites))


```

```{r}
#| echo: false
#| eval: false

########################################
# Running the models
# Saving the models
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Pigs_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan",  # Stan program
  data = dat.Pigs_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Pigs_RurUrb.fit, "stan_models/Pigs_RurUrb_fit.rds")

Pigs_Rel.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Relig.stan",  # Stan program
  data = dat.Pigs_Rel,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Pigs_Rel.fit, "stan_models/Pigs_Rel_fit.rds")

Pigs_Necr_Amph.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_NecrAmph.stan",  # Stan program
  data = dat.Pigs_Necr_Amph,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Pigs_Necr_Amph.fit, "stan_models/Pigs_Necr_Amph_fit.rds")

Pigs_Fort.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Pigs_fort,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Pigs_Fort.fit, "stan_models/Pigs_Fort_fit.rds")

Pigs_Villas_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Pigs_villas,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Pigs_Villas_fit, "stan_models/Pigs_Villas_fit.rds")

Pigs_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan",  # Stan program
  data = dat.Pigs_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Pigs_RurUrb.fit, "stan_models/Pigs_RurUrb_fit.rds")

Pigs_RomeUrban.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRome.stan",  # Stan program
  data = dat.Pigs_Rome_Urban,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Pigs_RomeUrban.fit, "stan_models/Pigs_RomeUrban_fit.rds")


```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Pigs_RurUrb.fit <- readRDS("stan_models/Pigs_RurUrb_fit.rds")
Pigs_Rel.fit <- readRDS("stan_models/Pigs_Rel_fit.rds")
Pigs_Necr_Amph.fit <- readRDS("stan_models/Pigs_Necr_Amph_fit.rds")
Pigs_Fort.fit <- readRDS("stan_models/Pigs_Fort_fit.rds")
Pigs_Villas_fit <- readRDS("stan_models/Pigs_Villas_fit.rds")
Pigs_RomeUrban.fit <- readRDS("stan_models/Pigs_RomeUrban_fit.rds")

```

```{r}
#| echo: false

################################
## Data handling for ggplot
################################

Pigs_BB_Merge_a_UrbRur <- Pigs_RurUrb.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
    )
) 

Pigs_BB_Merge_a_NecrAmph <- Pigs_Necr_Amph.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
    )
) 

Pigs_BB_Merge_a_Rel <- Pigs_Rel.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
    )
) 

Pigs_BB_Merge_a_Fortified <- Pigs_Fort.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
    )
)  %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
    )
)  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
    )
)

Pigs_BB_Merge_a_Villas <- Pigs_Villas_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
    ) ) %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
    ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
    )
)

################################
## Data handling for phi/theta
################################

Pigs_BB_Merge_theta_UrbRur <- Pigs_RurUrb.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
    )
) 

Pigs_BB_Merge_theta_NecrAmph <- Pigs_Necr_Amph.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
    )
) 

Pigs_BB_Merge_theta_Rel <- Pigs_Rel.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
    )
) 

Pigs_BB_Merge_theta_Fortified <- Pigs_Fort.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
    )
)  %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
    )
)  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
    )
)

Pigs_BB_Merge_theta_Villas <- Pigs_Villas_fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
    ) ) %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
    ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
    )
)

################################
# Merging all this data together
################################


Pigs_BB_Merge_phi <- rbind(Pigs_BB_Merge_theta_UrbRur, Pigs_BB_Merge_theta_Fortified, Pigs_BB_Merge_theta_Villas, Pigs_BB_Merge_theta_Rel, Pigs_BB_Merge_theta_NecrAmph)
Pigs_BB_Merge_phi$TC_text <- factor(Pigs_BB_Merge_phi$TC_text)

Pigs_BB_Merge_a <- rbind(Pigs_BB_Merge_a_UrbRur, Pigs_BB_Merge_a_Fortified, Pigs_BB_Merge_a_Villas, Pigs_BB_Merge_a_Rel, Pigs_BB_Merge_a_NecrAmph)
Pigs_BB_Merge_a$TC_text <- factor(Pigs_BB_Merge_a$TC_text)


################################
# Creating the plots
################################


Pigs_BB.plot <- Pigs_BB_Merge_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
    )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
    geom_vline(xintercept = inv_logit(mean(Pigs_BB_Merge_a$a)),    
               linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Pigs",
       subtitle = "Site type",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        linewidth = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")


Pigs_BB_phi.plot <- Pigs_BB_Merge_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
    geom_vline(xintercept = mean(Pigs_BB_Merge_phi$theta),
               linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Pigs",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        linewidth = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")

```

```{r}
#| echo: false
#| fig-height: 10

Pigs_BB.plot
Pigs_BB_phi.plot

```

```{r}
#| echo: false

#####################
#   ROME VS URBAN   #
#####################

Pigs_RomeUrban.samples = extract.samples(Pigs_RomeUrban.fit)

Pigs_RomeUrban.diff <- list(
 R=inv_logit(Pigs_RomeUrban.samples$a[,1]) - inv_logit(Pigs_RomeUrban.samples$a[,2]),
 LR= inv_logit(Pigs_RomeUrban.samples$a[,3]) - inv_logit(Pigs_RomeUrban.samples$a[,4])
 )

Pigs_a_RomeUrban <- Pigs_RomeUrban.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rome.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rome.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rome.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rome.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rome",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rome",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rome",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rome",
    TC_id == 8 ~ "Urban"
    )
) 

Pigs_a_RomeUrban.plot <- Pigs_a_RomeUrban %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
    )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
    geom_vline(xintercept = inv_logit(mean(Pigs_a_RomeUrban$a)),    
               linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Pigs",
       subtitle = "Rome vs Urban",
       caption="The dashed line indicates the mean for the type of site and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        linewidth = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")

Pigs_a_RomeUrban.diffplot <- as.data.frame(Pigs_RomeUrban.diff) %>% 
  mutate(Chronology = ifelse(!is.na(R), "R", "LR")) %>%
  gather(key = "Variable", value = "Value", -Chronology) %>%
   ggplot(aes(x = Value, y=Variable))+
stat_halfeye()+  
  labs(x="Difference (Rome* - Urban sites)",
       y="Chronology",
       title="Pigs",
       subtitle = "Differential probability of pig occurrence ",
       caption="* 'Rome' also includes the neighboring port city of Ostia.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        linewidth = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )

```

Pigs are recognised as indicators of the urban environment, as they are reared primarily for meat production. This dataset contains numerous samples from Rome and Ostia, the neighbouring port city. It is possible to model the "metropolitan" influence that these cities may have on the probability of finding pig remains in urban areas. By doing so, we can calculate the differences in probabilities between Rome and other urban sites to gain insight into their different probabilities. The results show that pigs were more prevalent in Rome than in other Italian urban centres, although they follow the same chronological decreasing trend as other cities.

```{r}
#| echo: false
#| fig-cap: "Estimated probabilities of occurrence of pig remains in urban sites and Rome/Ostia in four chronological phases."
#| label: fig-pigs-bb-UrbvsRom
#| fig-height: 4
#| fig-pos: H

Pigs_a_RomeUrban.plot

```

The number of samples from early medieval and medieval (11^th^ century) Rome is relatively small compared to other urban centers. Additionally, considering the historical context, the metropolitan effect of Rome is likely diminished during this time period. Therefore, the differences in probabilities were specifically computed for the Roman and late Roman phases, focusing on these particular periods rather than encompassing the broader historical range. In the Roman phase, there is a bigger difference between Rome/Ostia and other Italian cities (with a mean probability of 0.20). Later, this difference decreases to a mean of 0.15.

```{r}
#| echo: false
#| fig-cap: "Calculation of Rome/Ostia's influence on other urban sites during the Roman and late Roman periods. This was achieved by subtracting the pigs estimates for urban urban sites from those of Rome/Ostia."
#| label: fig-pigs-bb-UrbvsRom-diffplot
#| fig-height: 3.5
#| fig-pos: H

Pigs_a_RomeUrban.diffplot

```

### Cattle

The probabilities of occurrence of cattle remains in different context types have thinner credible intervals compared to pig remains credible intervals. In urban sites, no significant changing pattern can be observed, as the means of the 95% HDIs mostly lay on the mean probability of 0.20 across contexts, with the exception of the Roman period where it was below mean. Medieval urban sites exhibit increased variability, possibly due to higher uncertainty associated with less data. The mean precision ($\bar{\phi}$ = 7 ca.) in medieval urban sites is the highest of any category.

Rural contexts show more variability in probability trends and are more in line with the results of the chronological models. The credible intervals are slightly wider than urban contexts, but can still be interpreted and discussed later. In the Roman age, the probability of cattle occurrence is highest in rural sites, increasing after the 2^nd^ century and slightly decreasing in the medieval phases. Rural villas show stronger trends than rural sites, but with even more uncertainty. If in rural sites probabilities of occurrence of cattle NISP remains increases in the late Roman period, in villas there is an opposite trend with cattle probabilities going below the mean. As previously mentioned, data on early medieval rural villas are scarcer due to the changing functions of these sites and their lower continuity. Only six sites provided nine samples in this period: Ficarolo (loc. Gaiba-Chiunsano), Monte Torto di Osimo, Santa Marta, Villa Magna, S. Giovanni di Ruoti, and Faragola. Consequently, the resulting analysis for this category has higher uncertainty and wider credible intervals. However, the probabilities suggest a small increase again in this phase. The posterior precision parameter ($\bar{\phi}$) in this phase is the lowest, indicating both less data available and contradictory information in the data, contributing to the uncertainty.

Fortified sites, while exhibiting more uncertainty during the late Roman period, do not show significant changes in cattle NISP occurrences. The mean values of the 95% HDIs remain consistently above the overall mean of 0.20 in all chronologies, but only show a slight increase to around 0.25 in the medieval period, with a higher precision.

The trends in religious sites show similarities to those in villas, with mean probabilities dipping below the across-contexts average in the late Roman period and a steady increase in the early medieval and medieval phases. In *necropoleis*, the probabilities of cattle NISP are below the mean in the Roman-late Roman periods. However, in the early medieval phase, due to limited data availability (only one sample from the necropolis of Baggiovara, where cattle NISP is 74/316), the uncertainty is high, and the credible interval is too wide to draw any meaningful conclusions. This extended credible interval is due to the flat prior, indicating that the model is too uncertain to provide reliable probabilities.

The final category consists of only one site, the Flavium amphitheater. The probability of occurrence of cattle NISP remains in this category is relatively low and does not follow the same patterns as urban sites. There is a small decrease in the late Roman period and a potentially uncertain increase in the early medieval phase. However, the 50% HDI probabilities are consistently below the across-contexts mean.


```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

######################################################
# Initial data processing for input in models
######################################################

# RURAL AND URBAN SITES
dat.Cattle_RurUrb = list(N=d.Animals_RurUrb$Tot_NISP, A=d.Animals_RurUrb$Cattle, Tc_id=d.Animals_RurUrb$TC_id, J=nrow(d.Animals_RurUrb))

# Religious sites
dat.Cattle_Rel = list(N=d.Animals_Rel$Tot_NISP, A=d.Animals_Rel$Cattle, Tc_id=d.Animals_Rel$TC_id, J=nrow(d.Animals_Rel))

## Necropolis and amphitheaters
dat.Cattle_Necr_Amph = list(N=d.Animals_Necr_Amph$Tot_NISP, A=d.Animals_Necr_Amph$Cattle, Tc_id=d.Animals_Necr_Amph$TC_id, J=nrow(d.Animals_Necr_Amph))

# FORTIFIED SETTLEMENTS
dat.Cattle_fort = list(N=d.Animals_fort$Tot_NISP, A=d.Animals_fort$Cattle, Tc_id=d.Animals_fort$TC_id, J=nrow(d.Animals_fort))

# Cattle - Villas
dat.Cattle_villas = list(N=d.Animals_villas$Tot_NISP, A=d.Animals_villas$Cattle, Tc_id=d.Animals_villas$TC_id, J=nrow(d.Animals_villas))

# ROME, OSTIA, AND URBAN SITES
dat.Cattle_Rome_Urban = list(N=d.Animals_urban_sites$Tot_NISP, A=d.Animals_urban_sites$Cattle, Tc_id=d.Animals_urban_sites$TC_id, J=nrow(d.Animals_urban_sites))

```

```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
#| output: false

########################################
# Running the models
# Saving the models
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Cattle_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan",  # Stan program
  data = dat.Cattle_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Cattle_RurUrb.fit, "stan_models/Cattle_RurUrb_fit.rds")

Cattle_Rel.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Relig.stan",  # Stan program
  data = dat.Cattle_Rel,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Cattle_Rel.fit, "stan_models/Cattle_Rel_fit.rds")

Cattle_Necr_Amph.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_NecrAmph.stan",  # Stan program
  data = dat.Cattle_Necr_Amph,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Cattle_Necr_Amph.fit, "stan_models/Cattle_Necr_Amph_fit.rds")

Cattle_Fort.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Cattle_fort,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Cattle_Fort.fit, "stan_models/Cattle_Fort_fit.rds")

Cattle_Villas_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Cattle_villas,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Cattle_Villas_fit, "stan_models/Cattle_Villas_fit.rds")

Cattle_RomeUrban_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRome.stan",  # Stan program
  data = dat.Cattle_Rome_Urban,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Cattle_RomeUrban_fit, "stan_models/Cattle_RomeUrban_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Cattle_RurUrb.fit <- readRDS("stan_models/Cattle_RurUrb_fit.rds")
Cattle_Rel.fit <- readRDS("stan_models/Cattle_Rel_fit.rds")
Cattle_Necr_Amph.fit <- readRDS("stan_models/Cattle_Necr_Amph_fit.rds")
Cattle_Fort.fit <- readRDS("stan_models/Cattle_Fort_fit.rds")
Cattle_Villas_fit <- readRDS("stan_models/Cattle_Villas_fit.rds")
Cattle_RomeUrban_fit <- readRDS("stan_models/Cattle_RomeUrban_fit.rds")

```

```{r}
#| echo: false

################################################################
## Data handling for ggplot: a and theta/phi parameters
################################################################

Cattle_BB_Merge_a_UrbRur <- Cattle_RurUrb.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
    )
) 

Cattle_BB_Merge_a_NecrAmph <- Cattle_Necr_Amph.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
    )
) 

Cattle_BB_Merge_a_Rel <- Cattle_Rel.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
    )
) 

Cattle_BB_Merge_a_Fortified <- Cattle_Fort.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
    )
)  %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
    )
)  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
    )
)

Cattle_BB_Merge_a_Villas <- Cattle_Villas_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
    ) ) %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
    ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
    )
)

Cattle_BB_Merge_a <- rbind(Cattle_BB_Merge_a_UrbRur, Cattle_BB_Merge_a_Fortified, Cattle_BB_Merge_a_Villas, Cattle_BB_Merge_a_Rel, Cattle_BB_Merge_a_NecrAmph)
Cattle_BB_Merge_a$TC_text <- factor(Cattle_BB_Merge_a$TC_text)

## Data handling for theta/phi

Cattle_BB_Merge_theta_UrbRur <- Cattle_RurUrb.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
    )
) 

Cattle_BB_Merge_theta_NecrAmph <- Cattle_Necr_Amph.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
    )
) 

Cattle_BB_Merge_theta_Rel <- Cattle_Rel.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
    )
) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
    )
) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
    )
) 

Cattle_BB_Merge_theta_Fortified <- Cattle_Fort.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
    )
)  %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
    )
)  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
    )
)

Cattle_BB_Merge_theta_Villas <- Cattle_Villas_fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
    ) ) %>% 
    mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
    ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
    )
)

Cattle_BB_Merge_phi <- rbind(Cattle_BB_Merge_theta_UrbRur, Cattle_BB_Merge_theta_Fortified, Cattle_BB_Merge_theta_Villas, Cattle_BB_Merge_theta_Rel, Cattle_BB_Merge_theta_NecrAmph)
Cattle_BB_Merge_phi$TC_text <- factor(Cattle_BB_Merge_phi$TC_text)


################################
# Plotting
################################

Cattle_BB.plot <- Cattle_BB_Merge_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
    )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
    geom_vline(xintercept = inv_logit(mean(Cattle_BB_Merge_a$a)), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Cattle",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        linewidth = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")


Cattle_BB_phi.plot <- Cattle_BB_Merge_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
    geom_vline(xintercept = mean(Cattle_BB_Merge_phi$theta),     
               linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    scale_y_discrete(limits=rev)+
    scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
    scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Cattle",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                        linewidth = 0.25,
                                        linetype = 2),
        axis.title.x.top = element_blank()
        )+
  facet_grid(Type ~ ., scales="free")

```

```{r}
#| echo: false
#| fig-height: 10
#| label: fig-cattle-bb-ct
#| fig-width: 6.5
#| fig-cap: "Estimated probabilities of occurrence of cattle remains in different context types."
#| fig-pos: H

Cattle_BB.plot
```

```{r}
#| echo: false
#| label: fig-cattle-bb-ct-prec
#| fig-cap: "Precision in the context-type beta-binomial models for cattle remains."
#| fig-height: 10
#| fig-width: 6.5
#| fig-pos: H
Cattle_BB_phi.plot

```

If pigs can act as a marker of urbanization, it is also important to investigate whether the consumption patterns of other animals in Rome differ from those in other urban centers. Additionally, while pigs were primarily raised for meat consumption, cattle had further purposes (*e.g.* agricultural purposes, leather production, etc.). To overcome this issue, it would be ideal to control for factors such as age and wear, even though this is outside the boundaries of this research and biometric data is not stored in the database. It is essential to keep this context in mind when interpreting the graphs and drawing conclusions.

In contrast to pigs, the analysis reveals notable distinctions in cattle consumption trends between Rome and other urban sites across different chronological phases. One notable observation is that cattle appears to be more commonly consumed in other urban cities compared to Rome. Additionally, while cattle consumption decreases in Rome during the late Roman period, it concurrently increases in other cities. It is worth noting that the credible intervals in Rome are relatively high, limiting further comparisons in other periods. However, there seems to be a positive trend again in the early medieval phase. The graph depicting the differences illustrates a narrower gap between Rome/Ostia and other cities during the Roman period, whereas the disparity becomes more pronounced in the late Roman phase.

```{r}
#| echo: false

#####################
#   ROME VS URBAN   #
#####################

Cattle_RomeUrban.samples = extract.samples(Cattle_RomeUrban_fit)

Cattle_RomeUrban.diff <- list(
  R=inv_logit(Cattle_RomeUrban.samples$a[,1]) - inv_logit(Cattle_RomeUrban.samples$a[,2]),
  LR= inv_logit(Cattle_RomeUrban.samples$a[,3]) - inv_logit(Cattle_RomeUrban.samples$a[,4])
)

Cattle_a_RomeUrban <- Cattle_RomeUrban_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rome.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rome.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rome.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rome.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rome",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rome",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rome",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rome",
    TC_id == 8 ~ "Urban"
  )
  ) 

Cattle_a_RomeUrban.plot <- Cattle_a_RomeUrban %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(xintercept = inv_logit(mean(Cattle_a_RomeUrban$a)),    
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Cattle",
       subtitle = "Rome vs Urban",
       caption="The dashed line indicates the mean for the type of site and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")

Cattle_a_RomeUrban.diffplot <- as.data.frame(Cattle_RomeUrban.diff) %>% 
  mutate(Chronology = ifelse(!is.na(R), "R", "LR")) %>%
  gather(key = "Variable", value = "Value", -Chronology) %>%
  ggplot(aes(x = Value, y=Variable))+
  stat_halfeye()+  
  labs(x="Difference (Rome* - Urban sites)",
       y="Chronology",
       title="Cattle",
       subtitle = "Differential probability of cattle occurrence ",
       caption="* 'Rome' also includes the neighboring port city of Ostia.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )

```

```{r}
#| echo: false
#| fig-cap: "Estimated probabilities of occurrence of cattle remains in urban sites and Rome/Ostia in four chronological phases."
#| label: fig-cattle-bb-UrbvsRom
#| fig-height: 4
#| fig-pos: H

Cattle_a_RomeUrban.plot
```

```{r}
#| echo: false
#| fig-cap: "Calculation of Rome/Ostia's influence on other urban sites during the Roman and late Roman periods. This was achieved by subtracting the cattle estimates for urban urban sites from those of Rome/Ostia."
#| label: fig-cattle-bb-UrbvsRom-diffplot
#| fig-height: 3.5
#| fig-pos: H
Cattle_a_RomeUrban.diffplot

```


### Sheep/Goats

Among the contexts analysed, the probability of finding sheep/goats remains is the second highest with a mean of 0.29, following pig remains. In Roman and late Roman urban sites sheep/goats probabilities are below the mean, although there is a positive trend until the early Middle Ages. The medieval phases (6^th^ to 11^th^ century) show mean probabilities of 0.31. Rural sites exhibit a decreasing trend, with the 0.50 HDIs always above mean. However, even with this decreasing trend, the probabilities in rural sites are still higher than those in urban sites. In the Roman period, the sheep/goats probability of occurrence is particularly high (0.35) in rural sites and decreases in the following phases, until the 11^th^ century, when there is a strong increase in sheep/goats probabilities (associated with more uncertainty and variability).

Rural villas show a decreasing trend in the probabilities of sheep/goats remains: the 50% HDI probabilities in rural villas remain lower than the average, with a slight decrease in the late Roman phase and a strong increase in the early medieval period, when uncertainty is also high. Although the number of samples is not as high as other categories, the mean precision ($\bar{\phi}$ = 8.5 ca.) is high in the late Roman phase, indicating consistency in the assemblages.

In fortified sites, there is a decreasing trend in sheep/goats probability, starting from a high point of 0.37 in the late Roman phase and reaching below the average of all contexts in the 11^th^ century. As for the case of most categories (except urban sites), there is a decreasing trend in sheep/goats probability until the 11^th^ century in religious sites. However, for this category the credible intervals are quite wide, and the precision is always below average, making it challenging to draw reliable conclusions. In the case of *necropoleis*, the credible intervals are too large to provide any meaningful insight.

Finally, in the Flavium amphitheater samples the 50% HDIs probabilities are below average, decreasing in the late Roman period and increasing (with extreme uncertainty) above average in the early medieval phase.

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

# RURAL AND URBAN SITES
dat.Caprine_RurUrb = list(N=d.Animals_RurUrb$Tot_NISP, A=d.Animals_RurUrb$Caprine, Tc_id=d.Animals_RurUrb$TC_id, J=nrow(d.Animals_RurUrb))

# Religious sites
dat.Caprine_Rel = list(N=d.Animals_Rel$Tot_NISP, A=d.Animals_Rel$Caprine, Tc_id=d.Animals_Rel$TC_id, J=nrow(d.Animals_Rel))

# Necropolis and amphitheaters
dat.Caprine_Necr_Amph = list(N=d.Animals_Necr_Amph$Tot_NISP, A=d.Animals_Necr_Amph$Caprine, Tc_id=d.Animals_Necr_Amph$TC_id, J=nrow(d.Animals_Necr_Amph))

# FORTIFIED SETTLEMENTS
dat.Caprine_fort = list(N=d.Animals_fort$Tot_NISP, A=d.Animals_fort$Caprine, Tc_id=d.Animals_fort$TC_id, J=nrow(d.Animals_fort))

# Caprine - Villas
dat.Caprine_villas = list(N=d.Animals_villas$Tot_NISP, A=d.Animals_villas$Caprine, Tc_id=d.Animals_villas$TC_id, J=nrow(d.Animals_villas))

# ROME, OSTIA, AND URBAN SITES
dat.Caprine_Rome_Urban = list(N=d.Animals_urban_sites$Tot_NISP, A=d.Animals_urban_sites$Caprine, Tc_id=d.Animals_urban_sites$TC_id, J=nrow(d.Animals_urban_sites))

```

```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
#| output: false

Caprine_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan",  # Stan program
  data = dat.Caprine_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(Caprine_RurUrb.fit, "stan_models/Caprine_RurUrb_fit.rds")

Caprine_Rel.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Relig.stan",  # Stan program
  data = dat.Caprine_Rel,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Caprine_Rel.fit, "stan_models/Caprine_Rel_fit.rds")

Caprine_Necr_Amph.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_NecrAmph.stan",  # Stan program
  data = dat.Caprine_Necr_Amph,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Caprine_Necr_Amph.fit, "stan_models/Caprine_Necr_Amph_fit.rds")

Caprine_Fort.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Caprine_fort,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Caprine_Fort.fit, "stan_models/Caprine_Fort_fit.rds")

Caprine_Villas_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.Caprine_villas,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Caprine_Villas_fit, "stan_models/Caprine_Villas_fit.rds")

Caprine_RomeUrban_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRome.stan",  # Stan program
  data = dat.Caprine_Rome_Urban,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Caprine_RomeUrban_fit, "stan_models/Caprine_RomeUrban_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Caprine_RurUrb.fit <- readRDS("stan_models/Caprine_RurUrb_fit.rds")
Caprine_Rel.fit <- readRDS("stan_models/Caprine_Rel_fit.rds")
Caprine_Necr_Amph.fit <- readRDS("stan_models/Caprine_Necr_Amph_fit.rds")
Caprine_Fort.fit <- readRDS("stan_models/Caprine_Fort_fit.rds")
Caprine_Villas_fit <- readRDS("stan_models/Caprine_Villas_fit.rds")
Caprine_RomeUrban_fit <- readRDS("stan_models/Caprine_RomeUrban_fit.rds")

```

```{r}
#| echo: false

################################################################
## Data handling for ggplot: a and theta/phi parameters
################################################################

Caprine_BB_Merge_a_UrbRur <- Caprine_RurUrb.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
  )
  ) 

Caprine_BB_Merge_a_NecrAmph <- Caprine_Necr_Amph.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
  )
  ) 

Caprine_BB_Merge_a_Rel <- Caprine_Rel.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
  )
  ) 

Caprine_BB_Merge_a_Fortified <- Caprine_Fort.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
  )
  )  %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
  )
  )  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
  )
  )

Caprine_BB_Merge_a_Villas <- Caprine_Villas_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
  ) ) %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
  ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
  )
  )

Caprine_BB_Merge_a <- rbind(Caprine_BB_Merge_a_UrbRur, Caprine_BB_Merge_a_Fortified, Caprine_BB_Merge_a_Villas, Caprine_BB_Merge_a_Rel, Caprine_BB_Merge_a_NecrAmph)
Caprine_BB_Merge_a$TC_text <- factor(Caprine_BB_Merge_a$TC_text)

## Data handling for theta

Caprine_BB_Merge_theta_UrbRur <- Caprine_RurUrb.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
  )
  ) 

Caprine_BB_Merge_theta_NecrAmph <- Caprine_Necr_Amph.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
  )
  ) 

Caprine_BB_Merge_theta_Rel <- Caprine_Rel.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
  )
  ) 

Caprine_BB_Merge_theta_Fortified <- Caprine_Fort.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
  )
  )  %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
  )
  )  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
  )
  )

Caprine_BB_Merge_theta_Villas <- Caprine_Villas_fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
  ) ) %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
  ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
  )
  )

Caprine_BB_Merge_phi <- rbind(Caprine_BB_Merge_theta_UrbRur, Caprine_BB_Merge_theta_Fortified, Caprine_BB_Merge_theta_Villas, Caprine_BB_Merge_theta_Rel, Caprine_BB_Merge_theta_NecrAmph)
Caprine_BB_Merge_phi$TC_text <- factor(Caprine_BB_Merge_phi$TC_text)

# Plotting

Caprine_BB.plot <- Caprine_BB_Merge_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  geom_vline(xintercept = inv_logit(mean(Caprine_BB_Merge_a$a)),     
             linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Sheep/Goats",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")


Caprine_BB_phi.plot <- Caprine_BB_Merge_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(
    xintercept = mean(Caprine_BB_Merge_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Sheep/Goats",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")

```

```{r}
#| echo: false
#| fig-height: 10
#| fig-width: 6.5
#| label: fig-caprine-bb-ct
#| fig-cap: "Estimated probabilities of occurrence of caprine remains in different context types."
#| fig-pos: H

Caprine_BB.plot
```

```{r}
#| echo: false
#| label: fig-caprine-bb-ct-prec
#| fig-cap: "Precision in the context-type beta-binomial models for caprine remains."
#| fig-height: 10
#| fig-width: 6.5
#| fig-pos: H
Caprine_BB_phi.plot
```

For sheep and goats, similar differences were calculated between Rome/Ostia and other urban sites. The overall chronological trends in urban sites show no significant variation, while Rome and Ostia show an increasing trend, albeit with a larger credible interval after the Roman period. Again, the differences in the probabilities of finding sheep/goat remains in Rome/Ostia versus other urban sites are negative, suggesting that these animals were consumed more in other cities than in the capital. During the late Roman period, however, the mean probability approaches zero.

```{r}
#| echo: false

#####################
#   ROME VS URBAN   #
#####################

Caprine_RomeUrban.samples = extract.samples(Caprine_RomeUrban_fit)

Caprine_RomeUrban.diff <- list(
  R=inv_logit(Caprine_RomeUrban.samples$a[,1]) - inv_logit(Caprine_RomeUrban.samples$a[,2]),
  LR= inv_logit(Caprine_RomeUrban.samples$a[,3]) - inv_logit(Caprine_RomeUrban.samples$a[,4])
)

Caprine_a_RomeUrban <- Caprine_RomeUrban_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rome.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rome.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rome.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rome.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rome",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rome",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rome",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rome",
    TC_id == 8 ~ "Urban"
  )
  ) 

Caprine_a_RomeUrban.plot <- Caprine_a_RomeUrban %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
  stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(xintercept = inv_logit(mean(Caprine_a_RomeUrban$a)),    
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Sheep/Goats",
       subtitle = "Rome vs Urban",
       caption="The dashed line indicates the mean for the type of site and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")

Caprine_a_RomeUrban.diffplot <- as.data.frame(Caprine_RomeUrban.diff) %>% 
  mutate(Chronology = ifelse(!is.na(R), "R", "LR")) %>%
  gather(key = "Variable", value = "Value", -Chronology) %>%
  ggplot(aes(x = Value, y=Variable))+
  stat_halfeye()+  
  labs(x="Difference (Rome* - Urban sites)",
       y="Chronology",
       title="Sheep/Goats",
       subtitle = "Differential probability of sheep/goats occurrence ",
       caption="* 'Rome' also includes the neighboring port city of Ostia.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )

```

```{r}
#| echo: false
#| fig-cap: "Estimated probabilities of occurrence of caprine remains in urban sites and Rome/Ostia in four chronological phases."
#| label: fig-caprine-bb-UrbvsRom
#| fig-height: 4
#| fig-pos: H
Caprine_a_RomeUrban.plot
```

```{r}
#| echo: false
#| fig-cap: "Calculation of Rome/Ostia's influence on other urban sites during the Roman and late Roman periods. This was achieved by subtracting the caprine estimates for urban urban sites from those of Rome/Ostia."
#| label: fig-caprine-bb-UrbvsRom-diffplot
#| fig-height: 3.5
#| fig-pos: H
Caprine_a_RomeUrban.diffplot

```


### Edible W. Animals

The trends in edible wild animals are similar between urban and rural sites, with mean probabilities below the average of 0.07 during the Roman and late Roman periods. The means for urban sites are around 0.03, while those for rural sites are approximately 0.05. In the early medieval period, both urban and rural sites show a small increase, with probabilities of 0.05 and 0.06, respectively. In the medieval period, the 50% HDIs are above the mean for both urban and rural sites, reaching a peak of 0.11 in rural areas. However, caution is required for the 11^th^ century, as the credible interval is larger and the mean precision ($\bar{\phi}$) is low, indicating increased variability.

While the credible intervals are wider, rural villas consistently have means above the average and higher than other site types. In the Roman period, the mean probability is 0.11, which decreases to 0.09 in the late Roman phase and 0.05 in the early Middle Ages.

Similarly, fortified sites display 50% HDIs above the across-context mean, with a small decrease in the early medieval phase and an increase in the 11^th^ century. Both sites show a positive correlation between game consumption and elite lifeways. Religious sites show probabilities above the mean in the Roman and late Roman periods, when these sites mostly include temples or ritual contexts. However, in the medieval phases, the probabilities decrease below the mean instead. The credible intervals for the *necropoleis* are too wide to draw any reliable conclusion, but it is noteworthy that there is evidence of wild game consumption in these contexts.

The Flavium amphitheater also exhibits probabilities below the mean, although the full credible interval extends above the mean as well. In the early medieval phase, the mean probability rises above 0.10, but the credible interval remains too wide for confident interpretation.

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

# RURAL AND URBAN SITES
dat.WMammals_RurUrb = list(N=d.Animals_RurUrb$Tot_NISP, A=d.Animals_RurUrb$Edible.W..Mammals, Tc_id=d.Animals_RurUrb$TC_id, J=nrow(d.Animals_RurUrb))

# Religious sites
dat.WMammals_Rel = list(N=d.Animals_Rel$Tot_NISP, A=d.Animals_Rel$Edible.W..Mammals, Tc_id=d.Animals_Rel$TC_id, J=nrow(d.Animals_Rel))

# Necropolis and amphitheaters
dat.WMammals_Necr_Amph = list(N=d.Animals_Necr_Amph$Tot_NISP, A=d.Animals_Necr_Amph$Edible.W..Mammals, Tc_id=d.Animals_Necr_Amph$TC_id, J=nrow(d.Animals_Necr_Amph))

# FORTIFIED SETTLEMENTS
dat.WMammals_fort = list(N=d.Animals_fort$Tot_NISP, A=d.Animals_fort$Edible.W..Mammals, Tc_id=d.Animals_fort$TC_id, J=nrow(d.Animals_fort))

# WMammals - Villas
dat.WMammals_villas = list(N=d.Animals_villas$Tot_NISP, A=d.Animals_villas$Edible.W..Mammals, Tc_id=d.Animals_villas$TC_id, J=nrow(d.Animals_villas))

```

```{r}
#| echo: false
#| eval: false
#| message: false
#| warning: false
#| output: false

WMammals_RurUrb.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_UrbRur.stan", 
  data = dat.WMammals_RurUrb,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4              # number of cores (could use one per chain
)

saveRDS(WMammals_RurUrb.fit, "stan_models/WMammals_RurUrb_fit.rds")

WMammals_Rel.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Relig.stan",  # Stan program
  data = dat.WMammals_Rel,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4              # number of cores (could use one per chain
)
saveRDS(WMammals_Rel.fit, "stan_models/WMammals_Rel_fit.rds")

WMammals_Necr_Amph.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_NecrAmph.stan",  # Stan program
  data = dat.WMammals_Necr_Amph,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(WMammals_Necr_Amph.fit, "stan_models/WMammals_Necr_Amph_fit.rds")

WMammals_Fort.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.WMammals_fort,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(WMammals_Fort.fit, "stan_models/WMammals_Fort_fit.rds")

WMammals_Villas_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_Fort.stan",  # Stan program
  data = dat.WMammals_villas,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(WMammals_Villas_fit, "stan_models/WMammals_Villas_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

WMammals_RurUrb.fit <- readRDS("stan_models/WMammals_RurUrb_fit.rds")
WMammals_Rel.fit <- readRDS("stan_models/WMammals_Rel_fit.rds")
WMammals_Necr_Amph.fit <- readRDS("stan_models/WMammals_Necr_Amph_fit.rds")
WMammals_Fort.fit <- readRDS("stan_models/WMammals_Fort_fit.rds")
WMammals_Villas_fit <- readRDS("stan_models/WMammals_Villas_fit.rds")

```

```{r}
#| echo: false

################################################################
## Data handling for ggplot: a and theta/phi parameters
################################################################

WMammals_BB_Merge_a_UrbRur <- WMammals_RurUrb.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
  )
  ) 

WMammals_BB_Merge_a_NecrAmph <- WMammals_Necr_Amph.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
  )
  ) 

WMammals_BB_Merge_a_Rel <- WMammals_Rel.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
  )
  ) 

WMammals_BB_Merge_a_Fortified <- WMammals_Fort.fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
  )
  )  %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
  )
  )  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
  )
  )

WMammals_BB_Merge_a_Villas <- WMammals_Villas_fit %>%
  spread_draws(a[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
  ) ) %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
  ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
  )
  )

WMammals_BB_Merge_a <- rbind(WMammals_BB_Merge_a_UrbRur, WMammals_BB_Merge_a_Fortified, WMammals_BB_Merge_a_Villas, WMammals_BB_Merge_a_Rel, WMammals_BB_Merge_a_NecrAmph)
WMammals_BB_Merge_a$TC_text <- factor(WMammals_BB_Merge_a$TC_text)

## Data handling for theta

WMammals_BB_Merge_theta_UrbRur <- WMammals_RurUrb.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural.R",
    TC_id == 2 ~ "Urban.R",
    TC_id == 3 ~ "Rural.LR",
    TC_id == 4 ~ "Urban.LR",
    TC_id == 5 ~ "Rural.EMA",
    TC_id == 6 ~ "Urban.EMA",
    TC_id == 7 ~ "Rural.Ma",
    TC_id == 8 ~ "Urban.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA",
    TC_id == 7 ~ "Ma",
    TC_id == 8 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural",
    TC_id == 2 ~ "Urban",
    TC_id == 3 ~ "Rural",
    TC_id == 4 ~ "Urban",
    TC_id == 5 ~ "Rural",
    TC_id == 6 ~ "Urban",
    TC_id == 7 ~ "Rural",
    TC_id == 8 ~ "Urban"
  )
  ) 

WMammals_BB_Merge_theta_NecrAmph <- WMammals_Necr_Amph.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Necropolis.R",
    TC_id == 2 ~ "Urban, amphitheater.R",
    TC_id == 3 ~ "Necropolis.LR",
    TC_id == 4 ~ "Urban, amphitheater.LR",
    TC_id == 5 ~ "Necropolis.EMA",
    TC_id == 6 ~ "Urban, amphitheater.EMA"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "R",
    TC_id == 3 ~ "LR",
    TC_id == 4 ~ "LR",
    TC_id == 5 ~ "EMA",
    TC_id == 6 ~ "EMA"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Necropolis",
    TC_id == 2 ~ "A.Flavium",
    TC_id == 3 ~ "Necropolis",
    TC_id == 4 ~ "A.Flavium",
    TC_id == 5 ~ "Necropolis",
    TC_id == 6 ~ "A.Flavium"
  )
  ) 

WMammals_BB_Merge_theta_Rel <- WMammals_Rel.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Religious.R",
    TC_id == 2 ~ "Religious.LR",
    TC_id == 3 ~ "Religious.EMA",
    TC_id == 4 ~ "Religious.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA",
    TC_id == 4 ~ "Ma"
  )
  ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Religious",
    TC_id == 2 ~ "Religious",
    TC_id == 3 ~ "Religious",
    TC_id == 4 ~ "Religious"
  )
  ) 

WMammals_BB_Merge_theta_Fortified <- WMammals_Fort.fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Fortified.LR",
    TC_id == 2 ~ "Fortified.EMA",
    TC_id == 3 ~ "Fortified.Ma"
  )
  )  %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "LR",
    TC_id == 2 ~ "EMA",
    TC_id == 3 ~ "Ma"
  )
  )  %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Fortified",
    TC_id == 2 ~ "Fortified",
    TC_id == 3 ~ "Fortified"
  )
  )

WMammals_BB_Merge_theta_Villas <- WMammals_Villas_fit %>%
  spread_draws(theta[TC_id]) %>% 
  mutate(TC_text = case_when(
    TC_id == 1 ~ "Rural site, villa.R",
    TC_id == 2 ~ "Rural site, villa.LR",
    TC_id == 3 ~ "Rural site, villa.EMA"
  ) ) %>% 
  mutate(Chronology = case_when(
    TC_id == 1 ~ "R",
    TC_id == 2 ~ "LR",
    TC_id == 3 ~ "EMA"
  ) ) %>% 
  mutate(Type = case_when(
    TC_id == 1 ~ "Rural villa",
    TC_id == 2 ~ "Rural villa",
    TC_id == 3 ~ "Rural villa"
  )
  )

WMammals_BB_Merge_phi <- rbind(WMammals_BB_Merge_theta_UrbRur, WMammals_BB_Merge_theta_Fortified, WMammals_BB_Merge_theta_Villas, WMammals_BB_Merge_theta_Rel, WMammals_BB_Merge_theta_NecrAmph)
WMammals_BB_Merge_phi$TC_text <- factor(WMammals_BB_Merge_phi$TC_text)

# Plotting

WMammals_BB.plot <- WMammals_BB_Merge_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(xintercept = inv_logit(mean(WMammals_BB_Merge_a$a)),     
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Edible Wild Animals",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")


WMammals_BB_phi.plot <- WMammals_BB_Merge_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(
    xintercept = mean(WMammals_BB_Merge_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Edible Wild Animals",
       subtitle="Site type",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Type ~ ., scales="free")

```


```{r}
#| echo: false
#| fig-height: 10
#| fig-width: 6.5
#| label: fig-wildanimals-bb-ct
#| fig-cap: "Estimated probabilities of occurrence of edible wild animals remains in different context types."
#| fig-pos: H

WMammals_BB.plot
```

```{r}
#| echo: false
#| label: fig-wildanimals-bb-ct-prec
#| fig-cap: "Precision in the context-type beta-binomial models for edible wild animals remains."
#| fig-height: 10
#| fig-width: 6.5
#| fig-pos: H
WMammals_BB_phi.plot
```

### Community plot

To examine the overall trends across all context types and chronologies, the probabilities of occurrence for the four animals were compiled and plotted against the precision. The resulting plot shows different context types and chronologies for each animal. Since these are separate models, multinomial regressions would be informative in this sense. These models could be explored further in future research.

In the Roman period, the probabilities for pigs and wild animals show clear separation among urban, rural, and villa sites. Pigs are mostly predicted in urban sites, followed by villas and rural sites. Conversely, wild animals have higher probabilities in villas, then rural and urban sites. For pigs, most of the $\phi$ values range between 3 and 8 across all contexts, while the wild animals model shows low precision values for villas and greater variability in urban and rural sites. Additionally, wild mammal probabilities in villa sites vary widely, ranging from 0.05 to as high as 0.20. In contrast, the probabilities of wild mammal occurrence in urban and rural sites are more consistent. The probabilities of cattle and sheep/goats in different contexts are less clear. Rural sites have higher probabilities for both animals than urban sites, and the probabilities for villas have wider ranges.

However, adding a fourth site type in the late Roman period complicates the reading. As for the Roman period, pigs and wild animals show a separation, with pigs being more likely in urban sites and wild animals in villas, but there is a shift in probabilities in the late Roman period. Pigs are now more likely in villas, whereas wild animals remain similarly distributed. Fortified sites have variable probabilities for all animals. Cattle is more present in rural sites, followed by urban and villa sites, while sheep/goats is most likely to occur in fortified sites (with high variability), followed by rural, urban, and villa sites. The latter show a higher degree of precision.

In the early medieval period, there is less distinction between the different context types for all animals, except for cattle, which is more likely to occur in rural sites, followed by urban and villa sites. There are no clear trends for the other animals. In the 11^th^ century, there is a lot of variability for all animals, possibly due to the smaller sample size. Pigs appear to be more common on urban and fortified sites, while cattle and sheep/goats are more likely to occur on rural sites. The patterns of probabilities for wild animals are highly inconsistent.

```{r}
#| echo: false

Animals_by_SiteType_fit_comm <- bind_rows(
(Pigs_BB_Merge_a %>% 
  bind_cols(Precis = Pigs_BB_Merge_phi$theta) %>%
  mutate(animal = "Pigs")),
(Cattle_BB_Merge_a %>% 
  bind_cols(Precis = Cattle_BB_Merge_phi$theta) %>%
  mutate(animal = "Cattle")),
(Caprine_BB_Merge_a %>% 
  bind_cols(Precis = Caprine_BB_Merge_phi$theta) %>%
  mutate(animal = "Caprine")),
(WMammals_BB_Merge_a %>% 
  bind_cols(Precis = WMammals_BB_Merge_phi$theta) %>%
  mutate(animal = "W_Animals"))
)


Animals_by_SiteType_fit_comm <- subset(Animals_by_SiteType_fit_comm, Type=="Rural" | Type=="Urban" | Type=="Rural villa" | Type=="Fortified")

Animals_by_SiteType_fit_comm <- slice_sample(
  Animals_by_SiteType_fit_comm,
  n=4000
)

```

```{r}
#| echo: false
#| fig-height: 10
#| fig-width: 12

ggplot(Animals_by_SiteType_fit_comm, 
       aes(x = inv_logit(a), y = Precis, color = Type)) +
  geom_point(alpha = .4) +
  theme_tidybayes() +
  scale_color_brewer(palette = "Spectral") +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +  
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 8),
    sec.axis = dup_axis()
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 8),
    sec.axis = dup_axis()
  ) +
  labs(
    x = "Predicted occurrence",
    y = "Precision",
    color = "Animal",
    title = "Animals",
    subtitle = "Chronological occurrence against precision"
  )+
  facet_grid(factor(Chronology, levels=chrono_levels)~factor(animal, levels = c("Pigs", "Cattle", "Caprine", "W_Animals")), scales="free")

```

## Macroregion {style="text-align:justify;"}

We aim to investigate whether there are differences in the relative amount of NISP data among southern, central, and northern Italy during various chronological periods. Building upon the methods utilized in @sec-bot-res-macroregion, we construct a DAG that highlights the necessity of blocking by `Chronology` and stratifying by `Macroregion`, in a similar manner to the previous analysis.

```{r}
#| echo: false
#| label: fig-macroregion-dag-animals
#| fig-height: 2.5
#| fig-cap: "The DAG that represents the relationship between Chronology, Macroregion, and NISP in the study. Chronology is shown as a collider variable, and its influence on NISP is mediated through Macroregion. To block the backdoor path between Chronology and NISP, the dataset is stratified by Chronology."

DAG_macroregion <- dagitty('dag {
NISP [outcome]
Chronology [collider,dagitty.stratum="1"]
Macroregion [exposure,dagitty.stratum="2"]
Chronology -> NISP
Chronology -> Macroregion
Macroregion -> NISP
}')

DAG_macroregion <- tidy_dagitty(DAG_macroregion)

ggdag_paths(DAG_macroregion, 
      text = FALSE, 
      use_labels = "name", 
      shadow = TRUE) +
  theme_dag(base_size = 14)+
  theme(legend.position = "none", strip.text = element_blank())+
  scale_color_manual(values = "#0072B2", na.value = "grey80") + 
  scale_fill_manual(values = "#0072B2", na.value = "grey80")+
   ggraph::scale_edge_color_manual(values = "#0072B2", na.value = "grey80")


```

To account for the double stratification by `Chronology` and `Macroregion` as categorical predictors, an interaction index must be used, just as in the previous model. This allows to stratify the data by both variables and generate distinct intercepts for each combination of the two predictors. The interaction dummy index (${[REGid]}$) will determine the variation in intercepts ($\alpha$) across different macroregions and chronologies. The $\phi$ parameter indicates the precision in the Beta distribution, modelled by chronology and macroregion.

$$
A_{i} \sim BetaBinomial(NISP_{i}, \bar{p}_{i} , \phi_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[REGid]}
$$

$$
\alpha_{[REGid]} \sim Normal(0,1.5)
$$

$$
\phi_{[REGid]} \sim Exponential(1)+2
$$

```{r}
#| echo: false

d.Animals_Reg <- Animals_Df2
d.Animals_Reg$Reg_id <- as.integer(interaction(d.Animals_Reg$Macroregion, d.Animals_Reg$Chronology))

dat.Pigs_Reg = list(N=d.Animals_Reg$Tot_NISP, A=d.Animals_Reg$Pigs, Reg_id=d.Animals_Reg$Reg_id, J=nrow(d.Animals_Reg))
dat.Cattle_Reg = list(N=d.Animals_Reg$Tot_NISP, A=d.Animals_Reg$Cattle, Reg_id=d.Animals_Reg$Reg_id, J=nrow(d.Animals_Reg))
dat.Caprine_Reg = list(N=d.Animals_Reg$Tot_NISP, A=d.Animals_Reg$Caprine, Reg_id=d.Animals_Reg$Reg_id, J=nrow(d.Animals_Reg))
dat.WMammals_Reg = list(N=d.Animals_Reg$Tot_NISP, A=d.Animals_Reg$Edible.W..Mammals, Reg_id=d.Animals_Reg$Reg_id, J=nrow(d.Animals_Reg))

```

### Pigs

The credible intervals of the resulting probabilities of pig occurrence show variability, making it challenging to describe the results. However, some observations can still be made. Firstly, it is noticeable that southern and central Italy share similar trends, albeit with different estimated probabilities. In the Roman period, central Italy has the highest 95% HDI for pigs, with a mean probability of 0.51, well above the across-regions mean of 0.36. Although 50 out of 99 samples from this period are from urban contexts, the 30 samples from rural contexts are sufficient to avoid suspicions of biases. Similarly, the credible interval is wider in southern Italy, with a mean probability of around 0.43. For both regions, the trend shows a decreasing probability of pig occurrence in the late Roman and early medieval periods. In central Italy, the 95% HDI mean values reach the across-regions mean in the early Middle Ages, while in southern Italy, most probabilities are already below the mean in the late Roman period. The analysis reveals a different pattern for northern Italy compared to southern and central Italy. The probability of pigs in northern Italy shows only a slight decrease in the late Roman period, from 0.27 to 0.26. However, there is an apparent increase in the probability of pigs during the medieval phases, although the 11^th^ century remains uncertain due to limited observations. Conversely, in southern and central Italy, the trend is decreasing in the late Roman and early medieval periods. While the 11^th^ century shows a slight increase in both regions, the credible interval for southern Italy is too wide for meaningful conclusions.

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################


Pigs_Reg.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_reg.stan",  # Stan program
  data = dat.Pigs_Reg,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Pigs_Reg.fit, "stan_models/Pigs_Reg_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Pigs_Reg.fit <- readRDS("stan_models/Pigs_Reg_fit.rds")

Pigs_Reg.fit_a <- Pigs_Reg.fit %>%
  spread_draws(a[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Northern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

Pigs_Reg.fit_phi <- Pigs_Reg.fit %>%
  spread_draws(theta[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

# Plotting

Pigs_Reg.plot <- Pigs_Reg.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    geom_vline(
    xintercept = inv_logit(mean(Pigs_Reg.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Pigs",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


Pigs_Reg_phi.plot <- Pigs_Reg.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Pigs_Reg.fit_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Pigs",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


```

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-pigs-bb-reg
#| fig-cap: "Estimated probabilities of occurrence of pig animals remains in different macroregions."
#| fig-pos: H

Pigs_Reg.plot

```

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-pigs-bb-reg-prec
#| fig-cap: "Precision in the context-type beta-binomial models for pig remains."
#| fig-pos: H

Pigs_Reg_phi.plot

```

### Cattle

Similar patterns are observed for the occurrence probabilities of cattle in southern and central Italy. In the Roman and late Roman periods, the 50% HDIs for southern and central Italy are lower than the across-regions mean of 0.23. However, in the early Middle Ages, the probabilities increase in both regions and go above the mean. In contrast, northern Italy shows much higher mean probabilities in the Roman (0.27) and late Roman (0.32) periods compared to the other regions, but the mean decreases to 0.24 in the early Middle Ages. Due to wide credible intervals, it is difficult to provide accurate estimates for the 11^th^ century.

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Cattle_Reg.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_reg.stan",  # Stan program
  data = dat.Cattle_Reg,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Cattle_Reg.fit, "stan_models/Cattle_Reg_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Cattle_Reg.fit <- readRDS("stan_models/Cattle_Reg_fit.rds")

Cattle_Reg.fit_a <- Cattle_Reg.fit %>%
  spread_draws(a[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

Cattle_Reg.fit_phi <- Cattle_Reg.fit %>%
  spread_draws(theta[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

# Plotting

Cattle_Reg.plot <- Cattle_Reg.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
    geom_vline(
    xintercept = inv_logit(mean(Cattle_Reg.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Cattle",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


Cattle_Reg_phi.plot <- Cattle_Reg.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Cattle_Reg.fit_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Cattle",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


```

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-cattle-bb-reg
#| fig-cap: "Estimated probabilities of occurrence of cattle remains in different macroregions."
#| fig-pos: H

Cattle_Reg.plot

```

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-cattle-bb-reg-prec
#| fig-cap: "Precision in the context-type beta-binomial models for cattle remains."
#| fig-pos: H

Cattle_Reg_phi.plot

```

### Sheep/Goats

There are distinct patterns in sheep/goats occurrence probability across the three regions examined. In central Italy, the probability of sheep/goats is consistently lower than the across-regions mean of 0.31, ranging from 0.24 to 0.26 in the Roman age to the early Middle Ages. While the 11^th^ century credible interval is wide, most probabilities are above the mean. The model precision is particularly good in Roman and late Roman central Italy, with a peak of around 8. Roman northern Italy has the highest probability of sheep/goats occurrence in the Roman age, with a mean value of 0.36.

However, after this period, the mean probabilities decrease below the mean, only to increase again in the 11^th^ century. Nevertheless, the probability distribution for this period is not reliable. Southern Italy, on the other hand, shows a steady increase in probability from the Roman age, with the 50% HDI around the mean, to a peak of 0.41 in the early Middle Ages. However, the wide credible interval and low model precision in the 11^th^ century prevent definitive conclusions.

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false

########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Caprine_Reg.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_reg.stan",  # Stan program
  data = dat.Caprine_Reg,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)
saveRDS(Caprine_Reg.fit, "stan_models/Caprine_Reg_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Caprine_Reg.fit <- readRDS("stan_models/Caprine_Reg_fit.rds")

Caprine_Reg.fit_a <- Caprine_Reg.fit %>%
  spread_draws(a[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

Caprine_Reg.fit_phi <- Caprine_Reg.fit %>%
  spread_draws(theta[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

# Plotting

Caprine_Reg.plot <- Caprine_Reg.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
    geom_vline(
    xintercept = inv_logit(mean(Caprine_Reg.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Sheep/Goats",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


Caprine_Reg_phi.plot <- Caprine_Reg.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Caprine_Reg.fit_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Sheep/Goats",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


```

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-caprine-bb-reg
#| fig-cap: "Estimated probabilities of occurrence of caprine remains in different macroregions."
#| fig-pos: H

Caprine_Reg.plot

```

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-caprine-bb-reg-prec
#| fig-cap: "Precision in the context-type beta-binomial models for caprine remains."
#| fig-pos: H

Caprine_Reg_phi.plot

```

### Edible W. Animals

The distribution of edible wild animals in the Roman and late Roman periods is below the across-regions mean of 0.05. In central Italy, there is an increase in the probability of game consumption from the Roman to the medieval age, with an uncertain trend in the 11^th^ century. The precision parameter $\bar{\phi}$ is also high in the medieval phase. Similarly, northern Italy shows an increase in the probability of game consumption in the medieval phases, while the mean probabilities decrease after the Roman age. Southern Italy, on the other hand, has a stable trend from the Roman to the early medieval period, with an uncertain increase in the 11^th^ century. The credible interval is wide, and the model might have produced estimates in agreement with the other regions. However, there is evidence of an increase in game consumption in the 11^th^ century in every macroregion.

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

WMammals_Reg.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_reg.stan",  # Stan program
  data = dat.WMammals_Reg,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(WMammals_Reg.fit, "stan_models/WMammals_Reg_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

WMammals_Reg.fit <- readRDS("stan_models/WMammals_Reg_fit.rds")

WMammals_Reg.fit_a <- WMammals_Reg.fit %>%
  spread_draws(a[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Northern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

WMammals_Reg.fit_phi <- WMammals_Reg.fit %>%
  spread_draws(theta[Reg_id]) %>% 
  mutate(Reg_text = case_when(
    Reg_id == 1 ~ "Central Italy.R",
    Reg_id == 2 ~ "Northern Italy.R",
    Reg_id == 3 ~ "Southern Italy.R",
    Reg_id == 4 ~ "Central Italy.LR",
    Reg_id == 5 ~ "Northern Italy.LR",
    Reg_id == 6 ~ "Southern Italy.LR",
    Reg_id == 7 ~ "Central Italy.EMA",
    Reg_id == 8 ~ "Northern Italy.EMA",
    Reg_id == 9 ~ "Southern Italy.EMA",
    Reg_id == 10 ~ "Central Italy.Ma",
    Reg_id == 11 ~ "Northern Italy.Ma",
    Reg_id == 12 ~ "Southern Italy.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Reg_id == 1 ~ "R",
    Reg_id == 2 ~ "R",
    Reg_id == 3 ~ "R",
    Reg_id == 4 ~ "LR",
    Reg_id == 5 ~ "LR",
    Reg_id == 6 ~ "LR",
    Reg_id == 7 ~ "EMA",
    Reg_id == 8 ~ "EMA",
    Reg_id == 9 ~ "EMA",
    Reg_id == 10 ~ "Ma",
    Reg_id == 11 ~ "Ma",
    Reg_id == 12 ~ "Ma"
  )
  ) %>% 
  mutate(Region = case_when(
    Reg_id == 1 ~ "Central Italy",
    Reg_id == 2 ~ "Northern Italy",
    Reg_id == 3 ~ "Southern Italy",
    Reg_id == 4 ~ "Central Italy",
    Reg_id == 5 ~ "Northern Italy",
    Reg_id == 6 ~ "Southern Italy",
    Reg_id == 7 ~ "Central Italy",
    Reg_id == 8 ~ "Northern Italy",
    Reg_id == 9 ~ "Southern Italy",
    Reg_id == 10 ~ "Central Italy",
    Reg_id == 11 ~ "Northern Italy",
    Reg_id == 12 ~ "Southern Italy"
  )
  ) 

# Plotting

WMammals_Reg.plot <- WMammals_Reg.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(WMammals_Reg.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Edible Wild Animals",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


WMammals_Reg_phi.plot <- WMammals_Reg.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(WMammals_Reg.fit_phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Edible Wild Animals",
       subtitle="Macroregion",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Region ~ ., scales="free")


```


```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-wmammals-bb-reg
#| fig-cap: "Estimated probabilities of occurrence of wild mammal remains in different macroregions."
#| fig-pos: H

WMammals_Reg.plot

```

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-wmammals-bb-reg-prec
#| fig-cap: "Precision in the context-type beta-binomial models for wild mammal remains."
#| fig-pos: H

WMammals_Reg_phi.plot

```

## Geography {style="text-align:justify;"}

Animals distributions can vary across different geographical features. This research has considered plains, coasts, hills and mountains as the most common geographical features in the Italian peninsula. The majority of excavations that returned faunal samples are located at low altitudes. Although - as can be expected - northern Italy provided more samples from mountain sites when compared to the other parts of mainland Italy, the other samples seem to be evenly located on on plains, coastlands and hills.

```{r}
#| echo: false
#| message: false

library(waffle)

geo_waffle_tbl_North <- table((subset(Animals_Df2, Macroregion=="Northern Italy"))$Geo) %>% 
  as.data.frame() %>% 
  mutate(Macroregion= "Northern Italy")

geo_waffle_tbl_South <- table((subset(Animals_Df2, Macroregion=="Southern Italy"))$Geo) %>% as.data.frame()%>% 
  mutate(Macroregion= "Southern Italy")

geo_waffle_tbl_Central <- table((subset(Animals_Df2, Macroregion=="Central Italy"))$Geo) %>% as.data.frame() %>% 
  mutate(Macroregion= "Central Italy")

geo_waffle_tbl <- rbind(geo_waffle_tbl_North, geo_waffle_tbl_South, geo_waffle_tbl_Central) %>% as_tibble()
colnames(geo_waffle_tbl) <- c("Geography", "Frequency", "Macroregion")

```

```{r}
#| echo: false
#| fig-cap: "Distribution of sites on different geographical features."
#| label: fig-waffle-zoo-geo


ggplot(geo_waffle_tbl, aes(fill = factor(
  Geography, levels = c("Coast", "Plain", "Hill", "Mountain")
), values = Frequency)) +
  geom_waffle(
    n_rows = 10,
    size = 0.33,
    colour = "white",
    flip = TRUE,
    make_proportional = TRUE,
    na.rm = T
  ) +
  scale_fill_brewer(palette = "Spectral", direction = -1) +
  theme_tidybayes() +
  theme(
    legend.position = "bottom",
    aspect.ratio = 1,
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey100"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_blank(),
    axis.title.x.top = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  labs(fill = "Topography",
       title = "Topographical distribution of sites") +
  facet_wrap(factor(
    Macroregion,
    levels = c("Southern Italy", "Central Italy", "Northern Italy")
  ) ~ .)

```

The proposed model includes two categorical predictors---`Chronology` and `Geography`. As for the previous cases, the interaction between the two variables is obtained through a dummy index (${[GEOid]}$) that is used to estimate intercepts for each period and geography. The remaining parts of the model are the same as before. Geographical features can influence the differential distribution of animals: one for instance can expect more sheep/goats NISP remains in mountain sites, but it is also important to stratify by `Chronology` as certain political event can change the settlement patterns and economic strategies.

The proposed model includes two categorical predictors: `Chronology` and `Geography`. The interaction between these two variables is obtained through a dummy index (${[GEOid]}$) that is used to estimate intercepts for each period and geography. Geographical features can influence the differential distribution of animal remains. For instance, we might expect to find more sheep/goats NISP remains in mountain sites. It is however also important to consider the time factor, as changes in settlement patterns and economic strategies over time may have been driven by political events. We do this by stratifying again by chronology in addition to geographical features. The priors used for this model are the same as in the previous models.

$$
A_{i} \sim BetaBinomial(NISP_{i}, \bar{p}_{i} , \phi_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[GEOid]}
$$

$$
\alpha_{[GEOid]} \sim Normal(0,1.5)
$$

$$
\phi_{[GEOid]} \sim Exponential(1)+2
$$

```{r}
#| echo: false

d.Animals_Geo <- Animals_Df2
d.Animals_Geo$Geo_id <- as.integer(interaction(d.Animals_Geo$Geo,d.Animals_Geo$Chronology))

dat.Pigs_Geo = list(N=d.Animals_Geo$Tot_NISP, A=d.Animals_Geo$Pigs, Geo_id=d.Animals_Geo$Geo_id, J=nrow(d.Animals_Geo))
dat.Cattle_Geo = list(N=d.Animals_Geo$Tot_NISP, A=d.Animals_Geo$Cattle, Geo_id=d.Animals_Geo$Geo_id, J=nrow(d.Animals_Geo))
dat.Caprine_Geo = list(N=d.Animals_Geo$Tot_NISP, A=d.Animals_Geo$Caprine, Geo_id=d.Animals_Geo$Geo_id, J=nrow(d.Animals_Geo))
dat.WMammals_Geo = list(N=d.Animals_Geo$Tot_NISP, A=d.Animals_Geo$Edible.W..Mammals, Geo_id=d.Animals_Geo$Geo_id, J=nrow(d.Animals_Geo))


```

### Pigs

The data suggests that the probabilities of finding pig remains are generally higher in lowland areas, including coasts, plains, and hills, with mean probability values above the overall mean of 0.35 during the Roman period. However, there appears to be a general decrease in the 95% HDIs during the late Roman period, with the decline being more pronounced in plains where the mean probability drops from 0.49 to 0.34.

In plains, probabilities increase above the mean only in the 11^th^ century, whereas on coastal sites, the credible interval becomes wider in the 11^th^ century, and the mean remains below the average. Although the association between hills and pig remains probabilities seems to be always above average, there are no major patterns of chronological change.

In mountains, pig remains are always below the mean, but there seems to be an increase (associated with a good amount of uncertainty, as indicated by the low precision parameter and wide credible interval) in the early medieval Age. Unfortunately, no clear indication can be given for the medieval phase on mountains, given the wide credible interval that spans the entire probability range. This is due to the limited availability of samples for this period and geographical feature: the castrum of Rocca di Asolo (pigs NISP: 220/698 and 529/1837), the Toblburg Castle (94/346) and Rocchetta Nuova of Vacchereccia (60/258).

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Pigs_Geo.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_geo.stan",  # Stan program
  data = dat.Pigs_Geo,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(Pigs_Geo.fit, "stan_models/Pigs_Geo_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Pigs_Geo.fit <- readRDS("stan_models/Pigs_Geo_fit.rds")

Pigs_Geo.fit_a <- Pigs_Geo.fit %>%
  spread_draws(a[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

Pigs_Geo.fit_phi <- Pigs_Geo.fit %>%
  spread_draws(theta[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

# Plotting

Pigs_Geo.plot <- Pigs_Geo.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
    geom_vline(
    xintercept = inv_logit(mean(Pigs_Geo.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Pigs",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")


Pigs_Geo_phi.plot <- Pigs_Geo.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Pigs_Geo.fit_phi$theta), 
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Pigs",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          size = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")
```

```{r}
#| echo: false
#| fig-height: 10

Pigs_Geo.plot
Pigs_Geo_phi.plot
```

### Cattle


In this model, the overall predicted probabilities of cattle are consistently lower than those of other animals, with an average of 0.25. However, mountain sites show a higher mean probability for cattle compared to other geographical features. On the coasts, there is a chronological increase in cattle probabilities, with a mean value going above the overall mean in the 11^th^ century, albeit with higher uncertainty due to the fewer available sites. Conversely, on hills and plains, the probabilities of cattle increase only slightly.

What is particularly noteworthy is the trend observed in mountain sites, despite the higher uncertainty due to the lower number of available sites. Here, there is an increase in probabilities during the late Roman period, from a mean of 0.25 to 0.35, followed by a decrease in the early medieval period, although with a wider credible interval. In the 11^th^ century, the credible interval again spans across the entire probability range, with no clear indication of the trend. Four samples from three sites are available for this period: the castrum of Rocca di Asolo (cattle NISP: 265/698 and 395/1837), the Toblburg Castle (204/346) and Rocchetta Nuova of Vacchereccia (120/258).

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Cattle_Geo.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_geo.stan",  # Stan program
  data = dat.Cattle_Geo,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(Cattle_Geo.fit, "stan_models/Cattle_Geo_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Cattle_Geo.fit <- readRDS("stan_models/Cattle_Geo_fit.rds")

Cattle_Geo.fit_a <- Cattle_Geo.fit %>%
  spread_draws(a[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

Cattle_Geo.fit_phi <- Cattle_Geo.fit %>%
  spread_draws(theta[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

# Plotting

Cattle_Geo.plot <- Cattle_Geo.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(Cattle_Geo.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Cattle",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")


Cattle_Geo_phi.plot <- Cattle_Geo.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Cattle_Geo.fit_phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Cattle",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")
```

```{r}
#| echo: false
#| fig-height: 7
#| fig-width: 6.5
#| label: fig-bb-cattle-geo
#| fig-cap: "Estimated probabilities of occurrence of cattle remains across different geographical features."
#| fig-pos: H

Cattle_Geo.plot

```

```{r}
#| echo: false
#| fig-height: 7
#| fig-width: 6.5
#| label: fig-bb-cattle-geo-phi
#| fig-cap: "Precision in the beta-binomial models for cattle remains across different geographical features."
#| fig-pos: H

Cattle_Geo_phi.plot


```

### Sheep/Goats

The average probability for the occurrence of sheep/goats remains is 0.34 across all geographical features. On coastal sites, the mean probabilities are below average in the Roman-late Roman periods, but increase slightly in the early medieval phase and go above mean in the 11^th^ century, although the credible interval is high and the $\bar\phi$ is below mean. This increase is also seen on hills, where mean probabilities are below mean until the early medieval phase and decrease slightly below mean again in the 11^th^ century.

On plains, the mean probabilities are always below mean - as can be expected - but generally increase. Credible intervals for mountain sites are very wide, and thus require caution in interpretation. The general trend seems to be in decline from the Roman to the early medieval phase from a mean of 0.55 to 0.45. Again, it is impossible to draw conclusions for the 11^th^ century phase on mountains as only four samples from three sites are available: the castrum of Rocca di Asolo (sheep/goats NISP: 164/698 and 523/1837), the Toblburg Castle (48/346) and Rocchetta Nuova of Vacchereccia (68/258).

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

Caprine_Geo.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_geo.stan",  # Stan program
  data = dat.Caprine_Geo,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(Caprine_Geo.fit, "stan_models/Caprine_Geo_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

Caprine_Geo.fit <- readRDS("stan_models/Caprine_Geo_fit.rds")

Caprine_Geo.fit_a <- Caprine_Geo.fit %>%
  spread_draws(a[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

Caprine_Geo.fit_phi <- Caprine_Geo.fit %>%
  spread_draws(theta[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

# Plotting

Caprine_Geo.plot <- Caprine_Geo.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(Caprine_Geo.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Sheep/Goats",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")


Caprine_Geo_phi.plot <- Caprine_Geo.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Caprine_Geo.fit_phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Sheep/Goats",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")
```


```{r}
#| echo: false
#| fig-height: 7
#| fig-width: 6.5
#| label: fig-bb-caprine-geo-reg
#| fig-cap: "Estimated probabilities of occurrence of caprine remains across different geographical features."
#| fig-pos: H

Caprine_Geo.plot

```

```{r}
#| echo: false
#| fig-height: 5
#| fig-width: 6.5
#| label: fig-bb-caprine-geo-prec
#| fig-cap: "Precision in the beta-binomial models for caprine remains across different geographical features."
#| fig-pos: H

Caprine_Geo_phi.plot


```


### Edible W. Animals

NISP from edible wild animals is always low, and the probabilities of occurrence show little variation, as most mean probability values lay around the mean of 0.09. Overall, there is a positive association between 11^th^ century sites and game consumption in all geographical features. On plains, mean probabilities are above mean already in the early medieval period. Again, it is hard to draw conclusions for medieval mountain sites as there are only four samples available: the castrum of Rocca di Asolo (NISP: 12/698 and 39/1837), the Toblburg Castle (0/346) and Rocchetta Nuova of Vacchereccia (0/258).

```{r}
#| echo: false
#| eval: false
#| output: false
#| message: false


########################################
# Running the model
# Saving the model
# Setting code chunk to eval: false
# To save up on rendering time
########################################

WMammals_Geo.fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_geo.stan",  # Stan program
  data = dat.WMammals_Geo,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4,              # number of cores (could use one per chain
)

saveRDS(WMammals_Geo.fit, "stan_models/WMammals_Geo_fit.rds")

```

```{r}
#| echo: false
#| message: false
#| output: false

##################
# Load models
##################

WMammals_Geo.fit <- readRDS("stan_models/WMammals_Geo_fit.rds")

WMammals_Geo.fit_a <- WMammals_Geo.fit %>%
  spread_draws(a[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

WMammals_Geo.fit_phi <- WMammals_Geo.fit %>%
  spread_draws(theta[Geo_id]) %>% 
  mutate(Reg_text = case_when(
    Geo_id == 1 ~ "Coast.R",
    Geo_id == 2 ~ "Hill.R",
    Geo_id == 3 ~ "Mountain.R",
    Geo_id == 4 ~ "Plain.R",
    Geo_id == 5 ~ "Coast.LR",
    Geo_id == 6 ~ "Hill.LR",
    Geo_id == 7 ~ "Mountain.LR",
    Geo_id == 8 ~ "Plain.LR",
    Geo_id == 9 ~ "Coast.EMA",
    Geo_id == 10 ~ "Hill.EMA",
    Geo_id == 11 ~ "Mountain.EMA",
    Geo_id == 12 ~ "Plain.EMA",
    Geo_id == 13 ~ "Coast.Ma",
    Geo_id == 14 ~ "Hill.Ma",
    Geo_id == 15 ~ "Mountain.Ma",
    Geo_id == 16 ~ "Plain.Ma"
  )
  ) %>%
  mutate(Chronology = case_when(
    Geo_id == 1 ~ "R",
    Geo_id == 2 ~ "R",
    Geo_id == 3 ~ "R",
    Geo_id == 4 ~ "R",
    Geo_id == 5 ~ "LR",
    Geo_id == 6 ~ "LR",
    Geo_id == 7 ~ "LR",
    Geo_id == 8 ~ "LR",
    Geo_id == 9 ~ "EMA",
    Geo_id == 10 ~ "EMA",
    Geo_id == 11 ~ "EMA",
    Geo_id == 12 ~ "EMA",
    Geo_id == 13 ~ "Ma",
    Geo_id == 14 ~ "Ma",
    Geo_id == 15 ~ "Ma",
    Geo_id == 16 ~ "Ma"
  )
  ) %>% 
  mutate(Geography = case_when(
    Geo_id == 1 ~ "Coast",
    Geo_id == 2 ~ "Hill",
    Geo_id == 3 ~ "Mountain",
    Geo_id == 4 ~ "Plain",
    Geo_id == 5 ~ "Coast",
    Geo_id == 6 ~ "Hill",
    Geo_id == 7 ~ "Mountain",
    Geo_id == 8 ~ "Plain",
    Geo_id == 9 ~ "Coast",
    Geo_id == 10 ~ "Hill",
    Geo_id == 11 ~ "Mountain",
    Geo_id == 12 ~ "Plain",
    Geo_id == 13 ~ "Coast",
    Geo_id == 14 ~ "Hill",
    Geo_id == 15 ~ "Mountain",
    Geo_id == 16 ~ "Plain"
  )
  ) 

# Plotting

WMammals_Geo.plot <- WMammals_Geo.fit_a %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = inv_logit(a))) +
  stat_interval(
    .width = c(.50, .80, .95, .99), 
    linewidth=3
  )+
    stat_summary(
    geom = "point",
    fun = "mean",
    col = "white",
    size = 2,
    shape = 1
  )+
  geom_vline(
    xintercept = inv_logit(mean(WMammals_Geo.fit_a$a)),
    linetype = "twodash",
    linewidth = 0.45,
    color = "red4"
  ) +
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys", name="Credible interval")+
  labs(x="Predicted probability",
       y="Chronology",
       title="Edible Wild Animals",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each macroregion and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")


WMammals_Geo_phi.plot <- WMammals_Geo.fit_phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(WMammals_Geo.fit_phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Edible Wild Animals",
       subtitle="Geography",
       caption="The dashed line indicates the mean for each site type and chronology.\nThe circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  facet_grid(Geography ~ ., scales="free")
```

```{r}
#| echo: false
#| fig-height: 7
#| fig-width: 6.5
#| label: fig-bb-wmammals-geo
#| fig-cap: "Estimated probabilities of occurrence of wild mammal remains across different geographical features."
#| fig-pos: H

WMammals_Geo.plot

```

```{r}
#| echo: false
#| fig-height: 7
#| fig-width: 6.5
#| label: fig-bb-wmammals-geo-prec
#| fig-cap: "Precision in the beta-binomial models for wild mammal remains across different geographical features."
#| fig-pos: H

WMammals_Geo_phi.plot

```

## Altitude

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| output: false

# Libraries
library(tidybayes)
library(tidyverse)
library(tidybayes.rethinking)
library(modelr)

# Load dataset
zoo_altitude <- read.csv("/Users/robertoragno/Desktop/University/Bari/PhD - Quarto/Database export/Zooarch_Condensed_with_altitude.csv", header=TRUE, sep=";")

# End distance to coast

###########
# CAPRINE #
###########

# Create dataframe for the chosen animal
# Can't create list directly from original dataset as I have to select
# only observations > 0 

caprine_altitude <- data.frame(
  Site_ID = zoo_altitude$ID,
  Macroregion = factor(zoo_altitude$Macroregion),
  Altitude = zoo_altitude$Altitude,
  Chronology = factor(zoo_altitude$Chronology),
  Capr_NISP = zoo_altitude$Caprine,
  Tot_NISP = rowSums(zoo_altitude[c(16:24)], na.rm = T)
)

# Subset by removing NAs and choosing positive altitudes
caprine_altitude[is.na(caprine_altitude)] <- 0
caprine_altitude <- subset(caprine_altitude, Altitude>0 & Capr_NISP>0)

# Finally creating the list
dat.Caprine_Altitude = list(
  N = caprine_altitude$Tot_NISP, 
  A = caprine_altitude$Capr_NISP, 
  Chr_id = as.factor(as.numeric(caprine_altitude$Chronology)), 
  Alt = caprine_altitude$Altitude,
  J = nrow(caprine_altitude)
  )


###########
# PIGS    #
###########

pigs_altitude <- data.frame(
  Site_ID = zoo_altitude$ID,
  Macroregion = factor(zoo_altitude$Macroregion),
  Altitude = zoo_altitude$Altitude,
  Chronology = factor(zoo_altitude$Chronology),
  Pigs_NISP = zoo_altitude$Pigs,
  Tot_NISP = rowSums(zoo_altitude[c(16:24)], na.rm = T)
)

pigs_altitude[is.na(pigs_altitude)] <- 0
pigs_altitude <- subset(pigs_altitude, Altitude>0 & Pigs_NISP>0)


dat.Pigs_Altitude = list(
  N = pigs_altitude$Tot_NISP, 
  A = pigs_altitude$Pigs_NISP, 
  Chr_id = as.factor(as.numeric(pigs_altitude$Chronology)), 
  Alt = pigs_altitude$Altitude,
  J = nrow(pigs_altitude)
  )

###########
# CATTLE  #
###########

cattle_altitude <- data.frame(
  Site_ID = zoo_altitude$ID,
  Macroregion = factor(zoo_altitude$Macroregion),
  Altitude = zoo_altitude$Altitude,
  Chronology = factor(zoo_altitude$Chronology),
  Cattle_NISP = zoo_altitude$Cattle,
  Tot_NISP = rowSums(zoo_altitude[c(16:24)], na.rm = T)
)

cattle_altitude[is.na(cattle_altitude)] <- 0
cattle_altitude <- subset(cattle_altitude, Altitude>0 & Cattle_NISP>0)


dat.Cattle_Altitude = list(
  N = cattle_altitude$Tot_NISP, 
  A = cattle_altitude$Cattle_NISP, 
  Chr_id = as.factor(as.numeric(cattle_altitude$Chronology)), 
  Alt = cattle_altitude$Altitude,
  J = nrow(cattle_altitude)
  )

######################
# Edible W. Mammals  #
######################

WMammals_altitude <- data.frame(
  Site_ID = zoo_altitude$ID,
  Macroregion = factor(zoo_altitude$Macroregion),
  Altitude = zoo_altitude$Altitude,
  Chronology = factor(zoo_altitude$Chronology),
  WMammals_NISP = zoo_altitude$Edible.W..Mammals,
  Tot_NISP = rowSums(zoo_altitude[c(16:24)], na.rm = T)
)

WMammals_altitude[is.na(WMammals_altitude)] <- 0
WMammals_altitude <- subset(WMammals_altitude, Altitude>0 & WMammals_NISP>0)

dat.WMammals_Altitude = list(
  N = WMammals_altitude$Tot_NISP, 
  A = WMammals_altitude$WMammals_NISP, 
  Chr_id = as.factor(as.numeric(WMammals_altitude$Chronology)), 
  Alt = WMammals_altitude$Altitude,
  J = nrow(WMammals_altitude)
  )

```

The probability of occurrence of the most common faunal remains can be modelled using the altitude of the sites in the four periods considered. It should be noted that the sites where the zooarchaeological remains were found are not evenly distributed. In the Roman period, most of the sites investigated are located between 0 and 100 MSL, whereas afterwards there is an increasing number of remains from sites between 100 and 400 MSL. Whether this reflects a real shift in settlement patterns is beyond the aims of this study, but it may still be informative to visualise the different distribution of sites at different altitudes.

```{r}
#| echo: false
#| fig-height: 8

zoo_altitude %>% 
  ggplot(aes(x=Altitude/1000)) +
  geom_histogram(bins=80, alpha=.6, aes(y = after_stat(ndensity)) )+ 
  geom_density(aes(y=after_stat(ndensity)), adjust=0.3, color = "red4", linewidth=0.75)+
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1,
                                        colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="Density",
       x="Altitude (km)",
       title="Sites distribution",
      caption="Density of sites scaled from 0 to 1."
       )+
  facet_grid(factor(Chronology, levels=chrono_levels)~.)
```

The proposed model for estimating the probability of occurrence as a function of altitude (the slope $\beta$) and chronology (${[ChrID]}$) uses a betabinomial distribution to model overdispersion in the data. The $A$ on the left side of the formula is the outcome variable---the animal NISP counts for each observation $i$. This is a simple intercept with slope model, where the intercept $\alpha$ carries an index ${[ChrID]}$ as the model provides estimates for each chronology under examination. A single parameter $\phi$ indicates the precision in the Beta distribution. The DAG for this model has not been repeated as it is identical to that in @fig-altitude-dag-plants.

$$
A_{i} \sim BetaBinomial(NISP_{i}, \bar{p}_{i} , \phi_{i})
$$

$$
logit(\bar{p}_{i}) = \alpha_{[ChrID]} + \beta_{[ChrID]}\cdot Alt_{i}
$$

$$
\alpha_{ChrID} \sim Normal(0,1.5)
$$

$$
\beta_{ChrID} \sim Normal(0,1.5)
$$

$$
\phi \sim Exponential(1)+2
$$

```{r}
#| echo: false
#| label: fig-prior-pred-animals-altitude
#| fig-cap: "Prior predictive simulation for the altitude beta-binomial models used in this section."
#| fig-width: 4

# Prior predictive simulation:
simplehist(rbetabinom(1e4, 
                      size=20, 
                      prob=
                      inv_logit(
    rnorm(1e4, 0, 1.5)+rnorm(1e4, 0, 1.5)*sample(zoo_altitude$Altitude/1000, size=1e4, replace=T)), 
                      theta = dexp(1e4, 1)+2
                      ), 
col=rangi2
           )

```

### Pigs

The model shows a negative correlation between an increase in altitude and the probability of finding pig remains. This result was already suggested in the models with geographical features as predictor. In fact, although the variability increases at higher altitudes (due to the more limited number of samples available), pig remains are more likely to be found in lowland areas in all chronologies. The average precision $\bar\phi$ for the four chronologies is 5.41.

```{r}
#| eval: false
#| echo: false


# CODE WITH Rethinking MODEL
# Only one phi/theta

Pigs_Alt_fit.reth <- ulam(
    alist(
        A ~ dbetabinom( N , pbar , theta ),
        logit(pbar) <- a[Chr_id] + b[Chr_id]*(Alt/1000.0),
        a[Chr_id] ~ dnorm( 0 , 1.5 ),
        b[Chr_id] ~ dnorm( 0 , 1.5 ),
        transpars> theta <<- phi + 2.0,
        phi ~ dexp(1)
    ), data=dat.Pigs_Altitude , chains=4 )

saveRDS(Pigs_Alt_fit.reth, "stan_models/Pigs_Alt_fit_rethinking.rds")

# CODE WITH STAN MODEL



```

```{r}
#| echo: false
#| message: false
#| warning: false


Pigs_Alt_fit.reth <- readRDS("stan_models/Pigs_Alt_fit_rethinking.rds")
Pigs_Alt_fit.reth.post <- extract.samples(Pigs_Alt_fit.reth)

Pigs_Alt_fit_reth.plot <- as.data.frame(dat.Pigs_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(Pigs_Alt_fit.reth) %>%
  ggplot(aes(x = Alt/1000, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="P (Pigs | Total NISP)",
       x="Altitude (km)",
       title="Pigs",
       subtitle="Altitude",
       caption = bquote("Precision parameter ("~phi~"): " ~ .(round(mean(Pigs_Alt_fit.reth.post$theta), 2)))
)+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

```

```{r}
#| echo: false
#| fig-cap: "Posterior distribution plot showing the occurrence of pig remains in relation to different altitudes, stratified by chronological phase."
#| fig-height: 4
#| label: fig-altitude-pigs
#| fig-pos: H
Pigs_Alt_fit_reth.plot

```

### Cattle

If pigs show a negative trend with increasing altitude, cattle show the opposite pattern. In each chronology, the probability of finding cattle is much higher at higher elevations. The early medieval and medieval phases show the strongest association between higher elevations and a greater number of cattle NISP remains. However, the medieval and Roman datasets do not include samples above 1.2 km.

```{r}
#| eval: false
#| echo: false


# CODE WITH Rethinking MODEL
# Only one phi/theta

Cattle_Alt_fit.reth <- ulam(
    alist(
        A ~ dbetabinom( N , pbar , theta ),
        logit(pbar) <- a[Chr_id] + b[Chr_id]*(Alt/1000.0),
        a[Chr_id] ~ dnorm( 0 , 1.5 ),
        b[Chr_id] ~ dnorm( 0 , 1.5 ),
        transpars> theta <<- phi + 2.0,
        phi ~ dexp(1)
    ), data=dat.Cattle_Altitude , chains=4 )

saveRDS(Cattle_Alt_fit.reth, "stan_models/Cattle_Alt_fit_rethinking.rds")

```

```{r}
#| echo: false
#| message: false
#| warning: false


Cattle_Alt_fit.reth <- readRDS("stan_models/Cattle_Alt_fit_rethinking.rds")
Cattle_Alt_fit.reth.post <- extract.samples(Cattle_Alt_fit.reth)

Cattle_Alt_fit_reth.plot <- as.data.frame(dat.Cattle_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(Cattle_Alt_fit.reth) %>%
  ggplot(aes(x = Alt/1000, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="P (Cattle | Total NISP)",
       x="Altitude (km)",
       title="Cattle",
       subtitle="Altitude",
       caption = bquote("Precision parameter ("~phi~"): " ~ .(round(mean(Cattle_Alt_fit.reth.post$theta), 2)))
)+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))


```

```{r}
#| echo: false
#| fig-cap: "Posterior distribution plot showing the occurrence of cattle remains in relation to different altitudes, stratified by chronological phase."
#| fig-height: 4
#| label: fig-altitude-cattle
#| fig-pos: H
Cattle_Alt_fit_reth.plot

```

### Sheep/Goats

The correlation between sheep/goat NISP and altitude is perhaps most interesting when stratified by chronology. In the Roman and late Roman periods there is a positive correlation between altitude and the probability of finding sheep/goats NISP, meaning that sheep/goats are more likely to be found at higher altitudes. In the early Middle Ages, however, this trend diverges. The correlation begins to become negative, although not markedly so, suggesting that there are changing trends. This trend becomes increasingly negative in 11^th^ century sites. The average precision $\bar\phi$ for the four chronologies is 7.57.

```{r}
#| eval: false
#| echo: false

# MODELS

# CODE WITH STAN MODEL
# THIS GIVES A THETA FOR EACH CHRONOLOGY
Capr_Alt_fit <- stan(
  file = "stan_models/stan_models_codes/beta_binomial_model_animals_altitude.stan",  # Stan program
  data = dat.Caprine_Altitude,    # named list of data
  chains = 4,             # number of Markov chains
  warmup = 1000,          # number of warmup iterations per chain
  iter = 4000,            # total number of iterations per chain
  cores = 4
)


# CODE WITH Rethinking MODEL
# Only one phi/theta

Capr_Alt_fit.reth <- ulam(
    alist(
        A ~ dbetabinom( N , pbar , theta ),
        logit(pbar) <- a[Chr_id] + b[Chr_id]*(Alt/1000.0),
        a[Chr_id] ~ dnorm( 0 , 1.5 ),
        b[Chr_id] ~ dnorm( 0 , 1.5 ),
        transpars> theta <<- phi + 2.0,
        phi ~ dexp(1)
    ), data=dat.Caprine_Altitude , chains=4, log_lik = T )

saveRDS(Capr_Alt_fit.reth, "stan_models/Capr_Alt_fit_rethinking.rds")

```

```{r}
#| echo: false

Capr_Alt_fit.reth <- readRDS("stan_models/Capr_Alt_fit_rethinking.rds")
Capr_Alt_fit.reth.post <- extract.samples(Capr_Alt_fit.reth)
#Capr_Alt_fit.post <- extract.samples(Capr_Alt_fit)


Capr_Alt_fit_reth.plot <- as.data.frame(dat.Caprine_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(Capr_Alt_fit.reth) %>%
  ggplot(aes(x = Alt/1000, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
    labs(
       y="P (Sheep and goats | Total NISP)",
       x="Altitude (km)",
       title="Caprine",
       subtitle="Altitude",
       caption = bquote("Precision parameter ("~phi~"): " ~ .(round(mean(Capr_Alt_fit.reth.post$theta), 2)))
)+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))

Capr_Alt_fit_reth.plot


```

```{r}
#| eval: false
#| echo: false

###########################
## PLOTS WITH STAN MODEL
###########################

# PHI PLOT

Capr_Alt_fit.phi <- Capr_Alt_fit %>%
  spread_draws(theta[Chr_id]) %>% 
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )
  ) 

Capr_Alt_fit_phi.plot <- Capr_Alt_fit.phi %>%
  ggplot(aes(y = factor(Chronology, levels=chrono_levels), x = theta)) +
  stat_halfeye() +
  geom_vline(xintercept = mean(Capr_Alt_fit.phi$theta), 
             linetype = "twodash",
             linewidth = 0.45,
             color = "red4")+
  scale_y_discrete(limits=rev)+
  scale_x_continuous(breaks = scales::pretty_breaks(n = 10), sec.axis = dup_axis()) +
  scale_color_brewer(palette="Greys")+
  labs(x=expression(paste("Precision parameter (", phi, ")")),
       y="Chronology",
       title="Sheep/Goats",
       subtitle="Altitude",
       caption="The dashed line indicates the mean for each chronology. The circle indicates the mean for each line.")+
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )

```

### Edible W. Animals

In contrast, modeling the number of wild animal NISP remains against altitude was not very informative. The probability of occurrence of these species is always low, meaning that elevation does not seem to be a major factor in their distribution. The prediction line appears to indicate no correlation, although if we include the 0.99 credible interval, the correlation is potentially positive in all chronologies. The model performed very poorly on 11^th^ century sites, because not many sites reported wild animal remains and the credible intervals are quite wide. In other chronologies, the credible intervals are not very large and the overall mean precision parameter $\bar\phi$ is 15.65, indicating that the data were not very dispersed.

```{r}
#| eval: false
#| echo: false


# CODE WITH Rethinking MODEL
# Only one phi/theta

WMammals_Alt_fit.reth <- ulam(
  alist(
    A ~ dbetabinom( N , pbar , theta ),
    logit(pbar) <- a[Chr_id] + b[Chr_id]*(Alt/1000.0),
    a[Chr_id] ~ dnorm( 0 , 1.5 ),
    b[Chr_id] ~ dnorm( 0 , 1.5 ),
    transpars> theta <<- phi + 2.0,
    phi ~ dexp(1)
  ), data=dat.WMammals_Altitude , chains=4 )

saveRDS(WMammals_Alt_fit.reth, "stan_models/WMammals_Alt_fit_rethinking.rds")

```

```{r}
#| echo: false
#| message: false
#| warning: false

WMammals_Alt_fit.reth <- readRDS("stan_models/WMammals_Alt_fit_rethinking.rds")
WMammals_Alt_fit.reth.post <- extract.samples(WMammals_Alt_fit.reth)

WMammals_Alt_fit_reth.plot <- as.data.frame(dat.WMammals_Altitude) %>%
  group_by(Chr_id) %>%
  mutate(Chronology = case_when(
    Chr_id == 1 ~ "EMA",
    Chr_id == 2 ~ "LR",
    Chr_id == 3 ~ "Ma",
    Chr_id == 4 ~ "R"
  )) %>% 
  data_grid(Alt = seq_range(Alt, n = 101), Chronology) %>%
  add_linpred_draws(WMammals_Alt_fit.reth) %>%
  ggplot(aes(x = Alt/1000, y = .linpred)) +
  stat_lineribbon(aes(y = .linpred), color="grey90") +
  scale_fill_brewer(palette = "Greys")+ 
  theme_tidybayes()+
  theme(legend.position = "bottom", 
        strip.background = element_rect(fill = "grey",
                                        linewidth = 0.1, colour="black"),
        panel.background = element_rect(fill = "grey90"),
        panel.border = element_rect(fill=NA, linewidth = 0.1),
        panel.grid.major.x = element_line(color = "grey50",
                                          linewidth = 0.25,
                                          linetype = 2),
        axis.title.x.top = element_blank()
  )+
  labs(
    y="P (Edible Wild Animals | Total NISP)",
    x="Altitude (km)",
    title="Edible Wild Animals",
    subtitle="Altitude",
    caption = bquote("Precision parameter ("~phi~"): " ~ .(round(mean(WMammals_Alt_fit.reth.post$theta), 2)))
  )+
  facet_wrap(~ factor(Chronology, levels=chrono_levels))



```

```{r}
#| echo: false
#| fig-cap: "Posterior distribution plot showing the occurrence of wild animals remains in relation to different altitudes, stratified by chronological phase."
#| fig-height: 4
#| label: fig-altitude-wanimals

WMammals_Alt_fit_reth.plot

```

### Community plot

To examine the overall trends across all phases and different altitudes, the probabilities of occurrence for the four animals were combined and plotted against the slope coefficient (which in the models is multiplied by altitude). The resulting plot shows the probability of occurrence of each animal at different altitudes. The horizontal dashed line represents the probability of finding each animal at sea level. It should be remembered that these are separate models and further research should explore other models, such as multinomial models.

In the Roman period, pigs were the most likely remains to be found, with probabilities ranging from 0.40 to 0.45. Most of the probabilities are negative, indicating a negative correlation with altitude. This suggests that pigs were more likely to be reared in lower lying areas. Wild animals were also negatively correlated with altitude, but the correlation was not as strong as for pigs. Sheep/goats and cattle were the second and third most common animal remains found. Both were positively correlated with altitude. In the late Roman period, the probability of finding pig remains dropped to 0.35-0.34, while the probabilities of finding game animals, sheep/goats and cattle remained more or less the same. This suggests that pigs may have become less common during this period. In the early medieval period the probabilities of finding cattle and sheep/goat remains increased to 0.17-0.26 and 0.26-0.34 respectively, while the probability of finding wild animal remains decreased to 0.05-0.10.

Although cattle and sheep/goats may have become more common during this period, the probability of occurrence of pigs did not change, as they remain the most common species found in zooarchaeological samples. Interestingly, sheep/goat probabilities are negatively correlated with site altitude during this period. This correlation becomes even more negative in the 11\^th century phase. In this last phase there was an increased variability in the probabilities of finding all four animal remains. This may be the result of a smaller number of samples.

```{r}
#| echo: false

WMamm_post.a <- as.data.frame(WMammals_Alt_fit.reth.post) %>% mutate(animal = "W_Animals")
Pigs_post.a <- as.data.frame(Pigs_Alt_fit.reth.post) %>% mutate(animal = "Pigs")
Cattle_post.a <- as.data.frame(Cattle_Alt_fit.reth.post) %>% mutate(animal = "Cattle")
Caprine_post.a <- as.data.frame(Capr_Alt_fit.reth.post) %>% mutate(animal = "Caprine")

Domestic_Alt_binded <- bind_rows(
  WMamm_post.a,
  Pigs_post.a,
  Cattle_post.a,
  Caprine_post.a
)
names(Domestic_Alt_binded)[1:8] <- c("a.EMA", "a.LR", "a.Ma", "a.R", "b.EMA", "b.LR", "b.Ma", "b.R")

# Reshape
Domestic_Alt_R <- Domestic_Alt_binded %>%
  select(animal, a= a.R, b= b.R) %>%
  mutate(Chronology = "R")

Domestic_Alt_LR <- Domestic_Alt_binded %>%
  select(animal, a=a.LR, b=b.LR) %>%
  mutate(Chronology = "LR")

Domestic_Alt_EMA <- Domestic_Alt_binded %>%
  select(animal, a=a.EMA, b=b.EMA) %>%
  mutate(Chronology = "EMA")

Domestic_Alt_Ma <- Domestic_Alt_binded %>%
  select(animal, a=a.Ma, b=b.Ma) %>%
  mutate(Chronology = "Ma")

Domestic_Alt_post <- bind_rows(Domestic_Alt_R, Domestic_Alt_LR, Domestic_Alt_EMA, Domestic_Alt_Ma)

# end reshape

Domestic_Alt_post.plot <- ggplot(Domestic_Alt_post, aes(x = inv_logit(a), y = b, color = animal)) +
  geom_point(alpha = .4) +
  theme_tidybayes() +
  scale_color_brewer(palette = "Spectral") +
  theme(
    legend.position = "bottom",
    strip.background = element_rect(
      fill = "grey",
      linewidth = 0.1,
      colour = "black"
    ),
    panel.background = element_rect(fill = "grey90"),
    panel.border = element_rect(fill = NA, linewidth = 0.1),
    panel.grid.major.x = element_line(
      color = "grey50",
      linewidth = 0.25,
      linetype = 2
    ),
    axis.title.x.top = element_blank()
  ) +  
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 10),
    sec.axis = dup_axis()
  ) +
  labs(
    x = "Intercept",
    y = "Slope",
    color = "Animal",
    title = "Model estimates: logit(p) = Intercept+Slope*Altitude",
    subtitle = "Altitude"
  )+
  facet_grid(factor(Chronology, levels=chrono_levels)~., scales="free")


```

```{r}
#| echo: false
#| fig-height: 10
#| label: fig-domestic-alt
#| fig-cap: "MCMC estimates for slope and intercept plotted in the logit scale. Negative slopes indicate a negative relationship between the animal remains and increasing altitude. Intercepts were kept as a baseline occurrence probability of the species. Species on the left of the graph are rarer, species on the right are more common. It is important to notice that this represents the species response to elevation." 

Domestic_Alt_post.plot
```
