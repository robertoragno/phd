# Custom functions {.unnumbered #sec-custom-functions}

This section contains the list of custom functions that have been written to prepare, handle and visualize the data exported from the database.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| code-overflow: wrap

##FUNCTION FOR GENERATING CENTURY BASED
# - UBIQUITY
# - RELATIVE PROPORTIONS
# - A PRINT OF THE TABLE

archaeobotany_tables <- function(x, century) {
  # Load the tidyverse library if it hasn't been loaded in the page before
  library(tidyverse)
  
  # Remove NAs
  x[is.na(x)] <-0 
  
  # Filter the table for the chosen century
  # package: tidyverse
  x <- filter(x, data_valid_start <= century & data_valid_end >= century)
  
  # The total of each row is needed to calculate the relative proportions
  # Note: Calculation starts from column 14 because it is the first column with numerical data. If the table exported from the database changes, this number must be adjusted.
  Total <- rowSums(x[,14:ncol(x)])
  
  # Subsetting the given dataframe by creating a new dataframe with fewer columns 
  plants <- data.frame(x$site_name, x$type_name, 
                       x$data_valid_start, x$data_valid_end,
                       x$culture_type, x[14:ncol(x)], 
                       Total
  )
  
  # Calculating the relative proportions and rounding the results to 2 digits.
  Rel_Prop <- round(((x[14:ncol(x)]/Total)*100), digits=2)
  
  # Ubiquity: 
  #Note: It is given by the no. of sites where the plant is present divided by the total of sites
  # Note: Total of sites: (No. of rows - header row)
  
  # Creating a new dataframe from the Relative Proportions one (Rel_Prop). 
  # Note: This can be done also from the original dataframe, it is not important since it is just a calculation based on presence/absence. I chose this dataframe as it has already the columns I need.
  Pres_Abs <- Rel_Prop
  
  # If the value is > 0 it means that the plant is present: this line replaces this value with a 1 (indicating presence)
  Pres_Abs[Pres_Abs > 0] <- 1
  
  # In how many sites is this plant present?
  Tot_sites_present <- colSums(Pres_Abs)

  # Finally calculate ubiquity
  # Note: The score is multiplied by 100 to obtain results in %
  Ubiquity <- (Tot_sites_present / nrow(Pres_Abs))*100
  
  return(list(
    Ubiquity_exp = Ubiquity,
    Rel_Prop_exp = Rel_Prop,
    Raw_Counts = plants
    ))
}

```

